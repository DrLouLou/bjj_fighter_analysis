{
  "version": 3,
  "sources": ["../../@ag-grid-enterprise/clipboard/dist/package/main.esm.mjs"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// enterprise-modules/clipboard/src/clipboardModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\";\n\n// enterprise-modules/clipboard/src/clipboard/clipboardService.ts\nimport {\n  _,\n  Autowired,\n  Bean,\n  BeanStub,\n  ChangedPath,\n  Events,\n  PostConstruct,\n  Optional\n} from \"@ag-grid-community/core\";\nvar SOURCE_PASTE = \"paste\";\nvar EXPORT_TYPE_DRAG_COPY = \"dragCopy\";\nvar EXPORT_TYPE_CLIPBOARD = \"clipboard\";\nvar apiError = (method) => `AG Grid: Unable to use the Clipboard API (navigator.clipboard.${method}()). The reason why it could not be used has been logged in the previous line. For this reason the grid has defaulted to using a workaround which doesn't perform as well. Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.`;\nvar ClipboardService = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.lastPasteOperationTime = 0;\n    this.navigatorApiFailed = false;\n  }\n  init() {\n    this.logger = this.loggerFactory.create(\"ClipboardService\");\n    if (this.rowModel.getType() === \"clientSide\") {\n      this.clientSideRowModel = this.rowModel;\n    }\n    this.ctrlsService.whenReady((p) => {\n      this.gridCtrl = p.gridCtrl;\n    });\n  }\n  pasteFromClipboard() {\n    this.logger.log(\"pasteFromClipboard\");\n    const allowNavigator = !this.gos.get(\"suppressClipboardApi\");\n    if (allowNavigator && !this.navigatorApiFailed && navigator.clipboard && navigator.clipboard.readText) {\n      navigator.clipboard.readText().then(this.processClipboardData.bind(this)).catch((e) => {\n        _.doOnce(() => {\n          console.warn(e);\n          console.warn(apiError(\"readText\"));\n        }, \"clipboardApiError\");\n        this.navigatorApiFailed = true;\n        this.pasteFromClipboardLegacy();\n      });\n    } else {\n      this.pasteFromClipboardLegacy();\n    }\n  }\n  pasteFromClipboardLegacy() {\n    let defaultPrevented = false;\n    const handlePasteEvent = (e) => {\n      const currentPastOperationTime = (/* @__PURE__ */ new Date()).getTime();\n      if (currentPastOperationTime - this.lastPasteOperationTime < 50) {\n        defaultPrevented = true;\n        e.preventDefault();\n      }\n      this.lastPasteOperationTime = currentPastOperationTime;\n    };\n    this.executeOnTempElement(\n      (textArea) => {\n        textArea.addEventListener(\"paste\", handlePasteEvent);\n        textArea.focus({ preventScroll: true });\n      },\n      (element) => {\n        const data = element.value;\n        if (!defaultPrevented) {\n          this.processClipboardData(data);\n        } else {\n          this.refocusLastFocusedCell();\n        }\n        element.removeEventListener(\"paste\", handlePasteEvent);\n      }\n    );\n  }\n  refocusLastFocusedCell() {\n    const focusedCell = this.focusService.getFocusedCell();\n    if (focusedCell) {\n      this.focusService.setFocusedCell({\n        rowIndex: focusedCell.rowIndex,\n        column: focusedCell.column,\n        rowPinned: focusedCell.rowPinned,\n        forceBrowserFocus: true\n      });\n    }\n  }\n  getClipboardDelimiter() {\n    const delimiter = this.gos.get(\"clipboardDelimiter\");\n    return _.exists(delimiter) ? delimiter : \"\t\";\n  }\n  processClipboardData(data) {\n    if (data == null) {\n      return;\n    }\n    let parsedData = ClipboardService.stringToArray(data, this.getClipboardDelimiter());\n    const userFunc = this.gos.getCallback(\"processDataFromClipboard\");\n    if (userFunc) {\n      parsedData = userFunc({ data: parsedData });\n    }\n    if (parsedData == null) {\n      return;\n    }\n    if (this.gos.get(\"suppressLastEmptyLineOnPaste\")) {\n      this.removeLastLineIfBlank(parsedData);\n    }\n    const pasteOperation = (cellsToFlash, updatedRowNodes, focusedCell, changedPath) => {\n      var _a;\n      const rangeActive = (_a = this.rangeService) == null ? void 0 : _a.isMoreThanOneCell();\n      const pasteIntoRange = rangeActive && !this.hasOnlyOneValueToPaste(parsedData);\n      if (pasteIntoRange) {\n        this.pasteIntoActiveRange(this.rangeService, parsedData, cellsToFlash, updatedRowNodes, changedPath);\n      } else {\n        this.pasteStartingFromFocusedCell(parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n      }\n    };\n    this.doPasteOperation(pasteOperation);\n  }\n  // This will parse a delimited string into an array of arrays.\n  static stringToArray(strData, delimiter = \",\") {\n    const data = [];\n    const isNewline = (char) => char === \"\\r\" || char === \"\\n\";\n    let insideQuotedField = false;\n    if (strData === \"\") {\n      return [[\"\"]];\n    }\n    for (let row = 0, column = 0, position = 0; position < strData.length; position++) {\n      const previousChar = strData[position - 1];\n      const currentChar = strData[position];\n      const nextChar = strData[position + 1];\n      const ensureDataExists = () => {\n        if (!data[row]) {\n          data[row] = [];\n        }\n        if (!data[row][column]) {\n          data[row][column] = \"\";\n        }\n      };\n      ensureDataExists();\n      if (currentChar === '\"') {\n        if (insideQuotedField) {\n          if (nextChar === '\"') {\n            data[row][column] += '\"';\n            position++;\n          } else {\n            insideQuotedField = false;\n          }\n        } else if (previousChar === void 0 || previousChar === delimiter || isNewline(previousChar)) {\n          insideQuotedField = true;\n        }\n      }\n      if (!insideQuotedField && currentChar !== '\"') {\n        if (currentChar === delimiter) {\n          column++;\n          ensureDataExists();\n          continue;\n        } else if (isNewline(currentChar)) {\n          column = 0;\n          row++;\n          ensureDataExists();\n          if (currentChar === \"\\r\" && nextChar === \"\\n\") {\n            position++;\n          }\n          continue;\n        }\n      }\n      data[row][column] += currentChar;\n    }\n    return data;\n  }\n  // common code to paste operations, e.g. paste to cell, paste to range, and copy range down\n  doPasteOperation(pasteOperationFunc) {\n    const source = \"clipboard\";\n    this.eventService.dispatchEvent({\n      type: Events.EVENT_PASTE_START,\n      source\n    });\n    let changedPath;\n    if (this.clientSideRowModel) {\n      const onlyChangedColumns = this.gos.get(\"aggregateOnlyChangedColumns\");\n      changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n    }\n    const cellsToFlash = {};\n    const updatedRowNodes = [];\n    const focusedCell = this.focusService.getFocusedCell();\n    pasteOperationFunc(cellsToFlash, updatedRowNodes, focusedCell, changedPath);\n    const nodesToRefresh = [...updatedRowNodes];\n    if (changedPath) {\n      this.clientSideRowModel.doAggregate(changedPath);\n      changedPath.forEachChangedNodeDepthFirst((rowNode) => {\n        nodesToRefresh.push(rowNode);\n      });\n    }\n    this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });\n    this.dispatchFlashCells(cellsToFlash);\n    this.fireRowChanged(updatedRowNodes);\n    this.refocusLastFocusedCell();\n    const event = {\n      type: Events.EVENT_PASTE_END,\n      source\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  pasteIntoActiveRange(rangeService, clipboardData, cellsToFlash, updatedRowNodes, changedPath) {\n    const abortRepeatingPasteIntoRows = this.getRangeSize(rangeService) % clipboardData.length != 0;\n    let indexOffset = 0;\n    let dataRowIndex = 0;\n    const rowCallback = (currentRow, rowNode, columns, index) => {\n      const atEndOfClipboardData = index - indexOffset >= clipboardData.length;\n      if (atEndOfClipboardData) {\n        if (abortRepeatingPasteIntoRows) {\n          return;\n        }\n        indexOffset += dataRowIndex;\n        dataRowIndex = 0;\n      }\n      const currentRowData = clipboardData[index - indexOffset];\n      updatedRowNodes.push(rowNode);\n      const processCellFromClipboardFunc = this.gos.getCallback(\"processCellFromClipboard\");\n      columns.forEach((column, idx) => {\n        if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n          return;\n        }\n        if (idx >= currentRowData.length) {\n          idx = idx % currentRowData.length;\n        }\n        const newValue = this.processCell(\n          rowNode,\n          column,\n          currentRowData[idx],\n          EXPORT_TYPE_DRAG_COPY,\n          processCellFromClipboardFunc,\n          true\n        );\n        rowNode.setDataValue(column, newValue, SOURCE_PASTE);\n        if (changedPath) {\n          changedPath.addParentNode(rowNode.parent, [column]);\n        }\n        const { rowIndex, rowPinned } = currentRow;\n        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n        cellsToFlash[cellId] = true;\n      });\n      dataRowIndex++;\n    };\n    this.iterateActiveRanges(false, rowCallback);\n  }\n  getDisplayedColumnsStartingAt(column) {\n    let currentColumn = column;\n    const columns = [];\n    while (currentColumn != null) {\n      columns.push(currentColumn);\n      currentColumn = this.columnModel.getDisplayedColAfter(currentColumn);\n    }\n    return columns;\n  }\n  pasteStartingFromFocusedCell(parsedData, cellsToFlash, updatedRowNodes, focusedCell, changedPath) {\n    if (!focusedCell) {\n      return;\n    }\n    const currentRow = { rowIndex: focusedCell.rowIndex, rowPinned: focusedCell.rowPinned };\n    const columnsToPasteInto = this.getDisplayedColumnsStartingAt(focusedCell.column);\n    if (this.isPasteSingleValueIntoRange(parsedData)) {\n      this.pasteSingleValueIntoRange(parsedData, updatedRowNodes, cellsToFlash, changedPath);\n    } else {\n      this.pasteMultipleValues(\n        parsedData,\n        currentRow,\n        updatedRowNodes,\n        columnsToPasteInto,\n        cellsToFlash,\n        EXPORT_TYPE_CLIPBOARD,\n        changedPath\n      );\n    }\n  }\n  // if range is active, and only one cell, then we paste this cell into all cells in the active range.\n  isPasteSingleValueIntoRange(parsedData) {\n    return this.hasOnlyOneValueToPaste(parsedData) && this.rangeService != null && !this.rangeService.isEmpty();\n  }\n  pasteSingleValueIntoRange(parsedData, updatedRowNodes, cellsToFlash, changedPath) {\n    const value = parsedData[0][0];\n    const rowCallback = (currentRow, rowNode, columns) => {\n      updatedRowNodes.push(rowNode);\n      columns.forEach((column) => this.updateCellValue(rowNode, column, value, cellsToFlash, EXPORT_TYPE_CLIPBOARD, changedPath));\n    };\n    this.iterateActiveRanges(false, rowCallback);\n  }\n  hasOnlyOneValueToPaste(parsedData) {\n    return parsedData.length === 1 && parsedData[0].length === 1;\n  }\n  copyRangeDown() {\n    if (!this.rangeService || this.rangeService.isEmpty()) {\n      return;\n    }\n    const firstRowValues = [];\n    const pasteOperation = (cellsToFlash, updatedRowNodes, focusedCell, changedPath) => {\n      const processCellForClipboardFunc = this.gos.getCallback(\"processCellForClipboard\");\n      const processCellFromClipboardFunc = this.gos.getCallback(\"processCellFromClipboard\");\n      const rowCallback = (currentRow, rowNode, columns) => {\n        if (!firstRowValues.length) {\n          columns.forEach((column) => {\n            const value = this.processCell(\n              rowNode,\n              column,\n              this.valueService.getValue(column, rowNode),\n              EXPORT_TYPE_DRAG_COPY,\n              processCellForClipboardFunc,\n              false,\n              true\n            );\n            firstRowValues.push(value);\n          });\n        } else {\n          updatedRowNodes.push(rowNode);\n          columns.forEach((column, index) => {\n            if (!column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n              return;\n            }\n            const firstRowValue = this.processCell(\n              rowNode,\n              column,\n              firstRowValues[index],\n              EXPORT_TYPE_DRAG_COPY,\n              processCellFromClipboardFunc,\n              true\n            );\n            rowNode.setDataValue(column, firstRowValue, SOURCE_PASTE);\n            if (changedPath) {\n              changedPath.addParentNode(rowNode.parent, [column]);\n            }\n            const { rowIndex, rowPinned } = currentRow;\n            const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n            cellsToFlash[cellId] = true;\n          });\n        }\n      };\n      this.iterateActiveRanges(true, rowCallback);\n    };\n    this.doPasteOperation(pasteOperation);\n  }\n  removeLastLineIfBlank(parsedData) {\n    const lastLine = _.last(parsedData);\n    const lastLineIsBlank = lastLine && lastLine.length === 1 && lastLine[0] === \"\";\n    if (lastLineIsBlank) {\n      if (parsedData.length === 1) {\n        return;\n      }\n      _.removeFromArray(parsedData, lastLine);\n    }\n  }\n  fireRowChanged(rowNodes) {\n    if (this.gos.get(\"editType\") !== \"fullRow\") {\n      return;\n    }\n    rowNodes.forEach((rowNode) => {\n      const event = {\n        type: Events.EVENT_ROW_VALUE_CHANGED,\n        node: rowNode,\n        data: rowNode.data,\n        rowIndex: rowNode.rowIndex,\n        rowPinned: rowNode.rowPinned\n      };\n      this.eventService.dispatchEvent(event);\n    });\n  }\n  pasteMultipleValues(clipboardGridData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, type, changedPath) {\n    let rowPointer = currentRow;\n    const skipGroupRows = this.clientSideRowModel != null && !this.gos.get(\"enableGroupEdit\") && !this.gos.get(\"treeData\");\n    const getNextGoodRowNode = () => {\n      while (true) {\n        if (!rowPointer) {\n          return null;\n        }\n        const res = this.rowPositionUtils.getRowNode(rowPointer);\n        rowPointer = this.cellNavigationService.getRowBelow({ rowPinned: rowPointer.rowPinned, rowIndex: rowPointer.rowIndex });\n        if (res == null) {\n          return null;\n        }\n        const skipRow = res.detail || res.footer || skipGroupRows && res.group;\n        if (!skipRow) {\n          return res;\n        }\n      }\n    };\n    clipboardGridData.forEach((clipboardRowData) => {\n      const rowNode = getNextGoodRowNode();\n      if (!rowNode) {\n        return;\n      }\n      clipboardRowData.forEach((value, index) => this.updateCellValue(rowNode, columnsToPasteInto[index], value, cellsToFlash, type, changedPath));\n      updatedRowNodes.push(rowNode);\n    });\n  }\n  updateCellValue(rowNode, column, value, cellsToFlash, type, changedPath) {\n    if (!rowNode || !column || !column.isCellEditable(rowNode) || column.isSuppressPaste(rowNode)) {\n      return;\n    }\n    if (rowNode.group && column.isValueActive()) {\n      return;\n    }\n    const processedValue = this.processCell(rowNode, column, value, type, this.gos.getCallback(\"processCellFromClipboard\"), true);\n    rowNode.setDataValue(column, processedValue, SOURCE_PASTE);\n    const { rowIndex, rowPinned } = rowNode;\n    const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n    cellsToFlash[cellId] = true;\n    if (changedPath) {\n      changedPath.addParentNode(rowNode.parent, [column]);\n    }\n  }\n  copyToClipboard(params = {}) {\n    this.copyOrCutToClipboard(params);\n  }\n  cutToClipboard(params = {}, source = \"api\") {\n    if (this.gos.get(\"suppressCutToClipboard\")) {\n      return;\n    }\n    const startEvent = {\n      type: Events.EVENT_CUT_START,\n      source\n    };\n    this.eventService.dispatchEvent(startEvent);\n    this.copyOrCutToClipboard(params, true);\n    const endEvent = {\n      type: Events.EVENT_CUT_END,\n      source\n    };\n    this.eventService.dispatchEvent(endEvent);\n  }\n  copyOrCutToClipboard(params, cut) {\n    let { includeHeaders, includeGroupHeaders } = params;\n    this.logger.log(`copyToClipboard: includeHeaders = ${includeHeaders}`);\n    if (includeHeaders == null) {\n      includeHeaders = this.gos.get(\"copyHeadersToClipboard\");\n    }\n    if (includeGroupHeaders == null) {\n      includeGroupHeaders = this.gos.get(\"copyGroupHeadersToClipboard\");\n    }\n    const copyParams = { includeHeaders, includeGroupHeaders };\n    const shouldCopyRows = !this.gos.get(\"suppressCopyRowsToClipboard\");\n    let cellClearType = null;\n    if (this.rangeService && !this.rangeService.isEmpty() && !this.shouldSkipSingleCellRange(this.rangeService)) {\n      this.copySelectedRangeToClipboard(copyParams);\n      cellClearType = 0 /* CellRange */;\n    } else if (shouldCopyRows && !this.selectionService.isEmpty()) {\n      this.copySelectedRowsToClipboard(copyParams);\n      cellClearType = 1 /* SelectedRows */;\n    } else if (this.focusService.isAnyCellFocused()) {\n      this.copyFocusedCellToClipboard(copyParams);\n      cellClearType = 2 /* FocusedCell */;\n    }\n    if (cut && cellClearType !== null) {\n      this.clearCellsAfterCopy(cellClearType);\n    }\n  }\n  clearCellsAfterCopy(type) {\n    this.eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });\n    if (type === 0 /* CellRange */) {\n      this.rangeService.clearCellRangeCellValues({ cellEventSource: \"clipboardService\" });\n    } else if (type === 1 /* SelectedRows */) {\n      this.clearSelectedRows();\n    } else {\n      const focusedCell = this.focusService.getFocusedCell();\n      if (focusedCell == null) {\n        return;\n      }\n      const rowNode = this.rowPositionUtils.getRowNode(focusedCell);\n      if (rowNode) {\n        this.clearCellValue(rowNode, focusedCell.column);\n      }\n    }\n    this.eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });\n  }\n  clearSelectedRows() {\n    const selected = this.selectionService.getSelectedNodes();\n    const columns = this.columnModel.getAllDisplayedColumns();\n    for (const row of selected) {\n      for (const col of columns) {\n        this.clearCellValue(row, col);\n      }\n    }\n  }\n  clearCellValue(rowNode, column) {\n    var _a;\n    if (!column.isCellEditable(rowNode)) {\n      return;\n    }\n    const emptyValue = (_a = this.valueService.parseValue(column, rowNode, \"\", rowNode.getValueFromValueService(column))) != null ? _a : null;\n    rowNode.setDataValue(column, emptyValue, \"clipboardService\");\n  }\n  shouldSkipSingleCellRange(rangeService) {\n    return this.gos.get(\"suppressCopySingleCellRanges\") && !rangeService.isMoreThanOneCell();\n  }\n  iterateActiveRanges(onlyFirst, rowCallback, columnCallback) {\n    if (!this.rangeService || this.rangeService.isEmpty()) {\n      return;\n    }\n    const cellRanges = this.rangeService.getCellRanges();\n    if (onlyFirst) {\n      this.iterateActiveRange(cellRanges[0], rowCallback, columnCallback, true);\n    } else {\n      cellRanges.forEach((range, idx) => this.iterateActiveRange(range, rowCallback, columnCallback, idx === cellRanges.length - 1));\n    }\n  }\n  iterateActiveRange(range, rowCallback, columnCallback, isLastRange) {\n    if (!this.rangeService) {\n      return;\n    }\n    let currentRow = this.rangeService.getRangeStartRow(range);\n    const lastRow = this.rangeService.getRangeEndRow(range);\n    if (columnCallback && range.columns) {\n      columnCallback(range.columns);\n    }\n    let rangeIndex = 0;\n    let isLastRow = false;\n    while (!isLastRow && currentRow != null) {\n      const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n      isLastRow = this.rowPositionUtils.sameRow(currentRow, lastRow);\n      rowCallback(currentRow, rowNode, range.columns, rangeIndex++, isLastRow && isLastRange);\n      currentRow = this.cellNavigationService.getRowBelow(currentRow);\n    }\n  }\n  copySelectedRangeToClipboard(params = {}) {\n    if (!this.rangeService || this.rangeService.isEmpty()) {\n      return;\n    }\n    const allRangesMerge = this.rangeService.areAllRangesAbleToMerge();\n    const { data, cellsToFlash } = allRangesMerge ? this.buildDataFromMergedRanges(this.rangeService, params) : this.buildDataFromRanges(this.rangeService, params);\n    this.copyDataToClipboard(data);\n    this.dispatchFlashCells(cellsToFlash);\n  }\n  buildDataFromMergedRanges(rangeService, params) {\n    const columnsSet = /* @__PURE__ */ new Set();\n    const ranges = rangeService.getCellRanges();\n    const rowPositionsMap = /* @__PURE__ */ new Map();\n    const allRowPositions = [];\n    const allCellsToFlash = {};\n    ranges.forEach((range) => {\n      range.columns.forEach((col) => columnsSet.add(col));\n      const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(rangeService, range);\n      rowPositions.forEach((rowPosition) => {\n        const rowPositionAsString = `${rowPosition.rowIndex}-${rowPosition.rowPinned || \"null\"}`;\n        if (!rowPositionsMap.get(rowPositionAsString)) {\n          rowPositionsMap.set(rowPositionAsString, true);\n          allRowPositions.push(rowPosition);\n        }\n      });\n      Object.assign(allCellsToFlash, cellsToFlash);\n    });\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const exportedColumns = Array.from(columnsSet);\n    exportedColumns.sort((a, b) => {\n      const posA = allColumns.indexOf(a);\n      const posB = allColumns.indexOf(b);\n      return posA - posB;\n    });\n    const data = this.buildExportParams({\n      columns: exportedColumns,\n      rowPositions: allRowPositions,\n      includeHeaders: params.includeHeaders,\n      includeGroupHeaders: params.includeGroupHeaders\n    });\n    return { data, cellsToFlash: allCellsToFlash };\n  }\n  buildDataFromRanges(rangeService, params) {\n    const ranges = rangeService.getCellRanges();\n    const data = [];\n    const allCellsToFlash = {};\n    ranges.forEach((range) => {\n      const { rowPositions, cellsToFlash } = this.getRangeRowPositionsAndCellsToFlash(rangeService, range);\n      Object.assign(allCellsToFlash, cellsToFlash);\n      data.push(this.buildExportParams({\n        columns: range.columns,\n        rowPositions,\n        includeHeaders: params.includeHeaders,\n        includeGroupHeaders: params.includeGroupHeaders\n      }));\n    });\n    return { data: data.join(\"\\n\"), cellsToFlash: allCellsToFlash };\n  }\n  getRangeRowPositionsAndCellsToFlash(rangeService, range) {\n    const rowPositions = [];\n    const cellsToFlash = {};\n    const startRow = rangeService.getRangeStartRow(range);\n    const lastRow = rangeService.getRangeEndRow(range);\n    let node = startRow;\n    while (node) {\n      rowPositions.push(node);\n      range.columns.forEach((column) => {\n        const { rowIndex, rowPinned } = node;\n        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n        cellsToFlash[cellId] = true;\n      });\n      if (this.rowPositionUtils.sameRow(node, lastRow)) {\n        break;\n      }\n      node = this.cellNavigationService.getRowBelow(node);\n    }\n    return { rowPositions, cellsToFlash };\n  }\n  getCellsToFlashFromRowNodes(rowNodes) {\n    const allDisplayedColumns = this.columnModel.getAllDisplayedColumns();\n    const cellsToFlash = {};\n    for (let i = 0; i < rowNodes.length; i++) {\n      const { rowIndex, rowPinned } = rowNodes[i];\n      if (rowIndex == null) {\n        continue;\n      }\n      for (let j = 0; j < allDisplayedColumns.length; j++) {\n        const column = allDisplayedColumns[j];\n        const cellId = this.cellPositionUtils.createIdFromValues({ rowIndex, column, rowPinned });\n        cellsToFlash[cellId] = true;\n      }\n    }\n    return cellsToFlash;\n  }\n  copyFocusedCellToClipboard(params = {}) {\n    const focusedCell = this.focusService.getFocusedCell();\n    if (focusedCell == null) {\n      return;\n    }\n    const cellId = this.cellPositionUtils.createId(focusedCell);\n    const currentRow = { rowPinned: focusedCell.rowPinned, rowIndex: focusedCell.rowIndex };\n    const column = focusedCell.column;\n    const data = this.buildExportParams({\n      columns: [column],\n      rowPositions: [currentRow],\n      includeHeaders: params.includeHeaders,\n      includeGroupHeaders: params.includeGroupHeaders\n    });\n    this.copyDataToClipboard(data);\n    this.dispatchFlashCells({ [cellId]: true });\n  }\n  copySelectedRowsToClipboard(params = {}) {\n    const { columnKeys, includeHeaders, includeGroupHeaders } = params;\n    const data = this.buildExportParams({\n      columns: columnKeys,\n      includeHeaders,\n      includeGroupHeaders\n    });\n    this.copyDataToClipboard(data);\n    const rowNodes = this.selectionService.getSelectedNodes() || [];\n    this.dispatchFlashCells(this.getCellsToFlashFromRowNodes(rowNodes));\n  }\n  buildExportParams(params) {\n    const { columns, rowPositions, includeHeaders = false, includeGroupHeaders = false } = params;\n    const exportParams = {\n      columnKeys: columns,\n      rowPositions,\n      skipColumnHeaders: !includeHeaders,\n      skipColumnGroupHeaders: !includeGroupHeaders,\n      suppressQuotes: true,\n      columnSeparator: this.getClipboardDelimiter(),\n      onlySelected: !rowPositions,\n      processCellCallback: this.gos.getCallback(\"processCellForClipboard\"),\n      processRowGroupCallback: (params2) => this.processRowGroupCallback(params2),\n      processHeaderCallback: this.gos.getCallback(\"processHeaderForClipboard\"),\n      processGroupHeaderCallback: this.gos.getCallback(\"processGroupHeaderForClipboard\")\n    };\n    return this.csvCreator.getDataAsCsv(exportParams, true);\n  }\n  processRowGroupCallback(params) {\n    const { node, column } = params;\n    const isTreeData = this.gos.get(\"treeData\");\n    const isSuppressGroupMaintainValueType = this.gos.get(\"suppressGroupMaintainValueType\");\n    const getValueFromNode = () => {\n      var _a, _b;\n      if (isTreeData || isSuppressGroupMaintainValueType || !column) {\n        return node.key;\n      }\n      const value2 = (_a = node.groupData) == null ? void 0 : _a[column.getId()];\n      if (!value2 || !node.rowGroupColumn || node.rowGroupColumn.getColDef().useValueFormatterForExport === false) {\n        return value2;\n      }\n      return (_b = this.valueService.formatValue(node.rowGroupColumn, node, value2)) != null ? _b : value2;\n    };\n    let value = getValueFromNode();\n    if (params.node.footer) {\n      let suffix = \"\";\n      if (value && value.length) {\n        suffix = ` ${value}`;\n      }\n      value = `Total${suffix}`;\n    }\n    const processCellForClipboard = this.gos.getCallback(\"processCellForClipboard\");\n    if (processCellForClipboard) {\n      let column2 = node.rowGroupColumn;\n      if (!column2 && node.footer && node.level === -1) {\n        column2 = this.columnModel.getRowGroupColumns()[0];\n      }\n      return processCellForClipboard({\n        value,\n        node,\n        column: column2,\n        type: \"clipboard\",\n        formatValue: (valueToFormat) => {\n          var _a;\n          return (_a = this.valueService.formatValue(column2, node, valueToFormat)) != null ? _a : valueToFormat;\n        },\n        parseValue: (valueToParse) => this.valueService.parseValue(column2, node, valueToParse, this.valueService.getValue(column2, node))\n      });\n    }\n    return value;\n  }\n  dispatchFlashCells(cellsToFlash) {\n    window.setTimeout(() => {\n      const event = {\n        type: Events.EVENT_FLASH_CELLS,\n        cells: cellsToFlash\n      };\n      this.eventService.dispatchEvent(event);\n    }, 0);\n  }\n  processCell(rowNode, column, value, type, func, canParse, canFormat) {\n    var _a;\n    if (func) {\n      const params = {\n        column,\n        node: rowNode,\n        value,\n        type,\n        formatValue: (valueToFormat) => {\n          var _a2;\n          return (_a2 = this.valueService.formatValue(column, rowNode != null ? rowNode : null, valueToFormat)) != null ? _a2 : valueToFormat;\n        },\n        parseValue: (valueToParse) => this.valueService.parseValue(column, rowNode != null ? rowNode : null, valueToParse, this.valueService.getValue(column, rowNode))\n      };\n      return func(params);\n    }\n    if (canParse && column.getColDef().useValueParserForImport !== false) {\n      return this.valueService.parseValue(column, rowNode != null ? rowNode : null, value, this.valueService.getValue(column, rowNode));\n    }\n    if (canFormat && column.getColDef().useValueFormatterForExport !== false) {\n      return (_a = this.valueService.formatValue(column, rowNode != null ? rowNode : null, value)) != null ? _a : value;\n    }\n    return value;\n  }\n  copyDataToClipboard(data) {\n    const userProvidedFunc = this.gos.getCallback(\"sendToClipboard\");\n    if (userProvidedFunc) {\n      userProvidedFunc({ data });\n      return;\n    }\n    const allowNavigator = !this.gos.get(\"suppressClipboardApi\");\n    if (allowNavigator && navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch((e) => {\n        _.doOnce(() => {\n          console.warn(e);\n          console.warn(apiError(\"writeText\"));\n        }, \"clipboardApiError\");\n        this.copyDataToClipboardLegacy(data);\n      });\n      return;\n    }\n    this.copyDataToClipboardLegacy(data);\n  }\n  copyDataToClipboardLegacy(data) {\n    this.executeOnTempElement((element) => {\n      const eDocument = this.gos.getDocument();\n      const focusedElementBefore = this.gos.getActiveDomElement();\n      element.value = data || \" \";\n      element.select();\n      element.focus({ preventScroll: true });\n      const result = eDocument.execCommand(\"copy\");\n      if (!result) {\n        console.warn(\"AG Grid: Browser did not allow document.execCommand('copy'). Ensure api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise the browser will prevent it for security reasons.\");\n      }\n      if (focusedElementBefore != null && focusedElementBefore.focus != null) {\n        focusedElementBefore.focus({ preventScroll: true });\n      }\n    });\n  }\n  executeOnTempElement(callbackNow, callbackAfter) {\n    const eDoc = this.gos.getDocument();\n    const eTempInput = eDoc.createElement(\"textarea\");\n    eTempInput.style.width = \"1px\";\n    eTempInput.style.height = \"1px\";\n    eTempInput.style.top = eDoc.documentElement.scrollTop + \"px\";\n    eTempInput.style.left = eDoc.documentElement.scrollLeft + \"px\";\n    eTempInput.style.position = \"absolute\";\n    eTempInput.style.opacity = \"0\";\n    const guiRoot = this.gridCtrl.getGui();\n    guiRoot.appendChild(eTempInput);\n    try {\n      callbackNow(eTempInput);\n    } catch (err) {\n      console.warn(\"AG Grid: Browser does not support document.execCommand('copy') for clipboard operations\");\n    }\n    if (callbackAfter) {\n      window.setTimeout(() => {\n        callbackAfter(eTempInput);\n        guiRoot.removeChild(eTempInput);\n      }, 100);\n    } else {\n      guiRoot.removeChild(eTempInput);\n    }\n  }\n  getRangeSize(rangeService) {\n    const ranges = rangeService.getCellRanges();\n    let startRangeIndex = 0;\n    let endRangeIndex = 0;\n    if (ranges.length > 0) {\n      startRangeIndex = rangeService.getRangeStartRow(ranges[0]).rowIndex;\n      endRangeIndex = rangeService.getRangeEndRow(ranges[0]).rowIndex;\n    }\n    return startRangeIndex - endRangeIndex + 1;\n  }\n};\n__decorateClass([\n  Autowired(\"csvCreator\")\n], ClipboardService.prototype, \"csvCreator\", 2);\n__decorateClass([\n  Autowired(\"loggerFactory\")\n], ClipboardService.prototype, \"loggerFactory\", 2);\n__decorateClass([\n  Autowired(\"selectionService\")\n], ClipboardService.prototype, \"selectionService\", 2);\n__decorateClass([\n  Autowired(\"rowModel\")\n], ClipboardService.prototype, \"rowModel\", 2);\n__decorateClass([\n  Autowired(\"ctrlsService\")\n], ClipboardService.prototype, \"ctrlsService\", 2);\n__decorateClass([\n  Autowired(\"valueService\")\n], ClipboardService.prototype, \"valueService\", 2);\n__decorateClass([\n  Autowired(\"focusService\")\n], ClipboardService.prototype, \"focusService\", 2);\n__decorateClass([\n  Autowired(\"rowRenderer\")\n], ClipboardService.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  Autowired(\"columnModel\")\n], ClipboardService.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired(\"cellNavigationService\")\n], ClipboardService.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  Autowired(\"cellPositionUtils\")\n], ClipboardService.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  Autowired(\"rowPositionUtils\")\n], ClipboardService.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  Optional(\"rangeService\")\n], ClipboardService.prototype, \"rangeService\", 2);\n__decorateClass([\n  PostConstruct\n], ClipboardService.prototype, \"init\", 1);\nClipboardService = __decorateClass([\n  Bean(\"clipboardService\")\n], ClipboardService);\n\n// enterprise-modules/clipboard/src/version.ts\nvar VERSION = \"31.3.2\";\n\n// enterprise-modules/clipboard/src/clipboardModule.ts\nvar ClipboardModule = {\n  version: VERSION,\n  moduleName: ModuleNames.ClipboardModule,\n  beans: [ClipboardService],\n  dependantModules: [\n    EnterpriseCoreModule,\n    CsvExportModule\n  ]\n};\nexport {\n  ClipboardModule\n};\n"],
  "mappings": "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",
  "names": []
}
