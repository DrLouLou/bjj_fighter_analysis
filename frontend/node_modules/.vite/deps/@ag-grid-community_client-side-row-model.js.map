{
  "version": 3,
  "sources": ["../../@ag-grid-community/client-side-row-model/dist/package/main.esm.mjs"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nimport {\n  _ as _2,\n  Autowired,\n  Bean,\n  BeanStub,\n  ChangedPath,\n  Events as Events2,\n  Optional,\n  PostConstruct,\n  ClientSideRowModelSteps,\n  RowNode as RowNode2,\n  RowHighlightPosition\n} from \"@ag-grid-community/core\";\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideNodeManager.ts\nimport {\n  Events,\n  RowNode,\n  _\n} from \"@ag-grid-community/core\";\nvar _ClientSideNodeManager = class _ClientSideNodeManager {\n  constructor(rootNode, gos, eventService, columnModel, selectionService, beans) {\n    this.nextId = 0;\n    // has row data actually been set\n    this.rowCountReady = false;\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gos = gos;\n    this.eventService = eventService;\n    this.columnModel = columnModel;\n    this.beans = beans;\n    this.selectionService = selectionService;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = _ClientSideNodeManager.ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterAggFilter = [];\n    this.rootNode.childrenAfterFilter = [];\n  }\n  getCopyOfNodesMap() {\n    return _.cloneObject(this.allNodesMap);\n  }\n  getRowNode(id) {\n    return this.allNodesMap[id];\n  }\n  setRowData(rowData) {\n    if (typeof rowData === \"string\") {\n      console.warn(\"AG Grid: rowData must be an array.\");\n      return;\n    }\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowData);\n    const rootNode = this.rootNode;\n    const sibling = this.rootNode.sibling;\n    rootNode.childrenAfterFilter = null;\n    rootNode.childrenAfterGroup = null;\n    rootNode.childrenAfterAggFilter = null;\n    rootNode.childrenAfterSort = null;\n    rootNode.childrenMapped = null;\n    rootNode.updateHasChildren();\n    this.nextId = 0;\n    this.allNodesMap = {};\n    if (rowData) {\n      rootNode.allLeafChildren = rowData.map((dataItem) => this.createNode(dataItem, this.rootNode, _ClientSideNodeManager.TOP_LEVEL));\n    } else {\n      rootNode.allLeafChildren = [];\n      rootNode.childrenAfterGroup = [];\n    }\n    if (sibling) {\n      sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n      sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;\n      sibling.childrenAfterSort = rootNode.childrenAfterSort;\n      sibling.childrenMapped = rootNode.childrenMapped;\n      sibling.allLeafChildren = rootNode.allLeafChildren;\n    }\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);\n    const rowNodeTransaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const nodesToUnselect = [];\n    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeAdd(rowDataTran, rowNodeTransaction);\n    this.updateSelection(nodesToUnselect, \"rowDataChanged\");\n    if (rowNodeOrder) {\n      _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n    }\n    return rowNodeTransaction;\n  }\n  isRowCountReady() {\n    return this.rowCountReady;\n  }\n  dispatchRowDataUpdateStartedEvent(rowData) {\n    const event = {\n      type: Events.EVENT_ROW_DATA_UPDATE_STARTED,\n      firstRowData: (rowData == null ? void 0 : rowData.length) ? rowData[0] : null\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  updateSelection(nodesToUnselect, source) {\n    const selectionChanged = nodesToUnselect.length > 0;\n    if (selectionChanged) {\n      this.selectionService.setNodesSelected({\n        newValue: false,\n        nodes: nodesToUnselect,\n        suppressFinishActions: true,\n        source\n      });\n    }\n    this.selectionService.updateGroupsFromChildrenSelections(source);\n    if (selectionChanged) {\n      const event = {\n        type: Events.EVENT_SELECTION_CHANGED,\n        source\n      };\n      this.eventService.dispatchEvent(event);\n    }\n  }\n  executeAdd(rowDataTran, rowNodeTransaction) {\n    var _a;\n    const { add, addIndex } = rowDataTran;\n    if (_.missingOrEmpty(add)) {\n      return;\n    }\n    const newNodes = add.map((item) => this.createNode(item, this.rootNode, _ClientSideNodeManager.TOP_LEVEL));\n    if (typeof addIndex === \"number\" && addIndex >= 0) {\n      const { allLeafChildren } = this.rootNode;\n      const len = allLeafChildren.length;\n      let normalisedAddIndex = addIndex;\n      const isTreeData = this.gos.get(\"treeData\");\n      if (isTreeData && addIndex > 0 && len > 0) {\n        for (let i = 0; i < len; i++) {\n          if (((_a = allLeafChildren[i]) == null ? void 0 : _a.rowIndex) == addIndex - 1) {\n            normalisedAddIndex = i + 1;\n            break;\n          }\n        }\n      }\n      const nodesBeforeIndex = allLeafChildren.slice(0, normalisedAddIndex);\n      const nodesAfterIndex = allLeafChildren.slice(normalisedAddIndex, allLeafChildren.length);\n      this.rootNode.allLeafChildren = [...nodesBeforeIndex, ...newNodes, ...nodesAfterIndex];\n    } else {\n      this.rootNode.allLeafChildren = [...this.rootNode.allLeafChildren, ...newNodes];\n    }\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n    rowNodeTransaction.add = newNodes;\n  }\n  executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { remove } = rowDataTran;\n    if (_.missingOrEmpty(remove)) {\n      return;\n    }\n    const rowIdsRemoved = {};\n    remove.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      rowNode.clearRowTopAndRowIndex();\n      rowIdsRemoved[rowNode.id] = true;\n      delete this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter((rowNode) => !rowIdsRemoved[rowNode.id]);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n  }\n  executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { update } = rowDataTran;\n    if (_.missingOrEmpty(update)) {\n      return;\n    }\n    update.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      rowNode.updateData(item);\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      this.setMasterForRow(rowNode, item, _ClientSideNodeManager.TOP_LEVEL, false);\n      rowNodeTransaction.update.push(rowNode);\n    });\n  }\n  lookupRowNode(data) {\n    const getRowIdFunc = this.gos.getCallback(\"getRowId\");\n    let rowNode;\n    if (getRowIdFunc) {\n      const id = getRowIdFunc({ data, level: 0 });\n      rowNode = this.allNodesMap[id];\n      if (!rowNode) {\n        console.error(`AG Grid: could not find row id=${id}, data item was not found for this id`);\n        return null;\n      }\n    } else {\n      rowNode = this.rootNode.allLeafChildren.find((node) => node.data === data);\n      if (!rowNode) {\n        console.error(`AG Grid: could not find data item as object was not found`, data);\n        console.error(`Consider using getRowId to help the Grid find matching row data`);\n        return null;\n      }\n    }\n    return rowNode || null;\n  }\n  createNode(dataItem, parent, level) {\n    const node = new RowNode(this.beans);\n    node.group = false;\n    this.setMasterForRow(node, dataItem, level, true);\n    const suppressParentsInRowNodes = this.gos.get(\"suppressParentsInRowNodes\");\n    if (parent && !suppressParentsInRowNodes) {\n      node.parent = parent;\n    }\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n    if (this.allNodesMap[node.id]) {\n      console.warn(`AG Grid: duplicate node id '${node.id}' detected from getRowId callback, this could cause issues in your grid.`);\n    }\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  }\n  setMasterForRow(rowNode, data, level, setExpanded) {\n    const isTreeData = this.gos.get(\"treeData\");\n    if (isTreeData) {\n      rowNode.setMaster(false);\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      const masterDetail = this.gos.get(\"masterDetail\");\n      if (masterDetail) {\n        const isRowMasterFunc = this.gos.get(\"isRowMaster\");\n        if (isRowMasterFunc) {\n          rowNode.setMaster(isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n      if (setExpanded) {\n        const rowGroupColumns = this.columnModel.getRowGroupColumns();\n        const numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n        const masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  }\n  isExpanded(level) {\n    const expandByDefault = this.gos.get(\"groupDefaultExpanded\");\n    if (expandByDefault === -1) {\n      return true;\n    }\n    return level < expandByDefault;\n  }\n};\n_ClientSideNodeManager.TOP_LEVEL = 0;\n_ClientSideNodeManager.ROOT_NODE_ID = \"ROOT_NODE_ID\";\nvar ClientSideNodeManager = _ClientSideNodeManager;\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nvar ClientSideRowModel = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.onRowHeightChanged_debounced = _2.debounce(this.onRowHeightChanged.bind(this), 100);\n    this.rowsToDisplay = [];\n    /** Has the start method been called */\n    this.hasStarted = false;\n    /** E.g. data has been set into the node manager already */\n    this.shouldSkipSettingDataOnStart = false;\n    /**\n     * This is to prevent refresh model being called when it's already being called.\n     * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,\n     * which then triggers the listener here that calls refresh model again but at the filter stage\n     * (which is about to be run by the original call).\n     */\n    this.isRefreshingModel = false;\n    this.rowCountReady = false;\n  }\n  init() {\n    const refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n      step: ClientSideRowModelSteps.EVERYTHING,\n      // after cols change, row grouping (the first stage) could of changed\n      afterColumnsChanged: true,\n      keepRenderedRows: true,\n      // we want animations cos sorting or filtering could be applied\n      animate\n    });\n    this.addManagedListener(this.eventService, Events2.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }));\n    this.addManagedListener(this.eventService, Events2.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n    this.addManagedListener(this.eventService, Events2.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanges.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_GRID_READY, () => this.onGridReady());\n    this.addPropertyListeners();\n    this.rootNode = new RowNode2(this.beans);\n    this.nodeManager = new ClientSideNodeManager(\n      this.rootNode,\n      this.gos,\n      this.eventService,\n      this.columnModel,\n      this.selectionService,\n      this.beans\n    );\n  }\n  addPropertyListeners() {\n    const resetProps = /* @__PURE__ */ new Set([\n      \"treeData\",\n      \"masterDetail\"\n    ]);\n    const groupStageRefreshProps = /* @__PURE__ */ new Set([\n      \"suppressParentsInRowNodes\",\n      \"groupDefaultExpanded\",\n      \"groupAllowUnbalanced\",\n      \"initialGroupOrderComparator\",\n      \"groupHideOpenParents\",\n      \"groupDisplayType\"\n    ]);\n    const filterStageRefreshProps = /* @__PURE__ */ new Set([\n      \"excludeChildrenWhenTreeDataFiltering\"\n    ]);\n    const pivotStageRefreshProps = /* @__PURE__ */ new Set([\n      \"removePivotHeaderRowWhenSingleValueColumn\",\n      \"pivotRowTotals\",\n      \"pivotColumnGroupTotals\",\n      \"suppressExpandablePivotGroups\"\n    ]);\n    const aggregateStageRefreshProps = /* @__PURE__ */ new Set([\n      \"getGroupRowAgg\",\n      \"alwaysAggregateAtRootLevel\",\n      \"groupIncludeTotalFooter\",\n      \"suppressAggFilteredOnly\",\n      \"grandTotalRow\"\n    ]);\n    const sortStageRefreshProps = /* @__PURE__ */ new Set([\n      \"postSortRows\",\n      \"groupDisplayType\",\n      \"accentedSort\"\n    ]);\n    const filterAggStageRefreshProps = /* @__PURE__ */ new Set([]);\n    const flattenStageRefreshProps = /* @__PURE__ */ new Set([\n      \"groupRemoveSingleChildren\",\n      \"groupRemoveLowestSingleChildren\",\n      \"groupIncludeFooter\",\n      \"groupTotalRow\"\n    ]);\n    const allProps = [\n      ...resetProps,\n      ...groupStageRefreshProps,\n      ...filterStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...aggregateStageRefreshProps,\n      ...sortStageRefreshProps,\n      ...filterAggStageRefreshProps,\n      ...flattenStageRefreshProps\n    ];\n    this.addManagedPropertyListeners(allProps, (params) => {\n      var _a;\n      const properties = (_a = params.changeSet) == null ? void 0 : _a.properties;\n      if (!properties) {\n        return;\n      }\n      ;\n      const arePropertiesImpacted = (propSet) => properties.some((prop) => propSet.has(prop));\n      if (arePropertiesImpacted(resetProps)) {\n        this.setRowData(this.rootNode.allLeafChildren.map((child) => child.data));\n        return;\n      }\n      if (arePropertiesImpacted(groupStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.EVERYTHING });\n        return;\n      }\n      if (arePropertiesImpacted(filterStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER });\n        return;\n      }\n      if (arePropertiesImpacted(pivotStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n        return;\n      }\n      if (arePropertiesImpacted(aggregateStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n        return;\n      }\n      if (arePropertiesImpacted(sortStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.SORT });\n        return;\n      }\n      if (arePropertiesImpacted(filterAggStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER_AGGREGATES });\n        return;\n      }\n      if (arePropertiesImpacted(flattenStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n      }\n    });\n    this.addManagedPropertyListener(\"rowHeight\", () => this.resetRowHeights());\n  }\n  start() {\n    this.hasStarted = true;\n    if (this.shouldSkipSettingDataOnStart) {\n      this.dispatchUpdateEventsAndRefresh();\n    } else {\n      this.setInitialData();\n    }\n  }\n  setInitialData() {\n    const rowData = this.gos.get(\"rowData\");\n    if (rowData) {\n      this.shouldSkipSettingDataOnStart = true;\n      this.setRowData(rowData);\n    }\n  }\n  ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    let atLeastOneChange;\n    let res = false;\n    do {\n      atLeastOneChange = false;\n      const rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n      const rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n      const firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n      const lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n      for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n        const rowNode = this.getRow(rowIndex);\n        if (rowNode.rowHeightEstimated) {\n          const rowHeight = this.gos.getRowHeightForNode(rowNode);\n          rowNode.setRowHeight(rowHeight.height);\n          atLeastOneChange = true;\n          res = true;\n        }\n      }\n      if (atLeastOneChange) {\n        this.setRowTopAndRowIndex();\n      }\n    } while (atLeastOneChange);\n    return res;\n  }\n  setRowTopAndRowIndex() {\n    const defaultRowHeight = this.environment.getDefaultRowHeight();\n    let nextRowTop = 0;\n    const displayedRowsMapped = /* @__PURE__ */ new Set();\n    const allowEstimate = this.gos.isDomLayout(\"normal\");\n    for (let i = 0; i < this.rowsToDisplay.length; i++) {\n      const rowNode = this.rowsToDisplay[i];\n      if (rowNode.id != null) {\n        displayedRowsMapped.add(rowNode.id);\n      }\n      if (rowNode.rowHeight == null) {\n        const rowHeight = this.gos.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);\n        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n      }\n      rowNode.setRowTop(nextRowTop);\n      rowNode.setRowIndex(i);\n      nextRowTop += rowNode.rowHeight;\n    }\n    return displayedRowsMapped;\n  }\n  clearRowTopAndRowIndex(changedPath, displayedRowsMapped) {\n    const changedPathActive = changedPath.isActive();\n    const clearIfNotDisplayed = (rowNode) => {\n      if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\n        rowNode.clearRowTopAndRowIndex();\n      }\n    };\n    const recurse = (rowNode) => {\n      clearIfNotDisplayed(rowNode);\n      clearIfNotDisplayed(rowNode.detailNode);\n      clearIfNotDisplayed(rowNode.sibling);\n      if (rowNode.hasChildren()) {\n        if (rowNode.childrenAfterGroup) {\n          const isRootNode = rowNode.level == -1;\n          const skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\n          if (!skipChildren) {\n            rowNode.childrenAfterGroup.forEach(recurse);\n          }\n        }\n      }\n    };\n    recurse(this.rootNode);\n  }\n  // returns false if row was moved, otherwise true\n  ensureRowsAtPixel(rowNodes, pixel, increment = 0) {\n    const indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n    const rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    if (rowNodeAtPixelNow === rowNodes[0]) {\n      return false;\n    }\n    rowNodes.forEach((rowNode) => {\n      _2.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n    });\n    rowNodes.forEach((rowNode, idx) => {\n      _2.insertIntoArray(this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n    });\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n    return true;\n  }\n  highlightRowAtPixel(rowNode, pixel) {\n    const indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n    const rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n    if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n      if (this.lastHighlightedRow) {\n        this.lastHighlightedRow.setHighlighted(null);\n        this.lastHighlightedRow = null;\n      }\n      return;\n    }\n    const highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n    if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n      this.lastHighlightedRow.setHighlighted(null);\n      this.lastHighlightedRow = null;\n    }\n    rowNodeAtPixelNow.setHighlighted(highlight);\n    this.lastHighlightedRow = rowNodeAtPixelNow;\n  }\n  getHighlightPosition(pixel, rowNode) {\n    if (!rowNode) {\n      const index = this.getRowIndexAtPixel(pixel);\n      rowNode = this.getRow(index || 0);\n      if (!rowNode) {\n        return RowHighlightPosition.Below;\n      }\n    }\n    const { rowTop, rowHeight } = rowNode;\n    return pixel - rowTop < rowHeight / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;\n  }\n  getLastHighlightedRowNode() {\n    return this.lastHighlightedRow;\n  }\n  isLastRowIndexKnown() {\n    return true;\n  }\n  getRowCount() {\n    if (this.rowsToDisplay) {\n      return this.rowsToDisplay.length;\n    }\n    return 0;\n  }\n  getTopLevelRowCount() {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return 1;\n    }\n    const filteredChildren = this.rootNode.childrenAfterAggFilter;\n    return filteredChildren ? filteredChildren.length : 0;\n  }\n  getTopLevelRowDisplayedIndex(topLevelIndex) {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return topLevelIndex;\n    }\n    let rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n    if (this.gos.get(\"groupHideOpenParents\")) {\n      while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n        rowNode = rowNode.childrenAfterSort[0];\n      }\n    }\n    return rowNode.rowIndex;\n  }\n  getRowBounds(index) {\n    if (_2.missing(this.rowsToDisplay)) {\n      return null;\n    }\n    const rowNode = this.rowsToDisplay[index];\n    if (rowNode) {\n      return {\n        rowTop: rowNode.rowTop,\n        rowHeight: rowNode.rowHeight\n      };\n    }\n    return null;\n  }\n  onRowGroupOpened() {\n    const animate = this.gos.isAnimateRows();\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });\n  }\n  onFilterChanged(event) {\n    if (event.afterDataChange) {\n      return;\n    }\n    const animate = this.gos.isAnimateRows();\n    const primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some((col) => col.isPrimary());\n    const step = primaryOrQuickFilterChanged ? ClientSideRowModelSteps.FILTER : ClientSideRowModelSteps.FILTER_AGGREGATES;\n    this.refreshModel({ step, keepRenderedRows: true, animate });\n  }\n  onSortChanged() {\n    const animate = this.gos.isAnimateRows();\n    this.refreshModel({ step: ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate, keepEditingRows: true });\n  }\n  getType() {\n    return \"clientSide\";\n  }\n  onValueChanged() {\n    if (this.columnModel.isPivotActive()) {\n      this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n    } else {\n      this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n    }\n  }\n  createChangePath(rowNodeTransactions) {\n    const noTransactions = _2.missingOrEmpty(rowNodeTransactions);\n    const changedPath = new ChangedPath(false, this.rootNode);\n    if (noTransactions || this.gos.get(\"treeData\")) {\n      changedPath.setInactive();\n    }\n    return changedPath;\n  }\n  isSuppressModelUpdateAfterUpdateTransaction(params) {\n    if (!this.gos.get(\"suppressModelUpdateAfterUpdateTransaction\")) {\n      return false;\n    }\n    if (params.rowNodeTransactions == null) {\n      return false;\n    }\n    const transWithAddsOrDeletes = params.rowNodeTransactions.filter(\n      (tx) => tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0\n    );\n    const transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n    return transactionsContainUpdatesOnly;\n  }\n  buildRefreshModelParams(step) {\n    let paramsStep = ClientSideRowModelSteps.EVERYTHING;\n    const stepsMapped = {\n      everything: ClientSideRowModelSteps.EVERYTHING,\n      group: ClientSideRowModelSteps.EVERYTHING,\n      filter: ClientSideRowModelSteps.FILTER,\n      map: ClientSideRowModelSteps.MAP,\n      aggregate: ClientSideRowModelSteps.AGGREGATE,\n      sort: ClientSideRowModelSteps.SORT,\n      pivot: ClientSideRowModelSteps.PIVOT\n    };\n    if (_2.exists(step)) {\n      paramsStep = stepsMapped[step];\n    }\n    if (_2.missing(paramsStep)) {\n      console.error(`AG Grid: invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(\", \")}`);\n      return void 0;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    };\n    return modelParams;\n  }\n  refreshModel(paramsOrStep) {\n    if (!this.hasStarted || this.isRefreshingModel || this.columnModel.shouldRowModelIgnoreRefresh()) {\n      return;\n    }\n    let params = typeof paramsOrStep === \"object\" && \"step\" in paramsOrStep ? paramsOrStep : this.buildRefreshModelParams(paramsOrStep);\n    if (!params) {\n      return;\n    }\n    if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n      return;\n    }\n    const changedPath = this.createChangePath(params.rowNodeTransactions);\n    this.isRefreshingModel = true;\n    switch (params.step) {\n      case ClientSideRowModelSteps.EVERYTHING:\n        this.doRowGrouping(\n          params.rowNodeTransactions,\n          params.rowNodeOrder,\n          changedPath,\n          !!params.afterColumnsChanged\n        );\n      case ClientSideRowModelSteps.FILTER:\n        this.doFilter(changedPath);\n      case ClientSideRowModelSteps.PIVOT:\n        this.doPivot(changedPath);\n      case ClientSideRowModelSteps.AGGREGATE:\n        this.doAggregate(changedPath);\n      case ClientSideRowModelSteps.FILTER_AGGREGATES:\n        this.doFilterAggregates(changedPath);\n      case ClientSideRowModelSteps.SORT:\n        this.doSort(params.rowNodeTransactions, changedPath);\n      case ClientSideRowModelSteps.MAP:\n        this.doRowsToDisplay();\n    }\n    const displayedNodesMapped = this.setRowTopAndRowIndex();\n    this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\n    this.isRefreshingModel = false;\n    const event = {\n      type: Events2.EVENT_MODEL_UPDATED,\n      animate: params.animate,\n      keepRenderedRows: params.keepRenderedRows,\n      newData: params.newData,\n      newPage: false,\n      keepUndoRedoStack: params.keepUndoRedoStack\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  isEmpty() {\n    const rowsMissing = _2.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n    return _2.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();\n  }\n  isRowsToRender() {\n    return _2.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n  }\n  getNodesInRangeForSelection(firstInRange, lastInRange) {\n    let started = !lastInRange;\n    let finished = false;\n    const result = [];\n    const groupsSelectChildren = this.gos.get(\"groupSelectsChildren\");\n    this.forEachNodeAfterFilterAndSort((rowNode) => {\n      if (finished) {\n        return;\n      }\n      if (started) {\n        if (rowNode === lastInRange || rowNode === firstInRange) {\n          finished = true;\n          if (rowNode.group && groupsSelectChildren) {\n            result.push(...rowNode.allLeafChildren);\n            return;\n          }\n        }\n      }\n      if (!started) {\n        if (rowNode !== lastInRange && rowNode !== firstInRange) {\n          return;\n        }\n        started = true;\n      }\n      const includeThisNode = !rowNode.group || !groupsSelectChildren;\n      if (includeThisNode) {\n        result.push(rowNode);\n        return;\n      }\n    });\n    return result;\n  }\n  setDatasource(datasource) {\n    console.error(\"AG Grid: should never call setDatasource on clientSideRowController\");\n  }\n  getTopLevelNodes() {\n    return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n  }\n  getRootNode() {\n    return this.rootNode;\n  }\n  getRow(index) {\n    return this.rowsToDisplay[index];\n  }\n  isRowPresent(rowNode) {\n    return this.rowsToDisplay.indexOf(rowNode) >= 0;\n  }\n  getRowIndexAtPixel(pixelToMatch) {\n    if (this.isEmpty() || this.rowsToDisplay.length === 0) {\n      return -1;\n    }\n    let bottomPointer = 0;\n    let topPointer = this.rowsToDisplay.length - 1;\n    if (pixelToMatch <= 0) {\n      return 0;\n    }\n    const lastNode = _2.last(this.rowsToDisplay);\n    if (lastNode.rowTop <= pixelToMatch) {\n      return this.rowsToDisplay.length - 1;\n    }\n    let oldBottomPointer = -1;\n    let oldTopPointer = -1;\n    while (true) {\n      const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n      const currentRowNode = this.rowsToDisplay[midPointer];\n      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n        return midPointer;\n      }\n      if (currentRowNode.rowTop < pixelToMatch) {\n        bottomPointer = midPointer + 1;\n      } else if (currentRowNode.rowTop > pixelToMatch) {\n        topPointer = midPointer - 1;\n      }\n      const caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;\n      if (caughtInInfiniteLoop) {\n        return midPointer;\n      }\n      oldBottomPointer = bottomPointer;\n      oldTopPointer = topPointer;\n    }\n  }\n  isRowInPixel(rowNode, pixelToMatch) {\n    const topPixel = rowNode.rowTop;\n    const bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n    const pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n    return pixelInRow;\n  }\n  forEachLeafNode(callback) {\n    if (this.rootNode.allLeafChildren) {\n      this.rootNode.allLeafChildren.forEach((rowNode, index) => callback(rowNode, index));\n    }\n  }\n  forEachNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterGroup || []],\n      callback,\n      recursionType: 0 /* Normal */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilter(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterAggFilter || []],\n      callback,\n      recursionType: 1 /* AfterFilter */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilterAndSort(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterSort || []],\n      callback,\n      recursionType: 2 /* AfterFilterAndSort */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachPivotNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [this.rootNode],\n      callback,\n      recursionType: 3 /* PivotNodes */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  // iterates through each item in memory, and calls the callback function\n  // nodes - the rowNodes to traverse\n  // callback - the user provided callback\n  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n  // index - works similar to the index in forEach in javascript's array function\n  recursivelyWalkNodesAndCallback(params) {\n    const { nodes, callback, recursionType, includeFooterNodes } = params;\n    let { index } = params;\n    const addFooters = (position) => {\n      var _a;\n      const parentNode = (_a = nodes[0]) == null ? void 0 : _a.parent;\n      if (!parentNode)\n        return;\n      const grandTotal = includeFooterNodes && this.gos.getGrandTotalRow();\n      const isGroupIncludeFooter = this.gos.getGroupTotalRowCallback();\n      const groupTotal = includeFooterNodes && isGroupIncludeFooter({ node: parentNode });\n      const isRootNode = parentNode === this.rootNode;\n      if (isRootNode) {\n        if (grandTotal === position) {\n          parentNode.createFooter();\n          callback(parentNode.sibling, index++);\n        }\n        return;\n      }\n      if (groupTotal === position) {\n        parentNode.createFooter();\n        callback(parentNode.sibling, index++);\n      }\n    };\n    addFooters(\"top\");\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      callback(node, index++);\n      if (node.hasChildren() && !node.footer) {\n        let nodeChildren = null;\n        switch (recursionType) {\n          case 0 /* Normal */:\n            nodeChildren = node.childrenAfterGroup;\n            break;\n          case 1 /* AfterFilter */:\n            nodeChildren = node.childrenAfterAggFilter;\n            break;\n          case 2 /* AfterFilterAndSort */:\n            nodeChildren = node.childrenAfterSort;\n            break;\n          case 3 /* PivotNodes */:\n            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n            break;\n        }\n        if (nodeChildren) {\n          index = this.recursivelyWalkNodesAndCallback({\n            nodes: [...nodeChildren],\n            callback,\n            recursionType,\n            index,\n            includeFooterNodes\n          });\n        }\n      }\n    }\n    addFooters(\"bottom\");\n    return index;\n  }\n  // it's possible to recompute the aggregate without doing the other parts\n  // + api.refreshClientSideRowModel('aggregate')\n  doAggregate(changedPath) {\n    var _a;\n    (_a = this.aggregationStage) == null ? void 0 : _a.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doFilterAggregates(changedPath) {\n    if (this.filterAggregatesStage) {\n      this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });\n    } else {\n      this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;\n    }\n  }\n  // + gridApi.expandAll()\n  // + gridApi.collapseAll()\n  expandOrCollapseAll(expand) {\n    const usingTreeData = this.gos.get(\"treeData\");\n    const usingPivotMode = this.columnModel.isPivotActive();\n    const recursiveExpandOrCollapse = (rowNodes) => {\n      if (!rowNodes) {\n        return;\n      }\n      rowNodes.forEach((rowNode) => {\n        const actionRow = () => {\n          rowNode.expanded = expand;\n          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n        };\n        if (usingTreeData) {\n          const hasChildren = _2.exists(rowNode.childrenAfterGroup);\n          if (hasChildren) {\n            actionRow();\n          }\n          return;\n        }\n        if (usingPivotMode) {\n          const notLeafGroup = !rowNode.leafGroup;\n          if (notLeafGroup) {\n            actionRow();\n          }\n          return;\n        }\n        const isRowGroup = rowNode.group;\n        if (isRowGroup) {\n          actionRow();\n        }\n      });\n    };\n    if (this.rootNode) {\n      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n    }\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n    const eventSource = expand ? \"expandAll\" : \"collapseAll\";\n    const event = {\n      type: Events2.EVENT_EXPAND_COLLAPSE_ALL,\n      source: eventSource\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  doSort(rowNodeTransactions, changedPath) {\n    this.sortStage.execute({\n      rowNode: this.rootNode,\n      rowNodeTransactions,\n      changedPath\n    });\n  }\n  doRowGrouping(rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n    if (this.groupStage) {\n      if (rowNodeTransactions) {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          rowNodeTransactions,\n          rowNodeOrder,\n          changedPath\n        });\n      } else {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          changedPath,\n          afterColumnsChanged\n        });\n      }\n      if (this.gos.get(\"groupSelectsChildren\")) {\n        const selectionChanged = this.selectionService.updateGroupsFromChildrenSelections(\"rowGroupChanged\", changedPath);\n        if (selectionChanged) {\n          const event = {\n            type: Events2.EVENT_SELECTION_CHANGED,\n            source: \"rowGroupChanged\"\n          };\n          this.eventService.dispatchEvent(event);\n        }\n      }\n    } else {\n      this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n      if (this.rootNode.sibling) {\n        this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;\n      }\n      this.rootNode.updateHasChildren();\n    }\n    if (this.nodeManager.isRowCountReady()) {\n      this.rowCountReady = true;\n      this.eventService.dispatchEventOnce({\n        type: Events2.EVENT_ROW_COUNT_READY\n      });\n    }\n  }\n  doFilter(changedPath) {\n    this.filterStage.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doPivot(changedPath) {\n    var _a;\n    (_a = this.pivotStage) == null ? void 0 : _a.execute({ rowNode: this.rootNode, changedPath });\n  }\n  getCopyOfNodesMap() {\n    return this.nodeManager.getCopyOfNodesMap();\n  }\n  getRowNode(id) {\n    const idIsGroup = typeof id == \"string\" && id.indexOf(RowNode2.ID_PREFIX_ROW_GROUP) == 0;\n    if (idIsGroup) {\n      let res = void 0;\n      this.forEachNode((node) => {\n        if (node.id === id) {\n          res = node;\n        }\n      });\n      return res;\n    }\n    return this.nodeManager.getRowNode(id);\n  }\n  // rows: the rows to put into the model\n  setRowData(rowData) {\n    this.selectionService.reset(\"rowDataChanged\");\n    this.nodeManager.setRowData(rowData);\n    if (this.hasStarted) {\n      this.dispatchUpdateEventsAndRefresh();\n    }\n  }\n  dispatchUpdateEventsAndRefresh() {\n    const rowDataUpdatedEvent = {\n      type: Events2.EVENT_ROW_DATA_UPDATED\n    };\n    this.eventService.dispatchEvent(rowDataUpdatedEvent);\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      newData: true\n    });\n  }\n  batchUpdateRowData(rowDataTransaction, callback) {\n    if (this.applyAsyncTransactionsTimeout == null) {\n      this.rowDataTransactionBatch = [];\n      const waitMillis = this.gos.getAsyncTransactionWaitMillis();\n      this.applyAsyncTransactionsTimeout = window.setTimeout(() => {\n        this.executeBatchUpdateRowData();\n      }, waitMillis);\n    }\n    this.rowDataTransactionBatch.push({ rowDataTransaction, callback });\n  }\n  flushAsyncTransactions() {\n    if (this.applyAsyncTransactionsTimeout != null) {\n      clearTimeout(this.applyAsyncTransactionsTimeout);\n      this.executeBatchUpdateRowData();\n    }\n  }\n  executeBatchUpdateRowData() {\n    this.valueCache.onDataChanged();\n    const callbackFuncsBound = [];\n    const rowNodeTrans = [];\n    let forceRowNodeOrder = false;\n    if (this.rowDataTransactionBatch) {\n      this.rowDataTransactionBatch.forEach((tranItem) => {\n        const rowNodeTran = this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);\n        rowNodeTrans.push(rowNodeTran);\n        if (tranItem.callback) {\n          callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n        }\n        if (typeof tranItem.rowDataTransaction.addIndex === \"number\") {\n          forceRowNodeOrder = true;\n        }\n      });\n    }\n    this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);\n    if (callbackFuncsBound.length > 0) {\n      window.setTimeout(() => {\n        callbackFuncsBound.forEach((func) => func());\n      }, 0);\n    }\n    if (rowNodeTrans.length > 0) {\n      const event = {\n        type: Events2.EVENT_ASYNC_TRANSACTIONS_FLUSHED,\n        results: rowNodeTrans\n      };\n      this.eventService.dispatchEvent(event);\n    }\n    this.rowDataTransactionBatch = null;\n    this.applyAsyncTransactionsTimeout = void 0;\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.valueCache.onDataChanged();\n    const rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n    const forceRowNodeOrder = typeof rowDataTran.addIndex === \"number\";\n    this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);\n    return rowNodeTran;\n  }\n  createRowNodeOrder() {\n    const suppressSortOrder = this.gos.get(\"suppressMaintainUnsortedOrder\");\n    if (suppressSortOrder) {\n      return;\n    }\n    const orderMap = {};\n    if (this.rootNode && this.rootNode.allLeafChildren) {\n      for (let index = 0; index < this.rootNode.allLeafChildren.length; index++) {\n        const node = this.rootNode.allLeafChildren[index];\n        orderMap[node.id] = index;\n      }\n    }\n    return orderMap;\n  }\n  // common to updateRowData and batchUpdateRowData\n  commonUpdateRowData(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {\n    if (!this.hasStarted) {\n      return;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    if (forceRowNodeOrder) {\n      rowNodeOrder = this.createRowNodeOrder();\n    }\n    const event = {\n      type: Events2.EVENT_ROW_DATA_UPDATED\n    };\n    this.eventService.dispatchEvent(event);\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      rowNodeTransactions: rowNodeTrans,\n      rowNodeOrder,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n  }\n  doRowsToDisplay() {\n    this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n  }\n  onRowHeightChanged() {\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true, keepUndoRedoStack: true });\n  }\n  /** This method is debounced. It is used for row auto-height. If we don't debounce,\n   * then the Row Models will end up recalculating each row position\n   * for each row height change and result in the Row Renderer laying out rows.\n   * This is particularly bad if using print layout, and showing eg 1,000 rows,\n   * each row will change it's height, causing Row Model to update 1,000 times.\n   */\n  onRowHeightChangedDebounced() {\n    this.onRowHeightChanged_debounced();\n  }\n  resetRowHeights() {\n    const atLeastOne = this.resetRowHeightsForAllRowNodes();\n    this.rootNode.setRowHeight(this.rootNode.rowHeight, true);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);\n    }\n    if (atLeastOne) {\n      this.onRowHeightChanged();\n    }\n  }\n  resetRowHeightsForAllRowNodes() {\n    let atLeastOne = false;\n    this.forEachNode((rowNode) => {\n      rowNode.setRowHeight(rowNode.rowHeight, true);\n      const detailNode = rowNode.detailNode;\n      if (detailNode) {\n        detailNode.setRowHeight(detailNode.rowHeight, true);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);\n      }\n      atLeastOne = true;\n    });\n    return atLeastOne;\n  }\n  onGridStylesChanges() {\n    if (this.columnModel.isAutoRowHeightActive()) {\n      return;\n    }\n    this.resetRowHeights();\n  }\n  onGridReady() {\n    if (this.hasStarted) {\n      return;\n    }\n    this.setInitialData();\n  }\n  isRowDataLoaded() {\n    return this.rowCountReady;\n  }\n};\n__decorateClass([\n  Autowired(\"columnModel\")\n], ClientSideRowModel.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired(\"selectionService\")\n], ClientSideRowModel.prototype, \"selectionService\", 2);\n__decorateClass([\n  Autowired(\"valueCache\")\n], ClientSideRowModel.prototype, \"valueCache\", 2);\n__decorateClass([\n  Autowired(\"beans\")\n], ClientSideRowModel.prototype, \"beans\", 2);\n__decorateClass([\n  Autowired(\"filterStage\")\n], ClientSideRowModel.prototype, \"filterStage\", 2);\n__decorateClass([\n  Autowired(\"sortStage\")\n], ClientSideRowModel.prototype, \"sortStage\", 2);\n__decorateClass([\n  Autowired(\"flattenStage\")\n], ClientSideRowModel.prototype, \"flattenStage\", 2);\n__decorateClass([\n  Optional(\"groupStage\")\n], ClientSideRowModel.prototype, \"groupStage\", 2);\n__decorateClass([\n  Optional(\"aggregationStage\")\n], ClientSideRowModel.prototype, \"aggregationStage\", 2);\n__decorateClass([\n  Optional(\"pivotStage\")\n], ClientSideRowModel.prototype, \"pivotStage\", 2);\n__decorateClass([\n  Optional(\"filterAggregatesStage\")\n], ClientSideRowModel.prototype, \"filterAggregatesStage\", 2);\n__decorateClass([\n  PostConstruct\n], ClientSideRowModel.prototype, \"init\", 1);\nClientSideRowModel = __decorateClass([\n  Bean(\"rowModel\")\n], ClientSideRowModel);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterStage.ts\nimport {\n  Autowired as Autowired2,\n  Bean as Bean2,\n  BeanStub as BeanStub2\n} from \"@ag-grid-community/core\";\nvar FilterStage = class extends BeanStub2 {\n  execute(params) {\n    const { changedPath } = params;\n    this.filterService.filter(changedPath);\n  }\n};\n__decorateClass([\n  Autowired2(\"filterService\")\n], FilterStage.prototype, \"filterService\", 2);\nFilterStage = __decorateClass([\n  Bean2(\"filterStage\")\n], FilterStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortStage.ts\nimport {\n  _ as _3,\n  Autowired as Autowired3,\n  Bean as Bean3,\n  BeanStub as BeanStub3\n} from \"@ag-grid-community/core\";\nvar SortStage = class extends BeanStub3 {\n  execute(params) {\n    const sortOptions = this.sortController.getSortOptions();\n    const sortActive = _3.exists(sortOptions) && sortOptions.length > 0;\n    const deltaSort = sortActive && _3.exists(params.rowNodeTransactions) && this.gos.get(\"deltaSort\");\n    const sortContainsGroupColumns = sortOptions.some((opt) => {\n      const isSortingCoupled = this.gos.isColumnsSortingCoupledToGroup();\n      if (isSortingCoupled) {\n        return opt.column.isPrimary() && opt.column.isRowGroupActive();\n      }\n      return !!opt.column.getColDef().showRowGroup;\n    });\n    this.sortService.sort(sortOptions, sortActive, deltaSort, params.rowNodeTransactions, params.changedPath, sortContainsGroupColumns);\n  }\n};\n__decorateClass([\n  Autowired3(\"sortService\")\n], SortStage.prototype, \"sortService\", 2);\n__decorateClass([\n  Autowired3(\"sortController\")\n], SortStage.prototype, \"sortController\", 2);\nSortStage = __decorateClass([\n  Bean3(\"sortStage\")\n], SortStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/flattenStage.ts\nimport {\n  _ as _4,\n  Autowired as Autowired4,\n  Bean as Bean4,\n  BeanStub as BeanStub4,\n  RowNode as RowNode3\n} from \"@ag-grid-community/core\";\nvar FlattenStage = class extends BeanStub4 {\n  execute(params) {\n    const rootNode = params.rowNode;\n    const result = [];\n    const skipLeafNodes = this.beans.columnModel.isPivotMode();\n    const showRootNode = skipLeafNodes && rootNode.leafGroup;\n    const topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n    const details = this.getFlattenDetails();\n    this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);\n    const atLeastOneRowPresent = result.length > 0;\n    const includeGrandTotalRow = !showRootNode && atLeastOneRowPresent && details.grandTotalRow;\n    if (includeGrandTotalRow) {\n      rootNode.createFooter();\n      const addToTop = details.grandTotalRow === \"top\";\n      this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0, addToTop);\n    }\n    return result;\n  }\n  getFlattenDetails() {\n    const groupRemoveSingleChildren = this.gos.get(\"groupRemoveSingleChildren\");\n    const groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gos.get(\"groupRemoveLowestSingleChildren\");\n    return {\n      groupRemoveLowestSingleChildren,\n      groupRemoveSingleChildren,\n      isGroupMultiAutoColumn: this.gos.isGroupMultiAutoColumn(),\n      hideOpenParents: this.gos.get(\"groupHideOpenParents\"),\n      grandTotalRow: this.gos.getGrandTotalRow(),\n      groupTotalRow: this.gos.getGroupTotalRowCallback()\n    };\n  }\n  recursivelyAddToRowsToDisplay(details, rowsToFlatten, result, skipLeafNodes, uiLevel) {\n    if (_4.missingOrEmpty(rowsToFlatten)) {\n      return;\n    }\n    for (let i = 0; i < rowsToFlatten.length; i++) {\n      const rowNode = rowsToFlatten[i];\n      const isParent = rowNode.hasChildren();\n      const isSkippedLeafNode = skipLeafNodes && !isParent;\n      const isRemovedSingleChildrenGroup = details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;\n      const isRemovedLowestSingleChildrenGroup = details.groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;\n      const neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n      const isHiddenOpenParent = details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;\n      const thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n      if (thisRowShouldBeRendered) {\n        this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);\n      }\n      if (skipLeafNodes && rowNode.leafGroup) {\n        continue;\n      }\n      if (isParent) {\n        const excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n        if (rowNode.expanded || excludedParent) {\n          const doesRowShowFooter = details.groupTotalRow({ node: rowNode });\n          if (!doesRowShowFooter) {\n            rowNode.destroyFooter();\n          }\n          const uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n          if (doesRowShowFooter === \"top\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n          this.recursivelyAddToRowsToDisplay(\n            details,\n            rowNode.childrenAfterSort,\n            result,\n            skipLeafNodes,\n            uiLevelForChildren\n          );\n          if (doesRowShowFooter === \"bottom\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n        }\n      } else if (rowNode.master && rowNode.expanded) {\n        const detailNode = this.createDetailNode(rowNode);\n        this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);\n      }\n    }\n  }\n  // duplicated method, it's also in floatingRowModel\n  addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel, addToTop) {\n    if (addToTop) {\n      result.unshift(rowNode);\n    } else {\n      result.push(rowNode);\n    }\n    rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);\n  }\n  createDetailNode(masterNode) {\n    if (_4.exists(masterNode.detailNode)) {\n      return masterNode.detailNode;\n    }\n    const detailNode = new RowNode3(this.beans);\n    detailNode.detail = true;\n    detailNode.selectable = false;\n    detailNode.parent = masterNode;\n    if (_4.exists(masterNode.id)) {\n      detailNode.id = \"detail_\" + masterNode.id;\n    }\n    detailNode.data = masterNode.data;\n    detailNode.level = masterNode.level + 1;\n    masterNode.detailNode = detailNode;\n    return detailNode;\n  }\n};\n__decorateClass([\n  Autowired4(\"beans\")\n], FlattenStage.prototype, \"beans\", 2);\nFlattenStage = __decorateClass([\n  Bean4(\"flattenStage\")\n], FlattenStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortService.ts\nimport {\n  _ as _5,\n  Autowired as Autowired5,\n  Bean as Bean5,\n  BeanStub as BeanStub5\n} from \"@ag-grid-community/core\";\nvar SortService = class extends BeanStub5 {\n  sort(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {\n    const groupMaintainOrder = this.gos.get(\"groupMaintainOrder\");\n    const groupColumnsPresent = this.columnModel.getAllGridColumns().some((c) => c.isRowGroupActive());\n    let allDirtyNodes = {};\n    if (useDeltaSort && rowNodeTransactions) {\n      allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);\n    }\n    const isPivotMode = this.columnModel.isPivotMode();\n    const postSortFunc = this.gos.getCallback(\"postSortRows\");\n    const callback = (rowNode) => {\n      var _a;\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\n      const skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;\n      let skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\n      if (skipSortingGroups) {\n        const nextGroup = (_a = this.columnModel.getRowGroupColumns()) == null ? void 0 : _a[rowNode.level + 1];\n        const wasSortExplicitlyRemoved = (nextGroup == null ? void 0 : nextGroup.getSort()) === null;\n        const childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);\n        if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {\n          const indexedOrders = {};\n          rowNode.childrenAfterSort.forEach((node, idx) => {\n            indexedOrders[node.id] = idx;\n          });\n          childrenToBeSorted.sort((row1, row2) => {\n            var _a2, _b;\n            return ((_a2 = indexedOrders[row1.id]) != null ? _a2 : 0) - ((_b = indexedOrders[row2.id]) != null ? _b : 0);\n          });\n        }\n        rowNode.childrenAfterSort = childrenToBeSorted;\n      } else if (!sortActive || skipSortingPivotLeafs) {\n        rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter.slice(0);\n      } else if (useDeltaSort) {\n        rowNode.childrenAfterSort = this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);\n      } else {\n        rowNode.childrenAfterSort = this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\n      }\n      this.updateChildIndexes(rowNode);\n      if (postSortFunc) {\n        const params = { nodes: rowNode.childrenAfterSort };\n        postSortFunc(params);\n      }\n    };\n    if (changedPath) {\n      changedPath.forEachChangedNodeDepthFirst(callback);\n    }\n    this.updateGroupDataForHideOpenParents(changedPath);\n  }\n  calculateDirtyNodes(rowNodeTransactions) {\n    const dirtyNodes = {};\n    const addNodesFunc = (rowNodes) => {\n      if (rowNodes) {\n        rowNodes.forEach((rowNode) => dirtyNodes[rowNode.id] = true);\n      }\n    };\n    if (rowNodeTransactions) {\n      rowNodeTransactions.forEach((tran) => {\n        addNodesFunc(tran.add);\n        addNodesFunc(tran.update);\n        addNodesFunc(tran.remove);\n      });\n    }\n    return dirtyNodes;\n  }\n  doDeltaSort(rowNode, allTouchedNodes, changedPath, sortOptions) {\n    const unsortedRows = rowNode.childrenAfterAggFilter;\n    const oldSortedRows = rowNode.childrenAfterSort;\n    if (!oldSortedRows) {\n      return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);\n    }\n    const untouchedRowsMap = {};\n    const touchedRows = [];\n    unsortedRows.forEach((row) => {\n      if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {\n        touchedRows.push(row);\n      } else {\n        untouchedRowsMap[row.id] = true;\n      }\n    });\n    const sortedUntouchedRows = oldSortedRows.filter((child) => untouchedRowsMap[child.id]);\n    const mapNodeToSortedNode = (rowNode2, pos) => ({ currentPos: pos, rowNode: rowNode2 });\n    const sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort((a, b) => this.rowNodeSorter.compareRowNodes(sortOptions, a, b));\n    return this.mergeSortedArrays(\n      sortOptions,\n      sortedChangedRows,\n      sortedUntouchedRows.map(mapNodeToSortedNode)\n    ).map(({ rowNode: rowNode2 }) => rowNode2);\n  }\n  // Merge two sorted arrays into each other\n  mergeSortedArrays(sortOptions, arr1, arr2) {\n    const res = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n      const compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n      if (compareResult < 0) {\n        res.push(arr1[i++]);\n      } else {\n        res.push(arr2[j++]);\n      }\n    }\n    while (i < arr1.length) {\n      res.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n      res.push(arr2[j++]);\n    }\n    return res;\n  }\n  updateChildIndexes(rowNode) {\n    if (_5.missing(rowNode.childrenAfterSort)) {\n      return;\n    }\n    const listToSort = rowNode.childrenAfterSort;\n    for (let i = 0; i < listToSort.length; i++) {\n      const child = listToSort[i];\n      const firstChild = i === 0;\n      const lastChild = i === rowNode.childrenAfterSort.length - 1;\n      child.setFirstChild(firstChild);\n      child.setLastChild(lastChild);\n      child.setChildIndex(i);\n    }\n  }\n  updateGroupDataForHideOpenParents(changedPath) {\n    if (!this.gos.get(\"groupHideOpenParents\")) {\n      return;\n    }\n    if (this.gos.get(\"treeData\")) {\n      _5.warnOnce(`The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them.`);\n      return false;\n    }\n    const callback = (rowNode) => {\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n      rowNode.childrenAfterSort.forEach((child) => {\n        if (child.hasChildren()) {\n          callback(child);\n        }\n      });\n    };\n    if (changedPath) {\n      changedPath.executeFromRootNode((rowNode) => callback(rowNode));\n    }\n  }\n  pullDownGroupDataForHideOpenParents(rowNodes, clearOperation) {\n    if (!this.gos.get(\"groupHideOpenParents\") || _5.missing(rowNodes)) {\n      return;\n    }\n    rowNodes.forEach((childRowNode) => {\n      const groupDisplayCols = this.columnModel.getGroupDisplayColumns();\n      groupDisplayCols.forEach((groupDisplayCol) => {\n        const showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n        if (typeof showRowGroup !== \"string\") {\n          console.error(\"AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup\");\n          return;\n        }\n        const displayingGroupKey = showRowGroup;\n        const rowGroupColumn = this.columnModel.getPrimaryColumn(displayingGroupKey);\n        const thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n        if (thisRowNodeMatches) {\n          return;\n        }\n        if (clearOperation) {\n          childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);\n        } else {\n          const parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n          if (parentToStealFrom) {\n            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n          }\n        }\n      });\n    });\n  }\n};\n__decorateClass([\n  Autowired5(\"columnModel\")\n], SortService.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired5(\"rowNodeSorter\")\n], SortService.prototype, \"rowNodeSorter\", 2);\nSortService = __decorateClass([\n  Bean5(\"sortService\")\n], SortService);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterService.ts\nimport {\n  Autowired as Autowired6,\n  Bean as Bean6,\n  BeanStub as BeanStub6\n} from \"@ag-grid-community/core\";\nvar FilterService = class extends BeanStub6 {\n  filter(changedPath) {\n    const filterActive = this.filterManager.isChildFilterPresent();\n    this.filterNodes(filterActive, changedPath);\n  }\n  filterNodes(filterActive, changedPath) {\n    const filterCallback = (rowNode, includeChildNodes) => {\n      if (rowNode.hasChildren()) {\n        if (filterActive && !includeChildNodes) {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter((childNode) => {\n            const passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n            const passBecauseDataPasses = childNode.data && this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            return passBecauseChildren || passBecauseDataPasses;\n          });\n        } else {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        }\n      } else {\n        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n      }\n    };\n    if (this.doingTreeDataFiltering()) {\n      const treeDataDepthFirstFilter = (rowNode, alreadyFoundInParent) => {\n        if (rowNode.childrenAfterGroup) {\n          for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            const childNode = rowNode.childrenAfterGroup[i];\n            const foundInParent = alreadyFoundInParent || this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            if (childNode.childrenAfterGroup) {\n              treeDataDepthFirstFilter(rowNode.childrenAfterGroup[i], foundInParent);\n            } else {\n              filterCallback(childNode, foundInParent);\n            }\n          }\n        }\n        filterCallback(rowNode, alreadyFoundInParent);\n      };\n      const treeDataFilterCallback = (rowNode) => treeDataDepthFirstFilter(rowNode, false);\n      changedPath.executeFromRootNode(treeDataFilterCallback);\n    } else {\n      const defaultFilterCallback = (rowNode) => filterCallback(rowNode, false);\n      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n    }\n  }\n  doingTreeDataFiltering() {\n    return this.gos.get(\"treeData\") && !this.gos.get(\"excludeChildrenWhenTreeDataFiltering\");\n  }\n};\n__decorateClass([\n  Autowired6(\"filterManager\")\n], FilterService.prototype, \"filterManager\", 2);\nFilterService = __decorateClass([\n  Bean6(\"filterService\")\n], FilterService);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/immutableService.ts\nimport {\n  Autowired as Autowired7,\n  Bean as Bean7,\n  BeanStub as BeanStub7,\n  PostConstruct as PostConstruct2,\n  _ as _6\n} from \"@ag-grid-community/core\";\nvar ImmutableService = class extends BeanStub7 {\n  postConstruct() {\n    if (this.rowModel.getType() === \"clientSide\") {\n      this.clientSideRowModel = this.rowModel;\n      this.addManagedPropertyListener(\"rowData\", () => this.onRowDataUpdated());\n    }\n  }\n  isActive() {\n    const getRowIdProvided = this.gos.exists(\"getRowId\");\n    const resetRowDataOnUpdate = this.gos.get(\"resetRowDataOnUpdate\");\n    if (resetRowDataOnUpdate) {\n      return false;\n    }\n    return getRowIdProvided;\n  }\n  setRowData(rowData) {\n    const transactionAndMap = this.createTransactionForRowData(rowData);\n    if (!transactionAndMap) {\n      return;\n    }\n    const [transaction, orderIdMap] = transactionAndMap;\n    this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n  }\n  // converts the setRowData() command to a transaction\n  createTransactionForRowData(rowData) {\n    if (_6.missing(this.clientSideRowModel)) {\n      console.error(\"AG Grid: ImmutableService only works with ClientSideRowModel\");\n      return;\n    }\n    const getRowIdFunc = this.gos.getCallback(\"getRowId\");\n    if (getRowIdFunc == null) {\n      console.error(\"AG Grid: ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!\");\n      return;\n    }\n    const transaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n    const suppressSortOrder = this.gos.get(\"suppressMaintainUnsortedOrder\");\n    const orderMap = suppressSortOrder ? void 0 : {};\n    if (_6.exists(rowData)) {\n      rowData.forEach((data, index) => {\n        const id = getRowIdFunc({ data, level: 0 });\n        const existingNode = existingNodesMap[id];\n        if (orderMap) {\n          orderMap[id] = index;\n        }\n        if (existingNode) {\n          const dataHasChanged = existingNode.data !== data;\n          if (dataHasChanged) {\n            transaction.update.push(data);\n          }\n          existingNodesMap[id] = void 0;\n        } else {\n          transaction.add.push(data);\n        }\n      });\n    }\n    _6.iterateObject(existingNodesMap, (id, rowNode) => {\n      if (rowNode) {\n        transaction.remove.push(rowNode.data);\n      }\n    });\n    return [transaction, orderMap];\n  }\n  onRowDataUpdated() {\n    const rowData = this.gos.get(\"rowData\");\n    if (!rowData) {\n      return;\n    }\n    if (this.isActive()) {\n      this.setRowData(rowData);\n    } else {\n      this.selectionService.reset(\"rowDataChanged\");\n      this.clientSideRowModel.setRowData(rowData);\n    }\n  }\n};\n__decorateClass([\n  Autowired7(\"rowModel\")\n], ImmutableService.prototype, \"rowModel\", 2);\n__decorateClass([\n  Autowired7(\"rowRenderer\")\n], ImmutableService.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  Autowired7(\"selectionService\")\n], ImmutableService.prototype, \"selectionService\", 2);\n__decorateClass([\n  PostConstruct2\n], ImmutableService.prototype, \"postConstruct\", 1);\nImmutableService = __decorateClass([\n  Bean7(\"immutableService\")\n], ImmutableService);\n\n// community-modules/client-side-row-model/src/version.ts\nvar VERSION = \"31.3.2\";\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nvar ClientSideRowModelModule = {\n  version: VERSION,\n  moduleName: ModuleNames.ClientSideRowModelModule,\n  rowModel: \"clientSide\",\n  beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService]\n};\nexport {\n  ClientSideRowModelModule\n};\n"],
  "mappings": "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",
  "names": ["_ClientSideNodeManager"]
}
