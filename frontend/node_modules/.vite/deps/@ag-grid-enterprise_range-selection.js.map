{
  "version": 3,
  "sources": ["../../@ag-grid-enterprise/range-selection/dist/package/main.esm.mjs"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\nimport { EnterpriseCoreModule } from \"@ag-grid-enterprise/core\";\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeService.ts\nimport {\n  Autowired,\n  Bean,\n  Events,\n  PostConstruct,\n  BeanStub,\n  AutoScrollService,\n  CellCtrl,\n  _\n} from \"@ag-grid-community/core\";\nvar RangeService = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.cellRanges = [];\n    this.bodyScrollListener = this.onBodyScroll.bind(this);\n    this.dragging = false;\n    this.intersectionRange = false;\n  }\n  init() {\n    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, () => this.onColumnsChanged());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.onColumnsChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnsChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.refreshLastRangeStart.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.refreshLastRangeStart.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.refreshLastRangeStart.bind(this));\n    this.ctrlsService.whenReady((p) => {\n      const gridBodyCtrl = p.gridBodyCtrl;\n      this.autoScrollService = new AutoScrollService({\n        scrollContainer: gridBodyCtrl.getBodyViewportElement(),\n        scrollAxis: \"xy\",\n        getVerticalPosition: () => gridBodyCtrl.getScrollFeature().getVScrollPosition().top,\n        setVerticalPosition: (position) => gridBodyCtrl.getScrollFeature().setVerticalScrollPosition(position),\n        getHorizontalPosition: () => gridBodyCtrl.getScrollFeature().getHScrollPosition().left,\n        setHorizontalPosition: (position) => gridBodyCtrl.getScrollFeature().setHorizontalScrollPosition(position),\n        shouldSkipVerticalScroll: () => !this.gos.isDomLayout(\"normal\"),\n        shouldSkipHorizontalScroll: () => !gridBodyCtrl.getScrollFeature().isHorizontalScrollShowing()\n      });\n    });\n  }\n  // Called for both columns loaded & column visibility events\n  onColumnsChanged() {\n    this.refreshLastRangeStart();\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    this.cellRanges.forEach((cellRange) => {\n      const beforeCols = cellRange.columns;\n      cellRange.columns = cellRange.columns.filter(\n        (col) => col.isVisible() && allColumns.indexOf(col) !== -1\n      );\n      const colsInRangeChanged = !_.areEqual(beforeCols, cellRange.columns);\n      if (colsInRangeChanged) {\n        this.dispatchChangedEvent(false, true, cellRange.id);\n      }\n    });\n    const countBefore = this.cellRanges.length;\n    this.cellRanges = this.cellRanges.filter((range) => range.columns.length > 0);\n    if (countBefore > this.cellRanges.length) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  refreshLastRangeStart() {\n    const lastRange = _.last(this.cellRanges);\n    if (!lastRange) {\n      return;\n    }\n    this.refreshRangeStart(lastRange);\n  }\n  isContiguousRange(cellRange) {\n    const rangeColumns = cellRange.columns;\n    if (!rangeColumns.length) {\n      return false;\n    }\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allPositions = rangeColumns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    return _.last(allPositions) - allPositions[0] + 1 === rangeColumns.length;\n  }\n  getRangeStartRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.startRow : cellRange.endRow;\n    }\n    const rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? \"top\" : null;\n    return { rowIndex: 0, rowPinned };\n  }\n  getRangeEndRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.endRow : cellRange.startRow;\n    }\n    const pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();\n    const pinnedBottom = pinnedBottomRowCount > 0;\n    if (pinnedBottom) {\n      return {\n        rowIndex: pinnedBottomRowCount - 1,\n        rowPinned: \"bottom\"\n      };\n    }\n    return {\n      rowIndex: this.rowModel.getRowCount() - 1,\n      rowPinned: null\n    };\n  }\n  setRangeToCell(cell, appendRange = false) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(cell.column, cell.column);\n    if (!columns) {\n      return;\n    }\n    const suppressMultiRangeSelections = this.gos.get(\"suppressMultiRangeSelection\");\n    if (suppressMultiRangeSelections || !appendRange || _.missing(this.cellRanges)) {\n      this.removeAllCellRanges(true);\n    }\n    const rowForCell = {\n      rowIndex: cell.rowIndex,\n      rowPinned: cell.rowPinned\n    };\n    const cellRange = {\n      startRow: rowForCell,\n      endRow: rowForCell,\n      columns,\n      startColumn: cell.column\n    };\n    this.cellRanges.push(cellRange);\n    this.setNewestRangeStartCell(cell);\n    this.onDragStop();\n    this.dispatchChangedEvent(true, true);\n  }\n  extendLatestRangeToCell(cellPosition) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const cellRange = _.last(this.cellRanges);\n    this.updateRangeEnd(cellRange, cellPosition);\n  }\n  updateRangeEnd(cellRange, cellPosition, silent = false) {\n    const endColumn = cellPosition.column;\n    const colsToAdd = this.calculateColumnsBetween(cellRange.startColumn, endColumn);\n    if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {\n      return;\n    }\n    cellRange.columns = colsToAdd;\n    cellRange.endRow = { rowIndex: cellPosition.rowIndex, rowPinned: cellPosition.rowPinned };\n    if (!silent) {\n      this.dispatchChangedEvent(true, true, cellRange.id);\n    }\n  }\n  refreshRangeStart(cellRange) {\n    const { startColumn, columns } = cellRange;\n    const moveColInCellRange = (colToMove, moveToFront) => {\n      const otherCols = cellRange.columns.filter((col) => col !== colToMove);\n      if (colToMove) {\n        cellRange.startColumn = colToMove;\n        cellRange.columns = moveToFront ? [colToMove, ...otherCols] : [...otherCols, colToMove];\n      } else {\n        cellRange.columns = otherCols;\n      }\n    };\n    const { left, right } = this.getRangeEdgeColumns(cellRange);\n    const shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;\n    if (shouldMoveLeftCol) {\n      moveColInCellRange(left, true);\n      return;\n    }\n    const shouldMoveRightCol = startColumn === _.last(columns) && startColumn === right;\n    if (shouldMoveRightCol) {\n      moveColInCellRange(right, false);\n      return;\n    }\n  }\n  getRangeEdgeColumns(cellRange) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allIndices = cellRange.columns.map((c) => allColumns.indexOf(c)).filter((i) => i > -1).sort((a, b) => a - b);\n    return {\n      left: allColumns[allIndices[0]],\n      right: allColumns[_.last(allIndices)]\n    };\n  }\n  // returns true if successful, false if not successful\n  extendLatestRangeInDirection(event) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const key = event.key;\n    const ctrlKey = event.ctrlKey || event.metaKey;\n    const lastRange = _.last(this.cellRanges);\n    const startCell = this.newestRangeStartCell;\n    const firstCol = lastRange.columns[0];\n    const lastCol = _.last(lastRange.columns);\n    const endCellIndex = lastRange.endRow.rowIndex;\n    const endCellFloating = lastRange.endRow.rowPinned;\n    const endCellColumn = startCell.column === firstCol ? lastCol : firstCol;\n    const endCell = { column: endCellColumn, rowIndex: endCellIndex, rowPinned: endCellFloating };\n    const newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell, ctrlKey);\n    if (!newEndCell) {\n      return;\n    }\n    this.setCellRange({\n      rowStartIndex: startCell.rowIndex,\n      rowStartPinned: startCell.rowPinned,\n      rowEndIndex: newEndCell.rowIndex,\n      rowEndPinned: newEndCell.rowPinned,\n      columnStart: startCell.column,\n      columnEnd: newEndCell.column\n    });\n    return newEndCell;\n  }\n  setCellRange(params) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    this.addCellRange(params);\n  }\n  setCellRanges(cellRanges) {\n    if (_.shallowCompare(this.cellRanges, cellRanges)) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    cellRanges.forEach((newRange) => {\n      if (newRange.columns && newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.columns[0]\n        });\n      }\n      this.cellRanges.push(newRange);\n    });\n    this.dispatchChangedEvent(false, true);\n  }\n  setNewestRangeStartCell(position) {\n    this.newestRangeStartCell = position;\n  }\n  clearCellRangeCellValues(params) {\n    let { cellRanges } = params;\n    const {\n      cellEventSource = \"rangeService\",\n      dispatchWrapperEvents,\n      wrapperEventSource = \"deleteKey\"\n    } = params;\n    if (dispatchWrapperEvents) {\n      const startEvent = {\n        type: Events.EVENT_RANGE_DELETE_START,\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(startEvent);\n    }\n    if (!cellRanges) {\n      cellRanges = this.cellRanges;\n    }\n    cellRanges.forEach((cellRange) => {\n      this.forEachRowInRange(cellRange, (rowPosition) => {\n        var _a;\n        const rowNode = this.rowPositionUtils.getRowNode(rowPosition);\n        if (!rowNode) {\n          return;\n        }\n        for (let i = 0; i < cellRange.columns.length; i++) {\n          const column = this.columnModel.getGridColumn(cellRange.columns[i]);\n          if (!column || !column.isCellEditable(rowNode)) {\n            continue;\n          }\n          const emptyValue = (_a = this.valueService.parseValue(column, rowNode, \"\", rowNode.getValueFromValueService(column))) != null ? _a : null;\n          rowNode.setDataValue(column, emptyValue, cellEventSource);\n        }\n      });\n    });\n    if (dispatchWrapperEvents) {\n      const endEvent = {\n        type: Events.EVENT_RANGE_DELETE_END,\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(endEvent);\n    }\n  }\n  createCellRangeFromCellRangeParams(params) {\n    return this.createPartialCellRangeFromRangeParams(params, false);\n  }\n  // Range service can't normally support a range without columns, but charts can\n  createPartialCellRangeFromRangeParams(params, allowEmptyColumns) {\n    let columns;\n    let startsOnTheRight = false;\n    if (params.columns) {\n      columns = params.columns.map((c) => this.columnModel.getColumnWithValidation(c)).filter((c) => c);\n    } else {\n      const columnStart = this.columnModel.getColumnWithValidation(params.columnStart);\n      const columnEnd = this.columnModel.getColumnWithValidation(params.columnEnd);\n      if (!columnStart || !columnEnd) {\n        return;\n      }\n      columns = this.calculateColumnsBetween(columnStart, columnEnd);\n      if (columns && columns.length) {\n        startsOnTheRight = columns[0] !== columnStart;\n      }\n    }\n    if (!columns || !allowEmptyColumns && columns.length === 0) {\n      return;\n    }\n    const startRow = params.rowStartIndex != null ? {\n      rowIndex: params.rowStartIndex,\n      rowPinned: params.rowStartPinned || null\n    } : void 0;\n    const endRow = params.rowEndIndex != null ? {\n      rowIndex: params.rowEndIndex,\n      rowPinned: params.rowEndPinned || null\n    } : void 0;\n    return {\n      startRow,\n      endRow,\n      columns,\n      startColumn: startsOnTheRight ? _.last(columns) : columns[0]\n    };\n  }\n  addCellRange(params) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const newRange = this.createCellRangeFromCellRangeParams(params);\n    if (newRange) {\n      if (newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.startColumn\n        });\n      }\n      this.cellRanges.push(newRange);\n      this.dispatchChangedEvent(false, true, newRange.id);\n    }\n  }\n  getCellRanges() {\n    return this.cellRanges;\n  }\n  isEmpty() {\n    return this.cellRanges.length === 0;\n  }\n  isMoreThanOneCell() {\n    const len = this.cellRanges.length;\n    if (len === 0) {\n      return false;\n    }\n    if (len > 1) {\n      return true;\n    }\n    const range = this.cellRanges[0];\n    const startRow = this.getRangeStartRow(range);\n    const endRow = this.getRangeEndRow(range);\n    return startRow.rowPinned !== endRow.rowPinned || startRow.rowIndex !== endRow.rowIndex || range.columns.length !== 1;\n  }\n  areAllRangesAbleToMerge() {\n    const rowToColumnMap = /* @__PURE__ */ new Map();\n    const len = this.cellRanges.length;\n    if (len <= 1)\n      return true;\n    this.cellRanges.forEach((range) => {\n      this.forEachRowInRange(range, (row) => {\n        const rowName = `${row.rowPinned || \"normal\"}_${row.rowIndex}`;\n        const columns = rowToColumnMap.get(rowName);\n        const currentRangeColIds = range.columns.map((col) => col.getId());\n        if (columns) {\n          const filteredColumns = currentRangeColIds.filter((col) => columns.indexOf(col) === -1);\n          columns.push(...filteredColumns);\n        } else {\n          rowToColumnMap.set(rowName, currentRangeColIds);\n        }\n      });\n    });\n    let columnsString;\n    for (const val of rowToColumnMap.values()) {\n      const currentValString = val.sort().join();\n      if (columnsString === void 0) {\n        columnsString = currentValString;\n        continue;\n      }\n      if (columnsString !== currentValString) {\n        return false;\n      }\n    }\n    return true;\n  }\n  forEachRowInRange(cellRange, callback) {\n    const topRow = this.getRangeStartRow(cellRange);\n    const bottomRow = this.getRangeEndRow(cellRange);\n    let currentRow = topRow;\n    while (currentRow) {\n      callback(currentRow);\n      if (this.rowPositionUtils.sameRow(currentRow, bottomRow)) {\n        break;\n      }\n      currentRow = this.cellNavigationService.getRowBelow(currentRow);\n    }\n  }\n  removeAllCellRanges(silent) {\n    if (this.isEmpty()) {\n      return;\n    }\n    this.onDragStop();\n    this.cellRanges.length = 0;\n    if (!silent) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n  // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n  // the selection my mimicking a new mouse event\n  onBodyScroll() {\n    if (this.dragging && this.lastMouseEvent) {\n      this.onDragging(this.lastMouseEvent);\n    }\n  }\n  isCellInAnyRange(cell) {\n    return this.getCellRangeCount(cell) > 0;\n  }\n  isCellInSpecificRange(cell, range) {\n    const columnInRange = range.columns !== null && _.includes(range.columns, cell.column);\n    const rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);\n    return columnInRange && rowInRange;\n  }\n  isLastCellOfRange(cellRange, cell) {\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && cell.rowPinned === lastRow.rowPinned;\n    const rangeFirstIndexColumn = cellRange.columns[0];\n    const rangeLastIndexColumn = _.last(cellRange.columns);\n    const lastRangeColumn = cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;\n    const isLastColumn = cell.column === lastRangeColumn;\n    return isLastColumn && isLastRow;\n  }\n  isBottomRightCell(cellRange, cell) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allPositions = cellRange.columns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isRightColumn = allColumns.indexOf(cell.column) === _.last(allPositions);\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && _.makeNull(cell.rowPinned) === _.makeNull(lastRow.rowPinned);\n    return isRightColumn && isLastRow;\n  }\n  // returns the number of ranges this cell is in\n  getCellRangeCount(cell) {\n    if (this.isEmpty()) {\n      return 0;\n    }\n    return this.cellRanges.filter((cellRange) => this.isCellInSpecificRange(cell, cellRange)).length;\n  }\n  isRowInRange(rowIndex, floating, cellRange) {\n    const firstRow = this.getRangeStartRow(cellRange);\n    const lastRow = this.getRangeEndRow(cellRange);\n    const thisRow = { rowIndex, rowPinned: floating || null };\n    const equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;\n    const equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;\n    if (equalsFirstRow || equalsLastRow) {\n      return true;\n    }\n    const afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);\n    const beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);\n    return afterFirstRow && beforeLastRow;\n  }\n  getDraggingRange() {\n    return this.draggingRange;\n  }\n  onDragStart(mouseEvent) {\n    if (!this.gos.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n    const isMultiKey = ctrlKey || metaKey;\n    const allowMulti = !this.gos.get(\"suppressMultiRangeSelection\");\n    const isMultiSelect = allowMulti ? isMultiKey : false;\n    const extendRange = shiftKey && _.existsAndNotEmpty(this.cellRanges);\n    if (!isMultiSelect && (!extendRange || _.exists(_.last(this.cellRanges).type))) {\n      this.removeAllCellRanges(true);\n    }\n    const startTarget = this.dragService.getStartTarget();\n    if (startTarget) {\n      this.updateValuesOnMove(startTarget);\n    }\n    if (!this.lastCellHovered) {\n      return;\n    }\n    this.dragging = true;\n    this.lastMouseEvent = mouseEvent;\n    this.intersectionRange = isMultiSelect && this.getCellRangeCount(this.lastCellHovered) > 1;\n    if (!extendRange) {\n      this.setNewestRangeStartCell(this.lastCellHovered);\n    }\n    if (this.cellRanges.length > 0) {\n      this.draggingRange = _.last(this.cellRanges);\n    } else {\n      const mouseRowPosition = {\n        rowIndex: this.lastCellHovered.rowIndex,\n        rowPinned: this.lastCellHovered.rowPinned\n      };\n      this.draggingRange = {\n        startRow: mouseRowPosition,\n        endRow: mouseRowPosition,\n        columns: [this.lastCellHovered.column],\n        startColumn: this.newestRangeStartCell.column\n      };\n      this.cellRanges.push(this.draggingRange);\n    }\n    this.ctrlsService.getGridBodyCtrl().addScrollEventListener(this.bodyScrollListener);\n    this.dispatchChangedEvent(true, false, this.draggingRange.id);\n  }\n  intersectLastRange(fromMouseClick) {\n    if (fromMouseClick && this.dragging) {\n      return;\n    }\n    if (this.gos.get(\"suppressMultiRangeSelection\")) {\n      return;\n    }\n    if (this.isEmpty()) {\n      return;\n    }\n    const rowPosUtils = this.rowPositionUtils;\n    const lastRange = _.last(this.cellRanges);\n    const intersectionStartRow = this.getRangeStartRow(lastRange);\n    const intersectionEndRow = this.getRangeEndRow(lastRange);\n    const newRanges = [];\n    this.cellRanges.slice(0, -1).forEach((range) => {\n      const startRow = this.getRangeStartRow(range);\n      const endRow = this.getRangeEndRow(range);\n      const cols = range.columns;\n      const intersectCols = cols.filter((col) => lastRange.columns.indexOf(col) === -1);\n      if (intersectCols.length === cols.length) {\n        newRanges.push(range);\n        return;\n      }\n      if (rowPosUtils.before(intersectionEndRow, startRow) || rowPosUtils.before(endRow, intersectionStartRow)) {\n        newRanges.push(range);\n        return;\n      }\n      const rangeCountBefore = newRanges.length;\n      if (rowPosUtils.before(startRow, intersectionStartRow)) {\n        const top = {\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: __spreadValues({}, startRow),\n          endRow: this.cellNavigationService.getRowAbove(intersectionStartRow)\n        };\n        newRanges.push(top);\n      }\n      if (intersectCols.length > 0) {\n        const middle = {\n          columns: intersectCols,\n          startColumn: _.includes(intersectCols, lastRange.startColumn) ? lastRange.startColumn : intersectCols[0],\n          startRow: this.rowMax([__spreadValues({}, intersectionStartRow), __spreadValues({}, startRow)]),\n          endRow: this.rowMin([__spreadValues({}, intersectionEndRow), __spreadValues({}, endRow)])\n        };\n        newRanges.push(middle);\n      }\n      if (rowPosUtils.before(intersectionEndRow, endRow)) {\n        newRanges.push({\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: this.cellNavigationService.getRowBelow(intersectionEndRow),\n          endRow: __spreadValues({}, endRow)\n        });\n      }\n      if (newRanges.length - rangeCountBefore === 1) {\n        newRanges[newRanges.length - 1].id = range.id;\n      }\n    });\n    this.cellRanges = newRanges;\n    if (fromMouseClick) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  rowMax(rows) {\n    let max;\n    rows.forEach((row) => {\n      if (max === void 0 || this.rowPositionUtils.before(max, row)) {\n        max = row;\n      }\n    });\n    return max;\n  }\n  rowMin(rows) {\n    let min;\n    rows.forEach((row) => {\n      if (min === void 0 || this.rowPositionUtils.before(row, min)) {\n        min = row;\n      }\n    });\n    return min;\n  }\n  updateValuesOnMove(eventTarget) {\n    const cellCtrl = _.getCtrlForEventTarget(this.gos, eventTarget, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    const cell = cellCtrl == null ? void 0 : cellCtrl.getCellPosition();\n    this.cellHasChanged = false;\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    if (this.lastCellHovered) {\n      this.cellHasChanged = true;\n    }\n    this.lastCellHovered = cell;\n  }\n  onDragging(mouseEvent) {\n    if (!this.dragging || !mouseEvent) {\n      return;\n    }\n    this.updateValuesOnMove(mouseEvent.target);\n    this.lastMouseEvent = mouseEvent;\n    const cellPosition = this.lastCellHovered;\n    const isMouseAndStartInPinned = (position) => cellPosition && cellPosition.rowPinned === position && this.newestRangeStartCell.rowPinned === position;\n    const skipVerticalScroll = isMouseAndStartInPinned(\"top\") || isMouseAndStartInPinned(\"bottom\");\n    this.autoScrollService.check(mouseEvent, skipVerticalScroll);\n    if (!this.cellHasChanged) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(this.newestRangeStartCell.column, cellPosition.column);\n    if (!columns) {\n      return;\n    }\n    this.draggingRange.endRow = {\n      rowIndex: cellPosition.rowIndex,\n      rowPinned: cellPosition.rowPinned\n    };\n    this.draggingRange.columns = columns;\n    this.dispatchChangedEvent(false, false, this.draggingRange.id);\n  }\n  onDragStop() {\n    if (!this.dragging) {\n      return;\n    }\n    const { id } = this.draggingRange;\n    this.autoScrollService.ensureCleared();\n    this.ctrlsService.getGridBodyCtrl().removeScrollEventListener(this.bodyScrollListener);\n    this.lastMouseEvent = null;\n    this.dragging = false;\n    this.draggingRange = void 0;\n    this.lastCellHovered = void 0;\n    if (this.intersectionRange) {\n      this.intersectionRange = false;\n      this.intersectLastRange();\n    }\n    this.dispatchChangedEvent(false, true, id);\n  }\n  dispatchChangedEvent(started, finished, id) {\n    const event = {\n      type: Events.EVENT_RANGE_SELECTION_CHANGED,\n      started,\n      finished,\n      id\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  calculateColumnsBetween(columnFrom, columnTo) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const isSameColumn = columnFrom === columnTo;\n    const fromIndex = allColumns.indexOf(columnFrom);\n    if (fromIndex < 0) {\n      console.warn(`AG Grid: column ${columnFrom.getId()} is not visible`);\n      return;\n    }\n    const toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo);\n    if (toIndex < 0) {\n      console.warn(`AG Grid: column ${columnTo.getId()} is not visible`);\n      return;\n    }\n    if (isSameColumn) {\n      return [columnFrom];\n    }\n    const firstIndex = Math.min(fromIndex, toIndex);\n    const lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;\n    const columns = [];\n    for (let i = firstIndex; i <= lastIndex; i++) {\n      columns.push(allColumns[i]);\n    }\n    return columns;\n  }\n};\n__decorateClass([\n  Autowired(\"rowModel\")\n], RangeService.prototype, \"rowModel\", 2);\n__decorateClass([\n  Autowired(\"dragService\")\n], RangeService.prototype, \"dragService\", 2);\n__decorateClass([\n  Autowired(\"columnModel\")\n], RangeService.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired(\"cellNavigationService\")\n], RangeService.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  Autowired(\"pinnedRowModel\")\n], RangeService.prototype, \"pinnedRowModel\", 2);\n__decorateClass([\n  Autowired(\"rowPositionUtils\")\n], RangeService.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  Autowired(\"cellPositionUtils\")\n], RangeService.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  Autowired(\"ctrlsService\")\n], RangeService.prototype, \"ctrlsService\", 2);\n__decorateClass([\n  Autowired(\"valueService\")\n], RangeService.prototype, \"valueService\", 2);\n__decorateClass([\n  PostConstruct\n], RangeService.prototype, \"init\", 1);\nRangeService = __decorateClass([\n  Bean(\"rangeService\")\n], RangeService);\n\n// enterprise-modules/range-selection/src/rangeSelection/fillHandle.ts\nimport {\n  Autowired as Autowired3,\n  Events as Events2,\n  SelectionHandleType as SelectionHandleType2,\n  _ as _3\n} from \"@ag-grid-community/core\";\n\n// enterprise-modules/range-selection/src/rangeSelection/abstractSelectionHandle.ts\nimport {\n  Autowired as Autowired2,\n  Component,\n  PostConstruct as PostConstruct2,\n  _ as _2,\n  SelectionHandleType\n} from \"@ag-grid-community/core\";\nvar AbstractSelectionHandle = class extends Component {\n  constructor() {\n    super(...arguments);\n    this.changedCalculatedValues = false;\n    this.dragging = false;\n    this.shouldDestroyOnEndDragging = false;\n  }\n  init() {\n    this.dragService.addDragSource({\n      dragStartPixels: 0,\n      eElement: this.getGui(),\n      onDragStart: this.onDragStart.bind(this),\n      onDragging: (e) => {\n        this.dragging = true;\n        this.rangeService.autoScrollService.check(e);\n        if (this.changedCalculatedValues) {\n          this.onDrag(e);\n          this.changedCalculatedValues = false;\n        }\n      },\n      onDragStop: (e) => {\n        this.dragging = false;\n        this.onDragEnd(e);\n        this.clearValues();\n        this.rangeService.autoScrollService.ensureCleared();\n        document.body.classList.remove(this.getDraggingCssClass());\n        if (this.shouldDestroyOnEndDragging) {\n          this.destroy();\n        }\n      }\n    });\n    this.addManagedListener(\n      this.getGui(),\n      \"mousedown\",\n      this.preventRangeExtension.bind(this)\n    );\n  }\n  isDragging() {\n    return this.dragging;\n  }\n  getCellCtrl() {\n    return this.cellCtrl;\n  }\n  setCellCtrl(cellComp) {\n    this.cellCtrl = cellComp;\n  }\n  getCellRange() {\n    return this.cellRange;\n  }\n  setCellRange(range) {\n    this.cellRange = range;\n  }\n  getRangeStartRow() {\n    return this.rangeStartRow;\n  }\n  setRangeStartRow(row) {\n    this.rangeStartRow = row;\n  }\n  getRangeEndRow() {\n    return this.rangeEndRow;\n  }\n  setRangeEndRow(row) {\n    this.rangeEndRow = row;\n  }\n  getLastCellHovered() {\n    return this.lastCellHovered;\n  }\n  preventRangeExtension(e) {\n    e.stopPropagation();\n  }\n  onDragStart(e) {\n    this.cellHoverListener = this.addManagedListener(\n      this.ctrlsService.get(\"gridCtrl\").getGui(),\n      \"mousemove\",\n      this.updateValuesOnMove.bind(this)\n    );\n    document.body.classList.add(this.getDraggingCssClass());\n  }\n  getDraggingCssClass() {\n    return `ag-dragging-${this.type === SelectionHandleType.FILL ? \"fill\" : \"range\"}-handle`;\n  }\n  updateValuesOnMove(e) {\n    const cell = this.mouseEventService.getCellPositionForEvent(e);\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    this.lastCellHovered = cell;\n    this.changedCalculatedValues = true;\n  }\n  getType() {\n    return this.type;\n  }\n  refresh(cellCtrl) {\n    const oldCellComp = this.getCellCtrl();\n    const eGui = this.getGui();\n    const cellRange = _2.last(this.rangeService.getCellRanges());\n    const start = cellRange.startRow;\n    const end = cellRange.endRow;\n    if (start && end) {\n      const isBefore = this.rowPositionUtils.before(end, start);\n      if (isBefore) {\n        this.setRangeStartRow(end);\n        this.setRangeEndRow(start);\n      } else {\n        this.setRangeStartRow(start);\n        this.setRangeEndRow(end);\n      }\n    }\n    if (oldCellComp !== cellCtrl || !_2.isVisible(eGui)) {\n      this.setCellCtrl(cellCtrl);\n      const eParentOfValue = cellCtrl.getComp().getParentOfValue();\n      if (eParentOfValue) {\n        eParentOfValue.appendChild(eGui);\n      }\n    }\n    this.setCellRange(cellRange);\n  }\n  clearValues() {\n    this.lastCellHovered = void 0;\n    this.removeListeners();\n  }\n  removeListeners() {\n    if (this.cellHoverListener) {\n      this.cellHoverListener();\n      this.cellHoverListener = void 0;\n    }\n  }\n  destroy() {\n    if (!this.shouldDestroyOnEndDragging && this.isDragging()) {\n      _2.setDisplayed(this.getGui(), false);\n      this.shouldDestroyOnEndDragging = true;\n      return;\n    }\n    this.shouldDestroyOnEndDragging = false;\n    super.destroy();\n    this.removeListeners();\n    const eGui = this.getGui();\n    if (eGui.parentElement) {\n      eGui.parentElement.removeChild(eGui);\n    }\n  }\n};\n__decorateClass([\n  Autowired2(\"rowRenderer\")\n], AbstractSelectionHandle.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  Autowired2(\"dragService\")\n], AbstractSelectionHandle.prototype, \"dragService\", 2);\n__decorateClass([\n  Autowired2(\"rangeService\")\n], AbstractSelectionHandle.prototype, \"rangeService\", 2);\n__decorateClass([\n  Autowired2(\"mouseEventService\")\n], AbstractSelectionHandle.prototype, \"mouseEventService\", 2);\n__decorateClass([\n  Autowired2(\"columnModel\")\n], AbstractSelectionHandle.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired2(\"cellNavigationService\")\n], AbstractSelectionHandle.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  Autowired2(\"navigationService\")\n], AbstractSelectionHandle.prototype, \"navigationService\", 2);\n__decorateClass([\n  Autowired2(\"rowPositionUtils\")\n], AbstractSelectionHandle.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  Autowired2(\"cellPositionUtils\")\n], AbstractSelectionHandle.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  Autowired2(\"ctrlsService\")\n], AbstractSelectionHandle.prototype, \"ctrlsService\", 2);\n__decorateClass([\n  PostConstruct2\n], AbstractSelectionHandle.prototype, \"init\", 1);\n\n// enterprise-modules/range-selection/src/rangeSelection/utils.ts\nfunction findLineByLeastSquares(values) {\n  const len = values.length;\n  let maxDecimals = 0;\n  if (len <= 1) {\n    return values;\n  }\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    const splitExponent = value.toString().split(\"e-\");\n    if (splitExponent.length > 1) {\n      maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n      continue;\n    }\n    if (Math.floor(value) === value) {\n      continue;\n    }\n    maxDecimals = Math.max(maxDecimals, value.toString().split(\".\")[1].length);\n  }\n  let sum_x = 0;\n  let sum_y = 0;\n  let sum_xy = 0;\n  let sum_xx = 0;\n  let y = 0;\n  for (let x = 0; x < len; x++) {\n    y = values[x];\n    sum_x += x;\n    sum_y += y;\n    sum_xx += x * x;\n    sum_xy += x * y;\n  }\n  const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n  const b = sum_y / len - m * sum_x / len;\n  const result = [];\n  for (let x = 0; x <= len; x++) {\n    result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n  }\n  return result;\n}\n\n// enterprise-modules/range-selection/src/rangeSelection/fillHandle.ts\nvar _FillHandle = class _FillHandle extends AbstractSelectionHandle {\n  constructor() {\n    super(_FillHandle.TEMPLATE);\n    this.markedCells = [];\n    this.cellValues = [];\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n    this.type = SelectionHandleType2.FILL;\n  }\n  updateValuesOnMove(e) {\n    super.updateValuesOnMove(e);\n    if (!this.initialXY) {\n      this.initialXY = this.mouseEventService.getNormalisedPosition(e);\n    }\n    const { x, y } = this.initialXY;\n    const { x: newX, y: newY } = this.mouseEventService.getNormalisedPosition(e);\n    const diffX = Math.abs(x - newX);\n    const diffY = Math.abs(y - newY);\n    const allowedDirection = this.getFillHandleDirection();\n    let direction;\n    if (allowedDirection === \"xy\") {\n      direction = diffX > diffY ? \"x\" : \"y\";\n    } else {\n      direction = allowedDirection;\n    }\n    if (direction !== this.dragAxis) {\n      this.dragAxis = direction;\n      this.changedCalculatedValues = true;\n    }\n  }\n  onDrag(e) {\n    if (!this.initialPosition) {\n      const cellCtrl = this.getCellCtrl();\n      if (!cellCtrl) {\n        return;\n      }\n      this.initialPosition = cellCtrl.getCellPosition();\n    }\n    const lastCellHovered = this.getLastCellHovered();\n    if (lastCellHovered) {\n      this.markPathFrom(this.initialPosition, lastCellHovered);\n    }\n  }\n  onDragEnd(e) {\n    this.initialXY = null;\n    if (!this.markedCells.length) {\n      return;\n    }\n    const isX = this.dragAxis === \"x\";\n    const initialRange = this.getCellRange();\n    const colLen = initialRange.columns.length;\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    let finalRange;\n    if (!this.isUp && !this.isLeft) {\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: rangeStartRow.rowIndex,\n        rowStartPinned: rangeStartRow.rowPinned,\n        columnStart: initialRange.columns[0],\n        rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked.rowIndex,\n        rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked.rowPinned,\n        columnEnd: isX ? this.lastCellMarked.column : initialRange.columns[colLen - 1]\n      });\n    } else {\n      const startRow = isX ? rangeStartRow : this.lastCellMarked;\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: startRow.rowIndex,\n        rowStartPinned: startRow.rowPinned,\n        columnStart: isX ? this.lastCellMarked.column : initialRange.columns[0],\n        rowEndIndex: rangeEndRow.rowIndex,\n        rowEndPinned: rangeEndRow.rowPinned,\n        columnEnd: initialRange.columns[colLen - 1]\n      });\n    }\n    if (finalRange) {\n      this.raiseFillStartEvent();\n      this.handleValueChanged(initialRange, finalRange, e);\n      this.rangeService.setCellRanges([finalRange]);\n      this.raiseFillEndEvent(initialRange, finalRange);\n    }\n  }\n  getFillHandleDirection() {\n    const direction = this.gos.get(\"fillHandleDirection\");\n    if (!direction) {\n      return \"xy\";\n    }\n    if (direction !== \"x\" && direction !== \"y\" && direction !== \"xy\") {\n      _3.warnOnce(`valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`);\n      return \"xy\";\n    }\n    return direction;\n  }\n  raiseFillStartEvent() {\n    const fillStartEvent = {\n      type: Events2.EVENT_FILL_START\n    };\n    this.eventService.dispatchEvent(fillStartEvent);\n  }\n  raiseFillEndEvent(initialRange, finalRange) {\n    const fillEndEvent = {\n      type: Events2.EVENT_FILL_END,\n      initialRange,\n      finalRange\n    };\n    this.eventService.dispatchEvent(fillEndEvent);\n  }\n  handleValueChanged(initialRange, finalRange, e) {\n    const initialRangeEndRow = this.rangeService.getRangeEndRow(initialRange);\n    const initialRangeStartRow = this.rangeService.getRangeStartRow(initialRange);\n    const finalRangeEndRow = this.rangeService.getRangeEndRow(finalRange);\n    const finalRangeStartRow = this.rangeService.getRangeStartRow(finalRange);\n    const isVertical = this.dragAxis === \"y\";\n    if (this.isReduce && !this.gos.get(\"suppressClearOnFillReduction\")) {\n      const columns = isVertical ? initialRange.columns : initialRange.columns.filter((col) => finalRange.columns.indexOf(col) < 0);\n      const startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n      if (startRow) {\n        this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n      }\n      return;\n    }\n    const values = [];\n    const initialValues = [];\n    const initialNonAggregatedValues = [];\n    const initialFormattedValues = [];\n    let withinInitialRange = true;\n    let idx = 0;\n    const resetValues = () => {\n      values.length = 0;\n      initialValues.length = 0;\n      initialNonAggregatedValues.length = 0;\n      initialFormattedValues.length = 0;\n      idx = 0;\n    };\n    const iterateAcrossCells = (column, columns) => {\n      let currentRow = this.isUp ? initialRangeEndRow : initialRangeStartRow;\n      let finished = false;\n      if (isVertical) {\n        withinInitialRange = true;\n        resetValues();\n      }\n      while (!finished && currentRow) {\n        const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n        if (!rowNode) {\n          break;\n        }\n        if (isVertical && column) {\n          fillValues(values, column, rowNode, () => {\n            return !this.rowPositionUtils.sameRow(currentRow, this.isUp ? initialRangeStartRow : initialRangeEndRow);\n          });\n        } else if (columns) {\n          withinInitialRange = true;\n          resetValues();\n          columns.forEach((col) => fillValues(\n            values,\n            col,\n            rowNode,\n            () => col !== (this.isLeft ? initialRange.columns[0] : _3.last(initialRange.columns))\n          ));\n        }\n        finished = this.rowPositionUtils.sameRow(currentRow, this.isUp ? finalRangeStartRow : finalRangeEndRow);\n        currentRow = this.isUp ? this.cellNavigationService.getRowAbove(currentRow) : this.cellNavigationService.getRowBelow(currentRow);\n      }\n    };\n    const fillValues = (currentValues, col, rowNode, updateInitialSet) => {\n      var _a, _b;\n      let currentValue;\n      let skipValue = false;\n      if (withinInitialRange) {\n        currentValue = this.valueService.getValue(col, rowNode);\n        initialValues.push(currentValue);\n        initialNonAggregatedValues.push(this.valueService.getValue(col, rowNode, void 0, true));\n        initialFormattedValues.push(this.valueService.formatValue(col, rowNode, currentValue));\n        withinInitialRange = updateInitialSet();\n      } else {\n        const { value, fromUserFunction, sourceCol, sourceRowNode } = this.processValues({\n          event: e,\n          values: currentValues,\n          initialValues,\n          initialNonAggregatedValues,\n          initialFormattedValues,\n          col,\n          rowNode,\n          idx: idx++\n        });\n        currentValue = value;\n        if (col.isCellEditable(rowNode)) {\n          const cellValue = this.valueService.getValue(col, rowNode);\n          if (!fromUserFunction) {\n            if (sourceCol && ((_a = sourceCol.getColDef()) == null ? void 0 : _a.useValueFormatterForExport) !== false) {\n              currentValue = (_b = this.valueService.formatValue(sourceCol, sourceRowNode, currentValue)) != null ? _b : currentValue;\n            }\n            if (col.getColDef().useValueParserForImport !== false) {\n              currentValue = this.valueService.parseValue(\n                col,\n                rowNode,\n                // if no sourceCol, then currentValue is a number\n                sourceCol ? currentValue : _3.toStringOrNull(currentValue),\n                cellValue\n              );\n            }\n          }\n          if (!fromUserFunction || cellValue !== currentValue) {\n            rowNode.setDataValue(col, currentValue, \"rangeService\");\n          } else {\n            skipValue = true;\n          }\n        }\n      }\n      if (!skipValue) {\n        currentValues.push({\n          value: currentValue,\n          column: col,\n          rowNode\n        });\n      }\n    };\n    if (isVertical) {\n      initialRange.columns.forEach((col) => {\n        iterateAcrossCells(col);\n      });\n    } else {\n      const columns = this.isLeft ? [...finalRange.columns].reverse() : finalRange.columns;\n      iterateAcrossCells(void 0, columns);\n    }\n  }\n  clearCellsInRange(startRow, endRow, columns) {\n    const cellRange = {\n      startRow,\n      endRow,\n      columns,\n      startColumn: columns[0]\n    };\n    this.rangeService.clearCellRangeCellValues({ cellRanges: [cellRange] });\n  }\n  processValues(params) {\n    const { event, values, initialValues, initialNonAggregatedValues, initialFormattedValues, col, rowNode, idx } = params;\n    const userFillOperation = this.gos.getCallback(\"fillOperation\");\n    const isVertical = this.dragAxis === \"y\";\n    let direction;\n    if (isVertical) {\n      direction = this.isUp ? \"up\" : \"down\";\n    } else {\n      direction = this.isLeft ? \"left\" : \"right\";\n    }\n    if (userFillOperation) {\n      const params2 = {\n        event,\n        values: values.map(({ value }) => value),\n        initialValues,\n        initialNonAggregatedValues,\n        initialFormattedValues,\n        currentIndex: idx,\n        currentCellValue: this.valueService.getValue(col, rowNode),\n        direction,\n        column: col,\n        rowNode\n      };\n      const userResult = userFillOperation(params2);\n      if (userResult !== false) {\n        return { value: userResult, fromUserFunction: true };\n      }\n    }\n    const allNumbers = !values.some(({ value }) => {\n      const asFloat = parseFloat(value);\n      return isNaN(asFloat) || asFloat.toString() !== value.toString();\n    });\n    if (event.altKey || !allNumbers) {\n      if (allNumbers && initialValues.length === 1) {\n        const multiplier = this.isUp || this.isLeft ? -1 : 1;\n        return { value: parseFloat(_3.last(values).value) + 1 * multiplier, fromUserFunction: false };\n      }\n      const { value, column: sourceCol, rowNode: sourceRowNode } = values[idx % values.length];\n      return { value, fromUserFunction: false, sourceCol, sourceRowNode };\n    }\n    return { value: _3.last(findLineByLeastSquares(values.map(({ value }) => Number(value)))), fromUserFunction: false };\n  }\n  clearValues() {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    this.lastCellMarked = void 0;\n    super.clearValues();\n  }\n  clearMarkedPath() {\n    this.markedCells.forEach((cell) => {\n      if (!cell.isAlive()) {\n        return;\n      }\n      const comp = cell.getComp();\n      comp.addOrRemoveCssClass(\"ag-selection-fill-top\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-right\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-bottom\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-left\", false);\n    });\n    this.markedCells.length = 0;\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n  }\n  clearCellValues() {\n    this.cellValues.length = 0;\n  }\n  markPathFrom(initialPosition, currentPosition) {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    if (this.dragAxis === \"y\") {\n      if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {\n        return;\n      }\n      const isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n      const rangeStartRow = this.getRangeStartRow();\n      const rangeEndRow = this.getRangeEndRow();\n      if (isBefore && (currentPosition.rowPinned == rangeStartRow.rowPinned && currentPosition.rowIndex >= rangeStartRow.rowIndex || rangeStartRow.rowPinned != rangeEndRow.rowPinned && currentPosition.rowPinned == rangeEndRow.rowPinned && currentPosition.rowIndex <= rangeEndRow.rowIndex)) {\n        this.reduceVertical(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendVertical(initialPosition, currentPosition, isBefore);\n        this.isReduce = false;\n      }\n    } else {\n      const initialColumn = initialPosition.column;\n      const currentColumn = currentPosition.column;\n      if (initialColumn === currentColumn) {\n        return;\n      }\n      const displayedColumns = this.columnModel.getAllDisplayedColumns();\n      const initialIndex = displayedColumns.indexOf(initialColumn);\n      const currentIndex = displayedColumns.indexOf(currentColumn);\n      if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {\n        this.reduceHorizontal(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n        this.isReduce = false;\n      }\n    }\n    this.lastCellMarked = currentPosition;\n  }\n  extendVertical(initialPosition, endPosition, isMovingUp) {\n    const { navigationService, rangeService } = this;\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      for (let i = 0; i < colLen; i++) {\n        const column = cellRange.columns[i];\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const cellPos = __spreadProps(__spreadValues({}, rowPos), { column });\n        const cellInRange = rangeService.isCellInSpecificRange(cellPos, cellRange);\n        const isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n        if (isMovingUp) {\n          this.isUp = true;\n        }\n        if (!isInitialRow) {\n          const cell = navigationService.getCellByPosition(cellPos);\n          if (cell) {\n            this.markedCells.push(cell);\n            const cellCtrl = cell.getComp();\n            if (!cellInRange) {\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-left\", i === 0);\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-right\", i === colLen - 1);\n            }\n            cellCtrl.addOrRemoveCssClass(\n              isMovingUp ? \"ag-selection-fill-top\" : \"ag-selection-fill-bottom\",\n              this.rowPositionUtils.sameRow(row, endPosition)\n            );\n          }\n        }\n      }\n      if (this.rowPositionUtils.sameRow(row, endPosition)) {\n        break;\n      }\n    } while (\n      // tslint:disable-next-line\n      row = isMovingUp ? this.cellNavigationService.getRowAbove(row) : this.cellNavigationService.getRowBelow(row)\n    );\n  }\n  reduceVertical(initialPosition, endPosition) {\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      const isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n      for (let i = 0; i < colLen; i++) {\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const celPos = __spreadProps(__spreadValues({}, rowPos), { column: cellRange.columns[i] });\n        const cell = this.navigationService.getCellByPosition(celPos);\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\n            \"ag-selection-fill-bottom\",\n            this.rowPositionUtils.sameRow(row, endPosition)\n          );\n        }\n      }\n      if (isLastRow) {\n        break;\n      }\n    } while (row = this.cellNavigationService.getRowAbove(row));\n  }\n  extendHorizontal(initialPosition, endPosition, isMovingLeft) {\n    const allCols = this.columnModel.getAllDisplayedColumns();\n    const startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);\n    const endCol = allCols.indexOf(isMovingLeft ? this.getCellRange().columns[0] : endPosition.column);\n    const offset = isMovingLeft ? 0 : 1;\n    const colsToMark = allCols.slice(startCol + offset, endCol + offset);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-top\", this.rowPositionUtils.sameRow(row, rangeStartRow));\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-bottom\", this.rowPositionUtils.sameRow(row, rangeEndRow));\n          if (isMovingLeft) {\n            this.isLeft = true;\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-left\", column === colsToMark[0]);\n          } else {\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === _3.last(colsToMark));\n          }\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  reduceHorizontal(initialPosition, endPosition) {\n    const allCols = this.columnModel.getAllDisplayedColumns();\n    const startCol = allCols.indexOf(endPosition.column);\n    const endCol = allCols.indexOf(initialPosition.column);\n    const colsToMark = allCols.slice(startCol, endCol);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === colsToMark[0]);\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  refresh(cellCtrl) {\n    const cellRange = this.rangeService.getCellRanges()[0];\n    const isColumnRange = !cellRange.startRow || !cellRange.endRow;\n    if (isColumnRange) {\n      this.destroy();\n      return;\n    }\n    super.refresh(cellCtrl);\n  }\n};\n_FillHandle.TEMPLATE = /* html */\n`<div class=\"ag-fill-handle\"></div>`;\n__decorateClass([\n  Autowired3(\"valueService\")\n], _FillHandle.prototype, \"valueService\", 2);\nvar FillHandle = _FillHandle;\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeHandle.ts\nimport {\n  CellRangeType,\n  SelectionHandleType as SelectionHandleType3,\n  _ as _4\n} from \"@ag-grid-community/core\";\nvar _RangeHandle = class _RangeHandle extends AbstractSelectionHandle {\n  constructor() {\n    super(_RangeHandle.TEMPLATE);\n    this.type = SelectionHandleType3.RANGE;\n    this.rangeFixed = false;\n  }\n  onDrag(e) {\n    const lastCellHovered = this.getLastCellHovered();\n    if (!lastCellHovered) {\n      return;\n    }\n    const cellRanges = this.rangeService.getCellRanges();\n    const lastRange = _4.last(cellRanges);\n    if (!this.rangeFixed) {\n      this.fixRangeStartEnd(lastRange);\n      this.rangeFixed = true;\n    }\n    this.endPosition = {\n      rowIndex: lastCellHovered.rowIndex,\n      rowPinned: lastCellHovered.rowPinned,\n      column: lastCellHovered.column\n    };\n    if (cellRanges.length === 2 && cellRanges[0].type === CellRangeType.DIMENSION && lastRange.type === CellRangeType.VALUE) {\n      const rowChanged = !this.rowPositionUtils.sameRow(this.endPosition, this.rangeService.getRangeEndRow(lastRange));\n      if (rowChanged) {\n        this.rangeService.updateRangeEnd(\n          cellRanges[0],\n          __spreadProps(__spreadValues({}, this.endPosition), {\n            column: cellRanges[0].columns[0]\n          }),\n          true\n        );\n      }\n    }\n    this.rangeService.extendLatestRangeToCell(this.endPosition);\n  }\n  onDragEnd(e) {\n    const cellRange = _4.last(this.rangeService.getCellRanges());\n    this.fixRangeStartEnd(cellRange);\n    this.rangeFixed = false;\n  }\n  fixRangeStartEnd(cellRange) {\n    const startRow = this.rangeService.getRangeStartRow(cellRange);\n    const endRow = this.rangeService.getRangeEndRow(cellRange);\n    const column = cellRange.columns[0];\n    cellRange.startRow = startRow;\n    cellRange.endRow = endRow;\n    cellRange.startColumn = column;\n  }\n};\n_RangeHandle.TEMPLATE = /* html */\n`<div class=\"ag-range-handle\"></div>`;\nvar RangeHandle = _RangeHandle;\n\n// enterprise-modules/range-selection/src/rangeSelection/selectionHandleFactory.ts\nimport { Bean as Bean2, BeanStub as BeanStub2, SelectionHandleType as SelectionHandleType4 } from \"@ag-grid-community/core\";\nvar SelectionHandleFactory = class extends BeanStub2 {\n  createSelectionHandle(type) {\n    return this.createBean(type === SelectionHandleType4.RANGE ? new RangeHandle() : new FillHandle());\n  }\n};\nSelectionHandleFactory = __decorateClass([\n  Bean2(\"selectionHandleFactory\")\n], SelectionHandleFactory);\n\n// enterprise-modules/range-selection/src/version.ts\nvar VERSION = \"31.3.2\";\n\n// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nvar RangeSelectionModule = {\n  version: VERSION,\n  moduleName: ModuleNames.RangeSelectionModule,\n  beans: [RangeService, SelectionHandleFactory],\n  agStackComponents: [\n    { componentName: \"AgFillHandle\", componentClass: FillHandle },\n    { componentName: \"AgRangeHandle\", componentClass: RangeHandle }\n  ],\n  dependantModules: [\n    EnterpriseCoreModule\n  ]\n};\nexport {\n  RangeSelectionModule\n};\n"],
  "mappings": "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",
  "names": ["_FillHandle", "_RangeHandle"]
}
