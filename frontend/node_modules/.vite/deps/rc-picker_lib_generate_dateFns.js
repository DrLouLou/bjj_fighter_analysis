import {
  __commonJS,
  __publicField
} from "./chunk-WXXH56N5.js";

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/date-fns/toDate.js
var require_toDate = __commonJS({
  "node_modules/date-fns/toDate.js"(exports) {
    "use strict";
    exports.toDate = toDate;
    function toDate(argument) {
      const argStr = Object.prototype.toString.call(argument);
      if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
        return new argument.constructor(+argument);
      } else if (typeof argument === "number" || argStr === "[object Number]" || typeof argument === "string" || argStr === "[object String]") {
        return new Date(argument);
      } else {
        return /* @__PURE__ */ new Date(NaN);
      }
    }
  }
});

// node_modules/date-fns/constructFrom.js
var require_constructFrom = __commonJS({
  "node_modules/date-fns/constructFrom.js"(exports) {
    "use strict";
    exports.constructFrom = constructFrom;
    function constructFrom(date, value) {
      if (date instanceof Date) {
        return new date.constructor(value);
      } else {
        return new Date(value);
      }
    }
  }
});

// node_modules/date-fns/addDays.js
var require_addDays = __commonJS({
  "node_modules/date-fns/addDays.js"(exports) {
    "use strict";
    exports.addDays = addDays;
    var _index = require_toDate();
    var _index2 = require_constructFrom();
    function addDays(date, amount) {
      const _date = (0, _index.toDate)(date);
      if (isNaN(amount))
        return (0, _index2.constructFrom)(date, NaN);
      if (!amount) {
        return _date;
      }
      _date.setDate(_date.getDate() + amount);
      return _date;
    }
  }
});

// node_modules/date-fns/addMonths.js
var require_addMonths = __commonJS({
  "node_modules/date-fns/addMonths.js"(exports) {
    "use strict";
    exports.addMonths = addMonths;
    var _index = require_toDate();
    var _index2 = require_constructFrom();
    function addMonths(date, amount) {
      const _date = (0, _index.toDate)(date);
      if (isNaN(amount))
        return (0, _index2.constructFrom)(date, NaN);
      if (!amount) {
        return _date;
      }
      const dayOfMonth = _date.getDate();
      const endOfDesiredMonth = (0, _index2.constructFrom)(date, _date.getTime());
      endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
      const daysInMonth = endOfDesiredMonth.getDate();
      if (dayOfMonth >= daysInMonth) {
        return endOfDesiredMonth;
      } else {
        _date.setFullYear(
          endOfDesiredMonth.getFullYear(),
          endOfDesiredMonth.getMonth(),
          dayOfMonth
        );
        return _date;
      }
    }
  }
});

// node_modules/date-fns/add.js
var require_add = __commonJS({
  "node_modules/date-fns/add.js"(exports) {
    "use strict";
    exports.add = add;
    var _index = require_addDays();
    var _index2 = require_addMonths();
    var _index3 = require_constructFrom();
    var _index4 = require_toDate();
    function add(date, duration) {
      const {
        years = 0,
        months = 0,
        weeks = 0,
        days = 0,
        hours = 0,
        minutes = 0,
        seconds = 0
      } = duration;
      const _date = (0, _index4.toDate)(date);
      const dateWithMonths = months || years ? (0, _index2.addMonths)(_date, months + years * 12) : _date;
      const dateWithDays = days || weeks ? (0, _index.addDays)(dateWithMonths, days + weeks * 7) : dateWithMonths;
      const minutesToAdd = minutes + hours * 60;
      const secondsToAdd = seconds + minutesToAdd * 60;
      const msToAdd = secondsToAdd * 1e3;
      const finalDate = (0, _index3.constructFrom)(
        date,
        dateWithDays.getTime() + msToAdd
      );
      return finalDate;
    }
  }
});

// node_modules/date-fns/isSaturday.js
var require_isSaturday = __commonJS({
  "node_modules/date-fns/isSaturday.js"(exports) {
    "use strict";
    exports.isSaturday = isSaturday;
    var _index = require_toDate();
    function isSaturday(date) {
      return (0, _index.toDate)(date).getDay() === 6;
    }
  }
});

// node_modules/date-fns/isSunday.js
var require_isSunday = __commonJS({
  "node_modules/date-fns/isSunday.js"(exports) {
    "use strict";
    exports.isSunday = isSunday;
    var _index = require_toDate();
    function isSunday(date) {
      return (0, _index.toDate)(date).getDay() === 0;
    }
  }
});

// node_modules/date-fns/isWeekend.js
var require_isWeekend = __commonJS({
  "node_modules/date-fns/isWeekend.js"(exports) {
    "use strict";
    exports.isWeekend = isWeekend;
    var _index = require_toDate();
    function isWeekend(date) {
      const day = (0, _index.toDate)(date).getDay();
      return day === 0 || day === 6;
    }
  }
});

// node_modules/date-fns/addBusinessDays.js
var require_addBusinessDays = __commonJS({
  "node_modules/date-fns/addBusinessDays.js"(exports) {
    "use strict";
    exports.addBusinessDays = addBusinessDays;
    var _index = require_constructFrom();
    var _index2 = require_isSaturday();
    var _index3 = require_isSunday();
    var _index4 = require_isWeekend();
    var _index5 = require_toDate();
    function addBusinessDays(date, amount) {
      const _date = (0, _index5.toDate)(date);
      const startedOnWeekend = (0, _index4.isWeekend)(_date);
      if (isNaN(amount))
        return (0, _index.constructFrom)(date, NaN);
      const hours = _date.getHours();
      const sign = amount < 0 ? -1 : 1;
      const fullWeeks = Math.trunc(amount / 5);
      _date.setDate(_date.getDate() + fullWeeks * 7);
      let restDays = Math.abs(amount % 5);
      while (restDays > 0) {
        _date.setDate(_date.getDate() + sign);
        if (!(0, _index4.isWeekend)(_date))
          restDays -= 1;
      }
      if (startedOnWeekend && (0, _index4.isWeekend)(_date) && amount !== 0) {
        if ((0, _index2.isSaturday)(_date))
          _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));
        if ((0, _index3.isSunday)(_date))
          _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));
      }
      _date.setHours(hours);
      return _date;
    }
  }
});

// node_modules/date-fns/addMilliseconds.js
var require_addMilliseconds = __commonJS({
  "node_modules/date-fns/addMilliseconds.js"(exports) {
    "use strict";
    exports.addMilliseconds = addMilliseconds;
    var _index = require_toDate();
    var _index2 = require_constructFrom();
    function addMilliseconds(date, amount) {
      const timestamp = +(0, _index.toDate)(date);
      return (0, _index2.constructFrom)(date, timestamp + amount);
    }
  }
});

// node_modules/date-fns/constants.js
var require_constants = __commonJS({
  "node_modules/date-fns/constants.js"(exports) {
    "use strict";
    exports.secondsInYear = exports.secondsInWeek = exports.secondsInQuarter = exports.secondsInMonth = exports.secondsInMinute = exports.secondsInHour = exports.secondsInDay = exports.quartersInYear = exports.monthsInYear = exports.monthsInQuarter = exports.minutesInYear = exports.minutesInMonth = exports.minutesInHour = exports.minutesInDay = exports.minTime = exports.millisecondsInWeek = exports.millisecondsInSecond = exports.millisecondsInMinute = exports.millisecondsInHour = exports.millisecondsInDay = exports.maxTime = exports.daysInYear = exports.daysInWeek = void 0;
    var daysInWeek = exports.daysInWeek = 7;
    var daysInYear = exports.daysInYear = 365.2425;
    var maxTime = exports.maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
    var minTime = exports.minTime = -maxTime;
    var millisecondsInWeek = exports.millisecondsInWeek = 6048e5;
    var millisecondsInDay = exports.millisecondsInDay = 864e5;
    var millisecondsInMinute = exports.millisecondsInMinute = 6e4;
    var millisecondsInHour = exports.millisecondsInHour = 36e5;
    var millisecondsInSecond = exports.millisecondsInSecond = 1e3;
    var minutesInYear = exports.minutesInYear = 525600;
    var minutesInMonth = exports.minutesInMonth = 43200;
    var minutesInDay = exports.minutesInDay = 1440;
    var minutesInHour = exports.minutesInHour = 60;
    var monthsInQuarter = exports.monthsInQuarter = 3;
    var monthsInYear = exports.monthsInYear = 12;
    var quartersInYear = exports.quartersInYear = 4;
    var secondsInHour = exports.secondsInHour = 3600;
    var secondsInMinute = exports.secondsInMinute = 60;
    var secondsInDay = exports.secondsInDay = secondsInHour * 24;
    var secondsInWeek = exports.secondsInWeek = secondsInDay * 7;
    var secondsInYear = exports.secondsInYear = secondsInDay * daysInYear;
    var secondsInMonth = exports.secondsInMonth = secondsInYear / 12;
    var secondsInQuarter = exports.secondsInQuarter = secondsInMonth * 3;
  }
});

// node_modules/date-fns/addHours.js
var require_addHours = __commonJS({
  "node_modules/date-fns/addHours.js"(exports) {
    "use strict";
    exports.addHours = addHours;
    var _index = require_addMilliseconds();
    var _index2 = require_constants();
    function addHours(date, amount) {
      return (0, _index.addMilliseconds)(date, amount * _index2.millisecondsInHour);
    }
  }
});

// node_modules/date-fns/_lib/defaultOptions.js
var require_defaultOptions = __commonJS({
  "node_modules/date-fns/_lib/defaultOptions.js"(exports) {
    "use strict";
    exports.getDefaultOptions = getDefaultOptions;
    exports.setDefaultOptions = setDefaultOptions;
    var defaultOptions = {};
    function getDefaultOptions() {
      return defaultOptions;
    }
    function setDefaultOptions(newOptions) {
      defaultOptions = newOptions;
    }
  }
});

// node_modules/date-fns/startOfWeek.js
var require_startOfWeek = __commonJS({
  "node_modules/date-fns/startOfWeek.js"(exports) {
    "use strict";
    exports.startOfWeek = startOfWeek;
    var _index = require_toDate();
    var _index2 = require_defaultOptions();
    function startOfWeek(date, options) {
      var _a, _b, _c, _d;
      const defaultOptions = (0, _index2.getDefaultOptions)();
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
      const _date = (0, _index.toDate)(date);
      const day = _date.getDay();
      const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      _date.setDate(_date.getDate() - diff);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/startOfISOWeek.js
var require_startOfISOWeek = __commonJS({
  "node_modules/date-fns/startOfISOWeek.js"(exports) {
    "use strict";
    exports.startOfISOWeek = startOfISOWeek;
    var _index = require_startOfWeek();
    function startOfISOWeek(date) {
      return (0, _index.startOfWeek)(date, { weekStartsOn: 1 });
    }
  }
});

// node_modules/date-fns/getISOWeekYear.js
var require_getISOWeekYear = __commonJS({
  "node_modules/date-fns/getISOWeekYear.js"(exports) {
    "use strict";
    exports.getISOWeekYear = getISOWeekYear;
    var _index = require_constructFrom();
    var _index2 = require_startOfISOWeek();
    var _index3 = require_toDate();
    function getISOWeekYear(date) {
      const _date = (0, _index3.toDate)(date);
      const year = _date.getFullYear();
      const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(date, 0);
      fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
      const startOfNextYear = (0, _index2.startOfISOWeek)(
        fourthOfJanuaryOfNextYear
      );
      const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(date, 0);
      fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
      const startOfThisYear = (0, _index2.startOfISOWeek)(
        fourthOfJanuaryOfThisYear
      );
      if (_date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (_date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
  }
});

// node_modules/date-fns/startOfDay.js
var require_startOfDay = __commonJS({
  "node_modules/date-fns/startOfDay.js"(exports) {
    "use strict";
    exports.startOfDay = startOfDay;
    var _index = require_toDate();
    function startOfDay(date) {
      const _date = (0, _index.toDate)(date);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js
var require_getTimezoneOffsetInMilliseconds = __commonJS({
  "node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js"(exports) {
    "use strict";
    exports.getTimezoneOffsetInMilliseconds = getTimezoneOffsetInMilliseconds;
    var _index = require_toDate();
    function getTimezoneOffsetInMilliseconds(date) {
      const _date = (0, _index.toDate)(date);
      const utcDate = new Date(
        Date.UTC(
          _date.getFullYear(),
          _date.getMonth(),
          _date.getDate(),
          _date.getHours(),
          _date.getMinutes(),
          _date.getSeconds(),
          _date.getMilliseconds()
        )
      );
      utcDate.setUTCFullYear(_date.getFullYear());
      return +date - +utcDate;
    }
  }
});

// node_modules/date-fns/differenceInCalendarDays.js
var require_differenceInCalendarDays = __commonJS({
  "node_modules/date-fns/differenceInCalendarDays.js"(exports) {
    "use strict";
    exports.differenceInCalendarDays = differenceInCalendarDays;
    var _index = require_constants();
    var _index2 = require_startOfDay();
    var _index3 = require_getTimezoneOffsetInMilliseconds();
    function differenceInCalendarDays(dateLeft, dateRight) {
      const startOfDayLeft = (0, _index2.startOfDay)(dateLeft);
      const startOfDayRight = (0, _index2.startOfDay)(dateRight);
      const timestampLeft = +startOfDayLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayLeft);
      const timestampRight = +startOfDayRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayRight);
      return Math.round(
        (timestampLeft - timestampRight) / _index.millisecondsInDay
      );
    }
  }
});

// node_modules/date-fns/startOfISOWeekYear.js
var require_startOfISOWeekYear = __commonJS({
  "node_modules/date-fns/startOfISOWeekYear.js"(exports) {
    "use strict";
    exports.startOfISOWeekYear = startOfISOWeekYear;
    var _index = require_getISOWeekYear();
    var _index2 = require_startOfISOWeek();
    var _index3 = require_constructFrom();
    function startOfISOWeekYear(date) {
      const year = (0, _index.getISOWeekYear)(date);
      const fourthOfJanuary = (0, _index3.constructFrom)(date, 0);
      fourthOfJanuary.setFullYear(year, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      return (0, _index2.startOfISOWeek)(fourthOfJanuary);
    }
  }
});

// node_modules/date-fns/setISOWeekYear.js
var require_setISOWeekYear = __commonJS({
  "node_modules/date-fns/setISOWeekYear.js"(exports) {
    "use strict";
    exports.setISOWeekYear = setISOWeekYear;
    var _index = require_constructFrom();
    var _index2 = require_differenceInCalendarDays();
    var _index3 = require_startOfISOWeekYear();
    var _index4 = require_toDate();
    function setISOWeekYear(date, weekYear) {
      let _date = (0, _index4.toDate)(date);
      const diff = (0, _index2.differenceInCalendarDays)(
        _date,
        (0, _index3.startOfISOWeekYear)(_date)
      );
      const fourthOfJanuary = (0, _index.constructFrom)(date, 0);
      fourthOfJanuary.setFullYear(weekYear, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      _date = (0, _index3.startOfISOWeekYear)(fourthOfJanuary);
      _date.setDate(_date.getDate() + diff);
      return _date;
    }
  }
});

// node_modules/date-fns/addISOWeekYears.js
var require_addISOWeekYears = __commonJS({
  "node_modules/date-fns/addISOWeekYears.js"(exports) {
    "use strict";
    exports.addISOWeekYears = addISOWeekYears;
    var _index = require_getISOWeekYear();
    var _index2 = require_setISOWeekYear();
    function addISOWeekYears(date, amount) {
      return (0, _index2.setISOWeekYear)(
        date,
        (0, _index.getISOWeekYear)(date) + amount
      );
    }
  }
});

// node_modules/date-fns/addMinutes.js
var require_addMinutes = __commonJS({
  "node_modules/date-fns/addMinutes.js"(exports) {
    "use strict";
    exports.addMinutes = addMinutes;
    var _index = require_addMilliseconds();
    var _index2 = require_constants();
    function addMinutes(date, amount) {
      return (0, _index.addMilliseconds)(
        date,
        amount * _index2.millisecondsInMinute
      );
    }
  }
});

// node_modules/date-fns/addQuarters.js
var require_addQuarters = __commonJS({
  "node_modules/date-fns/addQuarters.js"(exports) {
    "use strict";
    exports.addQuarters = addQuarters;
    var _index = require_addMonths();
    function addQuarters(date, amount) {
      const months = amount * 3;
      return (0, _index.addMonths)(date, months);
    }
  }
});

// node_modules/date-fns/addSeconds.js
var require_addSeconds = __commonJS({
  "node_modules/date-fns/addSeconds.js"(exports) {
    "use strict";
    exports.addSeconds = addSeconds;
    var _index = require_addMilliseconds();
    function addSeconds(date, amount) {
      return (0, _index.addMilliseconds)(date, amount * 1e3);
    }
  }
});

// node_modules/date-fns/addWeeks.js
var require_addWeeks = __commonJS({
  "node_modules/date-fns/addWeeks.js"(exports) {
    "use strict";
    exports.addWeeks = addWeeks;
    var _index = require_addDays();
    function addWeeks(date, amount) {
      const days = amount * 7;
      return (0, _index.addDays)(date, days);
    }
  }
});

// node_modules/date-fns/addYears.js
var require_addYears = __commonJS({
  "node_modules/date-fns/addYears.js"(exports) {
    "use strict";
    exports.addYears = addYears;
    var _index = require_addMonths();
    function addYears(date, amount) {
      return (0, _index.addMonths)(date, amount * 12);
    }
  }
});

// node_modules/date-fns/areIntervalsOverlapping.js
var require_areIntervalsOverlapping = __commonJS({
  "node_modules/date-fns/areIntervalsOverlapping.js"(exports) {
    "use strict";
    exports.areIntervalsOverlapping = areIntervalsOverlapping;
    var _index = require_toDate();
    function areIntervalsOverlapping(intervalLeft, intervalRight, options) {
      const [leftStartTime, leftEndTime] = [
        +(0, _index.toDate)(intervalLeft.start),
        +(0, _index.toDate)(intervalLeft.end)
      ].sort((a, b) => a - b);
      const [rightStartTime, rightEndTime] = [
        +(0, _index.toDate)(intervalRight.start),
        +(0, _index.toDate)(intervalRight.end)
      ].sort((a, b) => a - b);
      if (options == null ? void 0 : options.inclusive)
        return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;
      return leftStartTime < rightEndTime && rightStartTime < leftEndTime;
    }
  }
});

// node_modules/date-fns/max.js
var require_max = __commonJS({
  "node_modules/date-fns/max.js"(exports) {
    "use strict";
    exports.max = max;
    var _index = require_toDate();
    function max(dates) {
      let result;
      dates.forEach(function(dirtyDate) {
        const currentDate = (0, _index.toDate)(dirtyDate);
        if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
          result = currentDate;
        }
      });
      return result || /* @__PURE__ */ new Date(NaN);
    }
  }
});

// node_modules/date-fns/min.js
var require_min = __commonJS({
  "node_modules/date-fns/min.js"(exports) {
    "use strict";
    exports.min = min;
    var _index = require_toDate();
    function min(dates) {
      let result;
      dates.forEach((dirtyDate) => {
        const date = (0, _index.toDate)(dirtyDate);
        if (!result || result > date || isNaN(+date)) {
          result = date;
        }
      });
      return result || /* @__PURE__ */ new Date(NaN);
    }
  }
});

// node_modules/date-fns/clamp.js
var require_clamp = __commonJS({
  "node_modules/date-fns/clamp.js"(exports) {
    "use strict";
    exports.clamp = clamp;
    var _index = require_max();
    var _index2 = require_min();
    function clamp(date, interval) {
      return (0, _index2.min)([
        (0, _index.max)([date, interval.start]),
        interval.end
      ]);
    }
  }
});

// node_modules/date-fns/closestIndexTo.js
var require_closestIndexTo = __commonJS({
  "node_modules/date-fns/closestIndexTo.js"(exports) {
    "use strict";
    exports.closestIndexTo = closestIndexTo;
    var _index = require_toDate();
    function closestIndexTo(dateToCompare, dates) {
      const date = (0, _index.toDate)(dateToCompare);
      if (isNaN(Number(date)))
        return NaN;
      const timeToCompare = date.getTime();
      let result;
      let minDistance;
      dates.forEach(function(dirtyDate, index) {
        const currentDate = (0, _index.toDate)(dirtyDate);
        if (isNaN(Number(currentDate))) {
          result = NaN;
          minDistance = NaN;
          return;
        }
        const distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < minDistance) {
          result = index;
          minDistance = distance;
        }
      });
      return result;
    }
  }
});

// node_modules/date-fns/closestTo.js
var require_closestTo = __commonJS({
  "node_modules/date-fns/closestTo.js"(exports) {
    "use strict";
    exports.closestTo = closestTo;
    var _index = require_constructFrom();
    var _index2 = require_toDate();
    function closestTo(dateToCompare, dates) {
      const date = (0, _index2.toDate)(dateToCompare);
      if (isNaN(Number(date)))
        return (0, _index.constructFrom)(dateToCompare, NaN);
      const timeToCompare = date.getTime();
      let result;
      let minDistance;
      dates.forEach((dirtyDate) => {
        const currentDate = (0, _index2.toDate)(dirtyDate);
        if (isNaN(Number(currentDate))) {
          result = (0, _index.constructFrom)(dateToCompare, NaN);
          minDistance = NaN;
          return;
        }
        const distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < minDistance) {
          result = currentDate;
          minDistance = distance;
        }
      });
      return result;
    }
  }
});

// node_modules/date-fns/compareAsc.js
var require_compareAsc = __commonJS({
  "node_modules/date-fns/compareAsc.js"(exports) {
    "use strict";
    exports.compareAsc = compareAsc;
    var _index = require_toDate();
    function compareAsc(dateLeft, dateRight) {
      const _dateLeft = (0, _index.toDate)(dateLeft);
      const _dateRight = (0, _index.toDate)(dateRight);
      const diff = _dateLeft.getTime() - _dateRight.getTime();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
      } else {
        return diff;
      }
    }
  }
});

// node_modules/date-fns/compareDesc.js
var require_compareDesc = __commonJS({
  "node_modules/date-fns/compareDesc.js"(exports) {
    "use strict";
    exports.compareDesc = compareDesc;
    var _index = require_toDate();
    function compareDesc(dateLeft, dateRight) {
      const _dateLeft = (0, _index.toDate)(dateLeft);
      const _dateRight = (0, _index.toDate)(dateRight);
      const diff = _dateLeft.getTime() - _dateRight.getTime();
      if (diff > 0) {
        return -1;
      } else if (diff < 0) {
        return 1;
      } else {
        return diff;
      }
    }
  }
});

// node_modules/date-fns/constructNow.js
var require_constructNow = __commonJS({
  "node_modules/date-fns/constructNow.js"(exports) {
    "use strict";
    exports.constructNow = constructNow;
    var _index = require_constructFrom();
    function constructNow(date) {
      return (0, _index.constructFrom)(date, Date.now());
    }
  }
});

// node_modules/date-fns/daysToWeeks.js
var require_daysToWeeks = __commonJS({
  "node_modules/date-fns/daysToWeeks.js"(exports) {
    "use strict";
    exports.daysToWeeks = daysToWeeks;
    var _index = require_constants();
    function daysToWeeks(days) {
      const weeks = days / _index.daysInWeek;
      const result = Math.trunc(weeks);
      return result === 0 ? 0 : result;
    }
  }
});

// node_modules/date-fns/isSameDay.js
var require_isSameDay = __commonJS({
  "node_modules/date-fns/isSameDay.js"(exports) {
    "use strict";
    exports.isSameDay = isSameDay;
    var _index = require_startOfDay();
    function isSameDay(dateLeft, dateRight) {
      const dateLeftStartOfDay = (0, _index.startOfDay)(dateLeft);
      const dateRightStartOfDay = (0, _index.startOfDay)(dateRight);
      return +dateLeftStartOfDay === +dateRightStartOfDay;
    }
  }
});

// node_modules/date-fns/isDate.js
var require_isDate = __commonJS({
  "node_modules/date-fns/isDate.js"(exports) {
    "use strict";
    exports.isDate = isDate;
    function isDate(value) {
      return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
    }
  }
});

// node_modules/date-fns/isValid.js
var require_isValid = __commonJS({
  "node_modules/date-fns/isValid.js"(exports) {
    "use strict";
    exports.isValid = isValid;
    var _index = require_isDate();
    var _index2 = require_toDate();
    function isValid(date) {
      if (!(0, _index.isDate)(date) && typeof date !== "number") {
        return false;
      }
      const _date = (0, _index2.toDate)(date);
      return !isNaN(Number(_date));
    }
  }
});

// node_modules/date-fns/differenceInBusinessDays.js
var require_differenceInBusinessDays = __commonJS({
  "node_modules/date-fns/differenceInBusinessDays.js"(exports) {
    "use strict";
    exports.differenceInBusinessDays = differenceInBusinessDays;
    var _index = require_addDays();
    var _index2 = require_differenceInCalendarDays();
    var _index3 = require_isSameDay();
    var _index4 = require_isValid();
    var _index5 = require_isWeekend();
    var _index6 = require_toDate();
    function differenceInBusinessDays(dateLeft, dateRight) {
      const _dateLeft = (0, _index6.toDate)(dateLeft);
      let _dateRight = (0, _index6.toDate)(dateRight);
      if (!(0, _index4.isValid)(_dateLeft) || !(0, _index4.isValid)(_dateRight))
        return NaN;
      const calendarDifference = (0, _index2.differenceInCalendarDays)(
        _dateLeft,
        _dateRight
      );
      const sign = calendarDifference < 0 ? -1 : 1;
      const weeks = Math.trunc(calendarDifference / 7);
      let result = weeks * 5;
      _dateRight = (0, _index.addDays)(_dateRight, weeks * 7);
      while (!(0, _index3.isSameDay)(_dateLeft, _dateRight)) {
        result += (0, _index5.isWeekend)(_dateRight) ? 0 : sign;
        _dateRight = (0, _index.addDays)(_dateRight, sign);
      }
      return result === 0 ? 0 : result;
    }
  }
});

// node_modules/date-fns/differenceInCalendarISOWeekYears.js
var require_differenceInCalendarISOWeekYears = __commonJS({
  "node_modules/date-fns/differenceInCalendarISOWeekYears.js"(exports) {
    "use strict";
    exports.differenceInCalendarISOWeekYears = differenceInCalendarISOWeekYears;
    var _index = require_getISOWeekYear();
    function differenceInCalendarISOWeekYears(dateLeft, dateRight) {
      return (0, _index.getISOWeekYear)(dateLeft) - (0, _index.getISOWeekYear)(dateRight);
    }
  }
});

// node_modules/date-fns/differenceInCalendarISOWeeks.js
var require_differenceInCalendarISOWeeks = __commonJS({
  "node_modules/date-fns/differenceInCalendarISOWeeks.js"(exports) {
    "use strict";
    exports.differenceInCalendarISOWeeks = differenceInCalendarISOWeeks;
    var _index = require_constants();
    var _index2 = require_startOfISOWeek();
    var _index3 = require_getTimezoneOffsetInMilliseconds();
    function differenceInCalendarISOWeeks(dateLeft, dateRight) {
      const startOfISOWeekLeft = (0, _index2.startOfISOWeek)(dateLeft);
      const startOfISOWeekRight = (0, _index2.startOfISOWeek)(dateRight);
      const timestampLeft = +startOfISOWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekLeft);
      const timestampRight = +startOfISOWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekRight);
      return Math.round(
        (timestampLeft - timestampRight) / _index.millisecondsInWeek
      );
    }
  }
});

// node_modules/date-fns/differenceInCalendarMonths.js
var require_differenceInCalendarMonths = __commonJS({
  "node_modules/date-fns/differenceInCalendarMonths.js"(exports) {
    "use strict";
    exports.differenceInCalendarMonths = differenceInCalendarMonths;
    var _index = require_toDate();
    function differenceInCalendarMonths(dateLeft, dateRight) {
      const _dateLeft = (0, _index.toDate)(dateLeft);
      const _dateRight = (0, _index.toDate)(dateRight);
      const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();
      const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();
      return yearDiff * 12 + monthDiff;
    }
  }
});

// node_modules/date-fns/getQuarter.js
var require_getQuarter = __commonJS({
  "node_modules/date-fns/getQuarter.js"(exports) {
    "use strict";
    exports.getQuarter = getQuarter;
    var _index = require_toDate();
    function getQuarter(date) {
      const _date = (0, _index.toDate)(date);
      const quarter = Math.trunc(_date.getMonth() / 3) + 1;
      return quarter;
    }
  }
});

// node_modules/date-fns/differenceInCalendarQuarters.js
var require_differenceInCalendarQuarters = __commonJS({
  "node_modules/date-fns/differenceInCalendarQuarters.js"(exports) {
    "use strict";
    exports.differenceInCalendarQuarters = differenceInCalendarQuarters;
    var _index = require_getQuarter();
    var _index2 = require_toDate();
    function differenceInCalendarQuarters(dateLeft, dateRight) {
      const _dateLeft = (0, _index2.toDate)(dateLeft);
      const _dateRight = (0, _index2.toDate)(dateRight);
      const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();
      const quarterDiff = (0, _index.getQuarter)(_dateLeft) - (0, _index.getQuarter)(_dateRight);
      return yearDiff * 4 + quarterDiff;
    }
  }
});

// node_modules/date-fns/differenceInCalendarWeeks.js
var require_differenceInCalendarWeeks = __commonJS({
  "node_modules/date-fns/differenceInCalendarWeeks.js"(exports) {
    "use strict";
    exports.differenceInCalendarWeeks = differenceInCalendarWeeks;
    var _index = require_constants();
    var _index2 = require_startOfWeek();
    var _index3 = require_getTimezoneOffsetInMilliseconds();
    function differenceInCalendarWeeks(dateLeft, dateRight, options) {
      const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);
      const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);
      const timestampLeft = +startOfWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);
      const timestampRight = +startOfWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight);
      return Math.round(
        (timestampLeft - timestampRight) / _index.millisecondsInWeek
      );
    }
  }
});

// node_modules/date-fns/differenceInCalendarYears.js
var require_differenceInCalendarYears = __commonJS({
  "node_modules/date-fns/differenceInCalendarYears.js"(exports) {
    "use strict";
    exports.differenceInCalendarYears = differenceInCalendarYears;
    var _index = require_toDate();
    function differenceInCalendarYears(dateLeft, dateRight) {
      const _dateLeft = (0, _index.toDate)(dateLeft);
      const _dateRight = (0, _index.toDate)(dateRight);
      return _dateLeft.getFullYear() - _dateRight.getFullYear();
    }
  }
});

// node_modules/date-fns/differenceInDays.js
var require_differenceInDays = __commonJS({
  "node_modules/date-fns/differenceInDays.js"(exports) {
    "use strict";
    exports.differenceInDays = differenceInDays;
    var _index = require_differenceInCalendarDays();
    var _index2 = require_toDate();
    function differenceInDays(dateLeft, dateRight) {
      const _dateLeft = (0, _index2.toDate)(dateLeft);
      const _dateRight = (0, _index2.toDate)(dateRight);
      const sign = compareLocalAsc(_dateLeft, _dateRight);
      const difference = Math.abs(
        (0, _index.differenceInCalendarDays)(_dateLeft, _dateRight)
      );
      _dateLeft.setDate(_dateLeft.getDate() - sign * difference);
      const isLastDayNotFull = Number(
        compareLocalAsc(_dateLeft, _dateRight) === -sign
      );
      const result = sign * (difference - isLastDayNotFull);
      return result === 0 ? 0 : result;
    }
    function compareLocalAsc(dateLeft, dateRight) {
      const diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
      if (diff < 0) {
        return -1;
      } else if (diff > 0) {
        return 1;
      } else {
        return diff;
      }
    }
  }
});

// node_modules/date-fns/_lib/getRoundingMethod.js
var require_getRoundingMethod = __commonJS({
  "node_modules/date-fns/_lib/getRoundingMethod.js"(exports) {
    "use strict";
    exports.getRoundingMethod = getRoundingMethod;
    function getRoundingMethod(method) {
      return (number) => {
        const round = method ? Math[method] : Math.trunc;
        const result = round(number);
        return result === 0 ? 0 : result;
      };
    }
  }
});

// node_modules/date-fns/differenceInMilliseconds.js
var require_differenceInMilliseconds = __commonJS({
  "node_modules/date-fns/differenceInMilliseconds.js"(exports) {
    "use strict";
    exports.differenceInMilliseconds = differenceInMilliseconds;
    var _index = require_toDate();
    function differenceInMilliseconds(dateLeft, dateRight) {
      return +(0, _index.toDate)(dateLeft) - +(0, _index.toDate)(dateRight);
    }
  }
});

// node_modules/date-fns/differenceInHours.js
var require_differenceInHours = __commonJS({
  "node_modules/date-fns/differenceInHours.js"(exports) {
    "use strict";
    exports.differenceInHours = differenceInHours;
    var _index = require_getRoundingMethod();
    var _index2 = require_constants();
    var _index3 = require_differenceInMilliseconds();
    function differenceInHours(dateLeft, dateRight, options) {
      const diff = (0, _index3.differenceInMilliseconds)(dateLeft, dateRight) / _index2.millisecondsInHour;
      return (0, _index.getRoundingMethod)(options == null ? void 0 : options.roundingMethod)(diff);
    }
  }
});

// node_modules/date-fns/subISOWeekYears.js
var require_subISOWeekYears = __commonJS({
  "node_modules/date-fns/subISOWeekYears.js"(exports) {
    "use strict";
    exports.subISOWeekYears = subISOWeekYears;
    var _index = require_addISOWeekYears();
    function subISOWeekYears(date, amount) {
      return (0, _index.addISOWeekYears)(date, -amount);
    }
  }
});

// node_modules/date-fns/differenceInISOWeekYears.js
var require_differenceInISOWeekYears = __commonJS({
  "node_modules/date-fns/differenceInISOWeekYears.js"(exports) {
    "use strict";
    exports.differenceInISOWeekYears = differenceInISOWeekYears;
    var _index = require_compareAsc();
    var _index2 = require_differenceInCalendarISOWeekYears();
    var _index3 = require_subISOWeekYears();
    var _index4 = require_toDate();
    function differenceInISOWeekYears(dateLeft, dateRight) {
      let _dateLeft = (0, _index4.toDate)(dateLeft);
      const _dateRight = (0, _index4.toDate)(dateRight);
      const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);
      const difference = Math.abs(
        (0, _index2.differenceInCalendarISOWeekYears)(_dateLeft, _dateRight)
      );
      _dateLeft = (0, _index3.subISOWeekYears)(_dateLeft, sign * difference);
      const isLastISOWeekYearNotFull = Number(
        (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign
      );
      const result = sign * (difference - isLastISOWeekYearNotFull);
      return result === 0 ? 0 : result;
    }
  }
});

// node_modules/date-fns/differenceInMinutes.js
var require_differenceInMinutes = __commonJS({
  "node_modules/date-fns/differenceInMinutes.js"(exports) {
    "use strict";
    exports.differenceInMinutes = differenceInMinutes;
    var _index = require_getRoundingMethod();
    var _index2 = require_constants();
    var _index3 = require_differenceInMilliseconds();
    function differenceInMinutes(dateLeft, dateRight, options) {
      const diff = (0, _index3.differenceInMilliseconds)(dateLeft, dateRight) / _index2.millisecondsInMinute;
      return (0, _index.getRoundingMethod)(options == null ? void 0 : options.roundingMethod)(diff);
    }
  }
});

// node_modules/date-fns/endOfDay.js
var require_endOfDay = __commonJS({
  "node_modules/date-fns/endOfDay.js"(exports) {
    "use strict";
    exports.endOfDay = endOfDay;
    var _index = require_toDate();
    function endOfDay(date) {
      const _date = (0, _index.toDate)(date);
      _date.setHours(23, 59, 59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfMonth.js
var require_endOfMonth = __commonJS({
  "node_modules/date-fns/endOfMonth.js"(exports) {
    "use strict";
    exports.endOfMonth = endOfMonth;
    var _index = require_toDate();
    function endOfMonth(date) {
      const _date = (0, _index.toDate)(date);
      const month = _date.getMonth();
      _date.setFullYear(_date.getFullYear(), month + 1, 0);
      _date.setHours(23, 59, 59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/isLastDayOfMonth.js
var require_isLastDayOfMonth = __commonJS({
  "node_modules/date-fns/isLastDayOfMonth.js"(exports) {
    "use strict";
    exports.isLastDayOfMonth = isLastDayOfMonth;
    var _index = require_endOfDay();
    var _index2 = require_endOfMonth();
    var _index3 = require_toDate();
    function isLastDayOfMonth(date) {
      const _date = (0, _index3.toDate)(date);
      return +(0, _index.endOfDay)(_date) === +(0, _index2.endOfMonth)(_date);
    }
  }
});

// node_modules/date-fns/differenceInMonths.js
var require_differenceInMonths = __commonJS({
  "node_modules/date-fns/differenceInMonths.js"(exports) {
    "use strict";
    exports.differenceInMonths = differenceInMonths;
    var _index = require_compareAsc();
    var _index2 = require_differenceInCalendarMonths();
    var _index3 = require_isLastDayOfMonth();
    var _index4 = require_toDate();
    function differenceInMonths(dateLeft, dateRight) {
      const _dateLeft = (0, _index4.toDate)(dateLeft);
      const _dateRight = (0, _index4.toDate)(dateRight);
      const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);
      const difference = Math.abs(
        (0, _index2.differenceInCalendarMonths)(_dateLeft, _dateRight)
      );
      let result;
      if (difference < 1) {
        result = 0;
      } else {
        if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {
          _dateLeft.setDate(30);
        }
        _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);
        let isLastMonthNotFull = (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;
        if ((0, _index3.isLastDayOfMonth)((0, _index4.toDate)(dateLeft)) && difference === 1 && (0, _index.compareAsc)(dateLeft, _dateRight) === 1) {
          isLastMonthNotFull = false;
        }
        result = sign * (difference - Number(isLastMonthNotFull));
      }
      return result === 0 ? 0 : result;
    }
  }
});

// node_modules/date-fns/differenceInQuarters.js
var require_differenceInQuarters = __commonJS({
  "node_modules/date-fns/differenceInQuarters.js"(exports) {
    "use strict";
    exports.differenceInQuarters = differenceInQuarters;
    var _index = require_getRoundingMethod();
    var _index2 = require_differenceInMonths();
    function differenceInQuarters(dateLeft, dateRight, options) {
      const diff = (0, _index2.differenceInMonths)(dateLeft, dateRight) / 3;
      return (0, _index.getRoundingMethod)(options == null ? void 0 : options.roundingMethod)(diff);
    }
  }
});

// node_modules/date-fns/differenceInSeconds.js
var require_differenceInSeconds = __commonJS({
  "node_modules/date-fns/differenceInSeconds.js"(exports) {
    "use strict";
    exports.differenceInSeconds = differenceInSeconds;
    var _index = require_getRoundingMethod();
    var _index2 = require_differenceInMilliseconds();
    function differenceInSeconds(dateLeft, dateRight, options) {
      const diff = (0, _index2.differenceInMilliseconds)(dateLeft, dateRight) / 1e3;
      return (0, _index.getRoundingMethod)(options == null ? void 0 : options.roundingMethod)(diff);
    }
  }
});

// node_modules/date-fns/differenceInWeeks.js
var require_differenceInWeeks = __commonJS({
  "node_modules/date-fns/differenceInWeeks.js"(exports) {
    "use strict";
    exports.differenceInWeeks = differenceInWeeks;
    var _index = require_getRoundingMethod();
    var _index2 = require_differenceInDays();
    function differenceInWeeks(dateLeft, dateRight, options) {
      const diff = (0, _index2.differenceInDays)(dateLeft, dateRight) / 7;
      return (0, _index.getRoundingMethod)(options == null ? void 0 : options.roundingMethod)(diff);
    }
  }
});

// node_modules/date-fns/differenceInYears.js
var require_differenceInYears = __commonJS({
  "node_modules/date-fns/differenceInYears.js"(exports) {
    "use strict";
    exports.differenceInYears = differenceInYears;
    var _index = require_compareAsc();
    var _index2 = require_differenceInCalendarYears();
    var _index3 = require_toDate();
    function differenceInYears(dateLeft, dateRight) {
      const _dateLeft = (0, _index3.toDate)(dateLeft);
      const _dateRight = (0, _index3.toDate)(dateRight);
      const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);
      const difference = Math.abs(
        (0, _index2.differenceInCalendarYears)(_dateLeft, _dateRight)
      );
      _dateLeft.setFullYear(1584);
      _dateRight.setFullYear(1584);
      const isLastYearNotFull = (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;
      const result = sign * (difference - +isLastYearNotFull);
      return result === 0 ? 0 : result;
    }
  }
});

// node_modules/date-fns/eachDayOfInterval.js
var require_eachDayOfInterval = __commonJS({
  "node_modules/date-fns/eachDayOfInterval.js"(exports) {
    "use strict";
    exports.eachDayOfInterval = eachDayOfInterval;
    var _index = require_toDate();
    function eachDayOfInterval(interval, options) {
      const startDate = (0, _index.toDate)(interval.start);
      const endDate = (0, _index.toDate)(interval.end);
      let reversed = +startDate > +endDate;
      const endTime = reversed ? +startDate : +endDate;
      const currentDate = reversed ? endDate : startDate;
      currentDate.setHours(0, 0, 0, 0);
      let step = (options == null ? void 0 : options.step) ?? 1;
      if (!step)
        return [];
      if (step < 0) {
        step = -step;
        reversed = !reversed;
      }
      const dates = [];
      while (+currentDate <= endTime) {
        dates.push((0, _index.toDate)(currentDate));
        currentDate.setDate(currentDate.getDate() + step);
        currentDate.setHours(0, 0, 0, 0);
      }
      return reversed ? dates.reverse() : dates;
    }
  }
});

// node_modules/date-fns/eachHourOfInterval.js
var require_eachHourOfInterval = __commonJS({
  "node_modules/date-fns/eachHourOfInterval.js"(exports) {
    "use strict";
    exports.eachHourOfInterval = eachHourOfInterval;
    var _index = require_addHours();
    var _index2 = require_toDate();
    function eachHourOfInterval(interval, options) {
      const startDate = (0, _index2.toDate)(interval.start);
      const endDate = (0, _index2.toDate)(interval.end);
      let reversed = +startDate > +endDate;
      const endTime = reversed ? +startDate : +endDate;
      let currentDate = reversed ? endDate : startDate;
      currentDate.setMinutes(0, 0, 0);
      let step = (options == null ? void 0 : options.step) ?? 1;
      if (!step)
        return [];
      if (step < 0) {
        step = -step;
        reversed = !reversed;
      }
      const dates = [];
      while (+currentDate <= endTime) {
        dates.push((0, _index2.toDate)(currentDate));
        currentDate = (0, _index.addHours)(currentDate, step);
      }
      return reversed ? dates.reverse() : dates;
    }
  }
});

// node_modules/date-fns/startOfMinute.js
var require_startOfMinute = __commonJS({
  "node_modules/date-fns/startOfMinute.js"(exports) {
    "use strict";
    exports.startOfMinute = startOfMinute;
    var _index = require_toDate();
    function startOfMinute(date) {
      const _date = (0, _index.toDate)(date);
      _date.setSeconds(0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/eachMinuteOfInterval.js
var require_eachMinuteOfInterval = __commonJS({
  "node_modules/date-fns/eachMinuteOfInterval.js"(exports) {
    "use strict";
    exports.eachMinuteOfInterval = eachMinuteOfInterval;
    var _index = require_addMinutes();
    var _index2 = require_startOfMinute();
    var _index3 = require_toDate();
    function eachMinuteOfInterval(interval, options) {
      const startDate = (0, _index2.startOfMinute)(
        (0, _index3.toDate)(interval.start)
      );
      const endDate = (0, _index3.toDate)(interval.end);
      let reversed = +startDate > +endDate;
      const endTime = reversed ? +startDate : +endDate;
      let currentDate = reversed ? endDate : startDate;
      let step = (options == null ? void 0 : options.step) ?? 1;
      if (!step)
        return [];
      if (step < 0) {
        step = -step;
        reversed = !reversed;
      }
      const dates = [];
      while (+currentDate <= endTime) {
        dates.push((0, _index3.toDate)(currentDate));
        currentDate = (0, _index.addMinutes)(currentDate, step);
      }
      return reversed ? dates.reverse() : dates;
    }
  }
});

// node_modules/date-fns/eachMonthOfInterval.js
var require_eachMonthOfInterval = __commonJS({
  "node_modules/date-fns/eachMonthOfInterval.js"(exports) {
    "use strict";
    exports.eachMonthOfInterval = eachMonthOfInterval;
    var _index = require_toDate();
    function eachMonthOfInterval(interval, options) {
      const startDate = (0, _index.toDate)(interval.start);
      const endDate = (0, _index.toDate)(interval.end);
      let reversed = +startDate > +endDate;
      const endTime = reversed ? +startDate : +endDate;
      const currentDate = reversed ? endDate : startDate;
      currentDate.setHours(0, 0, 0, 0);
      currentDate.setDate(1);
      let step = (options == null ? void 0 : options.step) ?? 1;
      if (!step)
        return [];
      if (step < 0) {
        step = -step;
        reversed = !reversed;
      }
      const dates = [];
      while (+currentDate <= endTime) {
        dates.push((0, _index.toDate)(currentDate));
        currentDate.setMonth(currentDate.getMonth() + step);
      }
      return reversed ? dates.reverse() : dates;
    }
  }
});

// node_modules/date-fns/startOfQuarter.js
var require_startOfQuarter = __commonJS({
  "node_modules/date-fns/startOfQuarter.js"(exports) {
    "use strict";
    exports.startOfQuarter = startOfQuarter;
    var _index = require_toDate();
    function startOfQuarter(date) {
      const _date = (0, _index.toDate)(date);
      const currentMonth = _date.getMonth();
      const month = currentMonth - currentMonth % 3;
      _date.setMonth(month, 1);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/eachQuarterOfInterval.js
var require_eachQuarterOfInterval = __commonJS({
  "node_modules/date-fns/eachQuarterOfInterval.js"(exports) {
    "use strict";
    exports.eachQuarterOfInterval = eachQuarterOfInterval;
    var _index = require_addQuarters();
    var _index2 = require_startOfQuarter();
    var _index3 = require_toDate();
    function eachQuarterOfInterval(interval, options) {
      const startDate = (0, _index3.toDate)(interval.start);
      const endDate = (0, _index3.toDate)(interval.end);
      let reversed = +startDate > +endDate;
      const endTime = reversed ? +(0, _index2.startOfQuarter)(startDate) : +(0, _index2.startOfQuarter)(endDate);
      let currentDate = reversed ? (0, _index2.startOfQuarter)(endDate) : (0, _index2.startOfQuarter)(startDate);
      let step = (options == null ? void 0 : options.step) ?? 1;
      if (!step)
        return [];
      if (step < 0) {
        step = -step;
        reversed = !reversed;
      }
      const dates = [];
      while (+currentDate <= endTime) {
        dates.push((0, _index3.toDate)(currentDate));
        currentDate = (0, _index.addQuarters)(currentDate, step);
      }
      return reversed ? dates.reverse() : dates;
    }
  }
});

// node_modules/date-fns/eachWeekOfInterval.js
var require_eachWeekOfInterval = __commonJS({
  "node_modules/date-fns/eachWeekOfInterval.js"(exports) {
    "use strict";
    exports.eachWeekOfInterval = eachWeekOfInterval;
    var _index = require_addWeeks();
    var _index2 = require_startOfWeek();
    var _index3 = require_toDate();
    function eachWeekOfInterval(interval, options) {
      const startDate = (0, _index3.toDate)(interval.start);
      const endDate = (0, _index3.toDate)(interval.end);
      let reversed = +startDate > +endDate;
      const startDateWeek = reversed ? (0, _index2.startOfWeek)(endDate, options) : (0, _index2.startOfWeek)(startDate, options);
      const endDateWeek = reversed ? (0, _index2.startOfWeek)(startDate, options) : (0, _index2.startOfWeek)(endDate, options);
      startDateWeek.setHours(15);
      endDateWeek.setHours(15);
      const endTime = +endDateWeek.getTime();
      let currentDate = startDateWeek;
      let step = (options == null ? void 0 : options.step) ?? 1;
      if (!step)
        return [];
      if (step < 0) {
        step = -step;
        reversed = !reversed;
      }
      const dates = [];
      while (+currentDate <= endTime) {
        currentDate.setHours(0);
        dates.push((0, _index3.toDate)(currentDate));
        currentDate = (0, _index.addWeeks)(currentDate, step);
        currentDate.setHours(15);
      }
      return reversed ? dates.reverse() : dates;
    }
  }
});

// node_modules/date-fns/eachWeekendOfInterval.js
var require_eachWeekendOfInterval = __commonJS({
  "node_modules/date-fns/eachWeekendOfInterval.js"(exports) {
    "use strict";
    exports.eachWeekendOfInterval = eachWeekendOfInterval;
    var _index = require_eachDayOfInterval();
    var _index2 = require_isWeekend();
    function eachWeekendOfInterval(interval) {
      const dateInterval = (0, _index.eachDayOfInterval)(interval);
      const weekends = [];
      let index = 0;
      while (index < dateInterval.length) {
        const date = dateInterval[index++];
        if ((0, _index2.isWeekend)(date))
          weekends.push(date);
      }
      return weekends;
    }
  }
});

// node_modules/date-fns/startOfMonth.js
var require_startOfMonth = __commonJS({
  "node_modules/date-fns/startOfMonth.js"(exports) {
    "use strict";
    exports.startOfMonth = startOfMonth;
    var _index = require_toDate();
    function startOfMonth(date) {
      const _date = (0, _index.toDate)(date);
      _date.setDate(1);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/eachWeekendOfMonth.js
var require_eachWeekendOfMonth = __commonJS({
  "node_modules/date-fns/eachWeekendOfMonth.js"(exports) {
    "use strict";
    exports.eachWeekendOfMonth = eachWeekendOfMonth;
    var _index = require_eachWeekendOfInterval();
    var _index2 = require_endOfMonth();
    var _index3 = require_startOfMonth();
    function eachWeekendOfMonth(date) {
      const start = (0, _index3.startOfMonth)(date);
      const end = (0, _index2.endOfMonth)(date);
      return (0, _index.eachWeekendOfInterval)({ start, end });
    }
  }
});

// node_modules/date-fns/endOfYear.js
var require_endOfYear = __commonJS({
  "node_modules/date-fns/endOfYear.js"(exports) {
    "use strict";
    exports.endOfYear = endOfYear;
    var _index = require_toDate();
    function endOfYear(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      _date.setFullYear(year + 1, 0, 0);
      _date.setHours(23, 59, 59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/startOfYear.js
var require_startOfYear = __commonJS({
  "node_modules/date-fns/startOfYear.js"(exports) {
    "use strict";
    exports.startOfYear = startOfYear;
    var _index = require_toDate();
    var _index2 = require_constructFrom();
    function startOfYear(date) {
      const cleanDate = (0, _index.toDate)(date);
      const _date = (0, _index2.constructFrom)(date, 0);
      _date.setFullYear(cleanDate.getFullYear(), 0, 1);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/eachWeekendOfYear.js
var require_eachWeekendOfYear = __commonJS({
  "node_modules/date-fns/eachWeekendOfYear.js"(exports) {
    "use strict";
    exports.eachWeekendOfYear = eachWeekendOfYear;
    var _index = require_eachWeekendOfInterval();
    var _index2 = require_endOfYear();
    var _index3 = require_startOfYear();
    function eachWeekendOfYear(date) {
      const start = (0, _index3.startOfYear)(date);
      const end = (0, _index2.endOfYear)(date);
      return (0, _index.eachWeekendOfInterval)({ start, end });
    }
  }
});

// node_modules/date-fns/eachYearOfInterval.js
var require_eachYearOfInterval = __commonJS({
  "node_modules/date-fns/eachYearOfInterval.js"(exports) {
    "use strict";
    exports.eachYearOfInterval = eachYearOfInterval;
    var _index = require_toDate();
    function eachYearOfInterval(interval, options) {
      const startDate = (0, _index.toDate)(interval.start);
      const endDate = (0, _index.toDate)(interval.end);
      let reversed = +startDate > +endDate;
      const endTime = reversed ? +startDate : +endDate;
      const currentDate = reversed ? endDate : startDate;
      currentDate.setHours(0, 0, 0, 0);
      currentDate.setMonth(0, 1);
      let step = (options == null ? void 0 : options.step) ?? 1;
      if (!step)
        return [];
      if (step < 0) {
        step = -step;
        reversed = !reversed;
      }
      const dates = [];
      while (+currentDate <= endTime) {
        dates.push((0, _index.toDate)(currentDate));
        currentDate.setFullYear(currentDate.getFullYear() + step);
      }
      return reversed ? dates.reverse() : dates;
    }
  }
});

// node_modules/date-fns/endOfDecade.js
var require_endOfDecade = __commonJS({
  "node_modules/date-fns/endOfDecade.js"(exports) {
    "use strict";
    exports.endOfDecade = endOfDecade;
    var _index = require_toDate();
    function endOfDecade(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      const decade = 9 + Math.floor(year / 10) * 10;
      _date.setFullYear(decade, 11, 31);
      _date.setHours(23, 59, 59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfHour.js
var require_endOfHour = __commonJS({
  "node_modules/date-fns/endOfHour.js"(exports) {
    "use strict";
    exports.endOfHour = endOfHour;
    var _index = require_toDate();
    function endOfHour(date) {
      const _date = (0, _index.toDate)(date);
      _date.setMinutes(59, 59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfWeek.js
var require_endOfWeek = __commonJS({
  "node_modules/date-fns/endOfWeek.js"(exports) {
    "use strict";
    exports.endOfWeek = endOfWeek;
    var _index = require_toDate();
    var _index2 = require_defaultOptions();
    function endOfWeek(date, options) {
      var _a, _b, _c, _d;
      const defaultOptions = (0, _index2.getDefaultOptions)();
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
      const _date = (0, _index.toDate)(date);
      const day = _date.getDay();
      const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
      _date.setDate(_date.getDate() + diff);
      _date.setHours(23, 59, 59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfISOWeek.js
var require_endOfISOWeek = __commonJS({
  "node_modules/date-fns/endOfISOWeek.js"(exports) {
    "use strict";
    exports.endOfISOWeek = endOfISOWeek;
    var _index = require_endOfWeek();
    function endOfISOWeek(date) {
      return (0, _index.endOfWeek)(date, { weekStartsOn: 1 });
    }
  }
});

// node_modules/date-fns/endOfISOWeekYear.js
var require_endOfISOWeekYear = __commonJS({
  "node_modules/date-fns/endOfISOWeekYear.js"(exports) {
    "use strict";
    exports.endOfISOWeekYear = endOfISOWeekYear;
    var _index = require_getISOWeekYear();
    var _index2 = require_startOfISOWeek();
    var _index3 = require_constructFrom();
    function endOfISOWeekYear(date) {
      const year = (0, _index.getISOWeekYear)(date);
      const fourthOfJanuaryOfNextYear = (0, _index3.constructFrom)(date, 0);
      fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
      const _date = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfNextYear);
      _date.setMilliseconds(_date.getMilliseconds() - 1);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfMinute.js
var require_endOfMinute = __commonJS({
  "node_modules/date-fns/endOfMinute.js"(exports) {
    "use strict";
    exports.endOfMinute = endOfMinute;
    var _index = require_toDate();
    function endOfMinute(date) {
      const _date = (0, _index.toDate)(date);
      _date.setSeconds(59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfQuarter.js
var require_endOfQuarter = __commonJS({
  "node_modules/date-fns/endOfQuarter.js"(exports) {
    "use strict";
    exports.endOfQuarter = endOfQuarter;
    var _index = require_toDate();
    function endOfQuarter(date) {
      const _date = (0, _index.toDate)(date);
      const currentMonth = _date.getMonth();
      const month = currentMonth - currentMonth % 3 + 3;
      _date.setMonth(month, 0);
      _date.setHours(23, 59, 59, 999);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfSecond.js
var require_endOfSecond = __commonJS({
  "node_modules/date-fns/endOfSecond.js"(exports) {
    "use strict";
    exports.endOfSecond = endOfSecond;
    var _index = require_toDate();
    function endOfSecond(date) {
      const _date = (0, _index.toDate)(date);
      _date.setMilliseconds(999);
      return _date;
    }
  }
});

// node_modules/date-fns/endOfToday.js
var require_endOfToday = __commonJS({
  "node_modules/date-fns/endOfToday.js"(exports) {
    "use strict";
    exports.endOfToday = endOfToday;
    var _index = require_endOfDay();
    function endOfToday() {
      return (0, _index.endOfDay)(Date.now());
    }
  }
});

// node_modules/date-fns/endOfTomorrow.js
var require_endOfTomorrow = __commonJS({
  "node_modules/date-fns/endOfTomorrow.js"(exports) {
    "use strict";
    exports.endOfTomorrow = endOfTomorrow;
    function endOfTomorrow() {
      const now = /* @__PURE__ */ new Date();
      const year = now.getFullYear();
      const month = now.getMonth();
      const day = now.getDate();
      const date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day + 1);
      date.setHours(23, 59, 59, 999);
      return date;
    }
  }
});

// node_modules/date-fns/endOfYesterday.js
var require_endOfYesterday = __commonJS({
  "node_modules/date-fns/endOfYesterday.js"(exports) {
    "use strict";
    exports.endOfYesterday = endOfYesterday;
    function endOfYesterday() {
      const now = /* @__PURE__ */ new Date();
      const year = now.getFullYear();
      const month = now.getMonth();
      const day = now.getDate();
      const date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day - 1);
      date.setHours(23, 59, 59, 999);
      return date;
    }
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatDistance.js
var require_formatDistance = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
      },
      xSeconds: {
        one: "1 second",
        other: "{{count}} seconds"
      },
      halfAMinute: "half a minute",
      lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
      },
      xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "about 1 hour",
        other: "about {{count}} hours"
      },
      xHours: {
        one: "1 hour",
        other: "{{count}} hours"
      },
      xDays: {
        one: "1 day",
        other: "{{count}} days"
      },
      aboutXWeeks: {
        one: "about 1 week",
        other: "about {{count}} weeks"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weeks"
      },
      aboutXMonths: {
        one: "about 1 month",
        other: "about {{count}} months"
      },
      xMonths: {
        one: "1 month",
        other: "{{count}} months"
      },
      aboutXYears: {
        one: "about 1 year",
        other: "about {{count}} years"
      },
      xYears: {
        one: "1 year",
        other: "{{count}} years"
      },
      overXYears: {
        one: "over 1 year",
        other: "over {{count}} years"
      },
      almostXYears: {
        one: "almost 1 year",
        other: "almost {{count}} years"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "in " + result;
        } else {
          return result + " ago";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/_lib/buildFormatLongFn.js
var require_buildFormatLongFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildFormatLongFn.js"(exports) {
    "use strict";
    exports.buildFormatLongFn = buildFormatLongFn;
    function buildFormatLongFn(args) {
      return (options = {}) => {
        const width = options.width ? String(options.width) : args.defaultWidth;
        const format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatLong.js
var require_formatLong = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/en-US/_lib/formatRelative.js
var require_formatRelative = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/_lib/buildLocalizeFn.js
var require_buildLocalizeFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildLocalizeFn.js"(exports) {
    "use strict";
    exports.buildLocalizeFn = buildLocalizeFn;
    function buildLocalizeFn(args) {
      return (value, options) => {
        const context = (options == null ? void 0 : options.context) ? String(options.context) : "standalone";
        let valuesArray;
        if (context === "formatting" && args.formattingValues) {
          const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          const width = (options == null ? void 0 : options.width) ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          const defaultWidth = args.defaultWidth;
          const width = (options == null ? void 0 : options.width) ? String(options.width) : args.defaultWidth;
          valuesArray = args.values[width] || args.values[defaultWidth];
        }
        const index = args.argumentCallback ? args.argumentCallback(value) : value;
        return valuesArray[index];
      };
    }
  }
});

// node_modules/date-fns/locale/en-US/_lib/localize.js
var require_localize = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["B", "A"],
      abbreviated: ["BC", "AD"],
      wide: ["Before Christ", "Anno Domini"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ],
      wide: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "W", "T", "F", "S"],
      short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      wide: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      const rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + "st";
          case 2:
            return number + "nd";
          case 3:
            return number + "rd";
        }
      }
      return number + "th";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/_lib/buildMatchFn.js
var require_buildMatchFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchFn.js"(exports) {
    "use strict";
    exports.buildMatchFn = buildMatchFn;
    function buildMatchFn(args) {
      return (string, options = {}) => {
        const width = options.width;
        const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        const matchResult = string.match(matchPattern);
        if (!matchResult) {
          return null;
        }
        const matchedString = matchResult[0];
        const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString)) : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
          findKey(parsePatterns, (pattern) => pattern.test(matchedString))
        );
        let value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
          options.valueCallback(value)
        ) : value;
        const rest = string.slice(matchedString.length);
        return { value, rest };
      };
    }
    function findKey(object, predicate) {
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
          return key;
        }
      }
      return void 0;
    }
    function findIndex(array, predicate) {
      for (let key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }
      return void 0;
    }
  }
});

// node_modules/date-fns/locale/_lib/buildMatchPatternFn.js
var require_buildMatchPatternFn = __commonJS({
  "node_modules/date-fns/locale/_lib/buildMatchPatternFn.js"(exports) {
    "use strict";
    exports.buildMatchPatternFn = buildMatchPatternFn;
    function buildMatchPatternFn(args) {
      return (string, options = {}) => {
        const matchResult = string.match(args.matchPattern);
        if (!matchResult)
          return null;
        const matchedString = matchResult[0];
        const parseResult = string.match(args.parsePattern);
        if (!parseResult)
          return null;
        let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        const rest = string.slice(matchedString.length);
        return { value, rest };
      };
    }
  }
});

// node_modules/date-fns/locale/en-US/_lib/match.js
var require_match = __commonJS({
  "node_modules/date-fns/locale/en-US/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^may/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/en-US.js
var require_en_US = __commonJS({
  "node_modules/date-fns/locale/en-US.js"(exports) {
    "use strict";
    exports.enUS = void 0;
    var _index = require_formatDistance();
    var _index2 = require_formatLong();
    var _index3 = require_formatRelative();
    var _index4 = require_localize();
    var _index5 = require_match();
    var enUS = exports.enUS = {
      code: "en-US",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/_lib/defaultLocale.js
var require_defaultLocale = __commonJS({
  "node_modules/date-fns/_lib/defaultLocale.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "defaultLocale", {
      enumerable: true,
      get: function() {
        return _index.enUS;
      }
    });
    var _index = require_en_US();
  }
});

// node_modules/date-fns/getDayOfYear.js
var require_getDayOfYear = __commonJS({
  "node_modules/date-fns/getDayOfYear.js"(exports) {
    "use strict";
    exports.getDayOfYear = getDayOfYear;
    var _index = require_differenceInCalendarDays();
    var _index2 = require_startOfYear();
    var _index3 = require_toDate();
    function getDayOfYear(date) {
      const _date = (0, _index3.toDate)(date);
      const diff = (0, _index.differenceInCalendarDays)(
        _date,
        (0, _index2.startOfYear)(_date)
      );
      const dayOfYear = diff + 1;
      return dayOfYear;
    }
  }
});

// node_modules/date-fns/getISOWeek.js
var require_getISOWeek = __commonJS({
  "node_modules/date-fns/getISOWeek.js"(exports) {
    "use strict";
    exports.getISOWeek = getISOWeek;
    var _index = require_constants();
    var _index2 = require_startOfISOWeek();
    var _index3 = require_startOfISOWeekYear();
    var _index4 = require_toDate();
    function getISOWeek(date) {
      const _date = (0, _index4.toDate)(date);
      const diff = +(0, _index2.startOfISOWeek)(_date) - +(0, _index3.startOfISOWeekYear)(_date);
      return Math.round(diff / _index.millisecondsInWeek) + 1;
    }
  }
});

// node_modules/date-fns/getWeekYear.js
var require_getWeekYear = __commonJS({
  "node_modules/date-fns/getWeekYear.js"(exports) {
    "use strict";
    exports.getWeekYear = getWeekYear;
    var _index = require_constructFrom();
    var _index2 = require_startOfWeek();
    var _index3 = require_toDate();
    var _index4 = require_defaultOptions();
    function getWeekYear(date, options) {
      var _a, _b, _c, _d;
      const _date = (0, _index3.toDate)(date);
      const year = _date.getFullYear();
      const defaultOptions = (0, _index4.getDefaultOptions)();
      const firstWeekContainsDate = (options == null ? void 0 : options.firstWeekContainsDate) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? defaultOptions.firstWeekContainsDate ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) ?? 1;
      const firstWeekOfNextYear = (0, _index.constructFrom)(date, 0);
      firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setHours(0, 0, 0, 0);
      const startOfNextYear = (0, _index2.startOfWeek)(
        firstWeekOfNextYear,
        options
      );
      const firstWeekOfThisYear = (0, _index.constructFrom)(date, 0);
      firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setHours(0, 0, 0, 0);
      const startOfThisYear = (0, _index2.startOfWeek)(
        firstWeekOfThisYear,
        options
      );
      if (_date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (_date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }
  }
});

// node_modules/date-fns/startOfWeekYear.js
var require_startOfWeekYear = __commonJS({
  "node_modules/date-fns/startOfWeekYear.js"(exports) {
    "use strict";
    exports.startOfWeekYear = startOfWeekYear;
    var _index = require_constructFrom();
    var _index2 = require_getWeekYear();
    var _index3 = require_startOfWeek();
    var _index4 = require_defaultOptions();
    function startOfWeekYear(date, options) {
      var _a, _b, _c, _d;
      const defaultOptions = (0, _index4.getDefaultOptions)();
      const firstWeekContainsDate = (options == null ? void 0 : options.firstWeekContainsDate) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? defaultOptions.firstWeekContainsDate ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) ?? 1;
      const year = (0, _index2.getWeekYear)(date, options);
      const firstWeek = (0, _index.constructFrom)(date, 0);
      firstWeek.setFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setHours(0, 0, 0, 0);
      const _date = (0, _index3.startOfWeek)(firstWeek, options);
      return _date;
    }
  }
});

// node_modules/date-fns/getWeek.js
var require_getWeek = __commonJS({
  "node_modules/date-fns/getWeek.js"(exports) {
    "use strict";
    exports.getWeek = getWeek;
    var _index = require_constants();
    var _index2 = require_startOfWeek();
    var _index3 = require_startOfWeekYear();
    var _index4 = require_toDate();
    function getWeek(date, options) {
      const _date = (0, _index4.toDate)(date);
      const diff = +(0, _index2.startOfWeek)(_date, options) - +(0, _index3.startOfWeekYear)(_date, options);
      return Math.round(diff / _index.millisecondsInWeek) + 1;
    }
  }
});

// node_modules/date-fns/_lib/addLeadingZeros.js
var require_addLeadingZeros = __commonJS({
  "node_modules/date-fns/_lib/addLeadingZeros.js"(exports) {
    "use strict";
    exports.addLeadingZeros = addLeadingZeros;
    function addLeadingZeros(number, targetLength) {
      const sign = number < 0 ? "-" : "";
      const output = Math.abs(number).toString().padStart(targetLength, "0");
      return sign + output;
    }
  }
});

// node_modules/date-fns/_lib/format/lightFormatters.js
var require_lightFormatters = __commonJS({
  "node_modules/date-fns/_lib/format/lightFormatters.js"(exports) {
    "use strict";
    exports.lightFormatters = void 0;
    var _index = require_addLeadingZeros();
    var lightFormatters = exports.lightFormatters = {
      // Year
      y(date, token) {
        const signedYear = date.getFullYear();
        const year = signedYear > 0 ? signedYear : 1 - signedYear;
        return (0, _index.addLeadingZeros)(
          token === "yy" ? year % 100 : year,
          token.length
        );
      },
      // Month
      M(date, token) {
        const month = date.getMonth();
        return token === "M" ? String(month + 1) : (0, _index.addLeadingZeros)(month + 1, 2);
      },
      // Day of the month
      d(date, token) {
        return (0, _index.addLeadingZeros)(date.getDate(), token.length);
      },
      // AM or PM
      a(date, token) {
        const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
            return dayPeriodEnumValue.toUpperCase();
          case "aaa":
            return dayPeriodEnumValue;
          case "aaaaa":
            return dayPeriodEnumValue[0];
          case "aaaa":
          default:
            return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
        }
      },
      // Hour [1-12]
      h(date, token) {
        return (0, _index.addLeadingZeros)(
          date.getHours() % 12 || 12,
          token.length
        );
      },
      // Hour [0-23]
      H(date, token) {
        return (0, _index.addLeadingZeros)(date.getHours(), token.length);
      },
      // Minute
      m(date, token) {
        return (0, _index.addLeadingZeros)(date.getMinutes(), token.length);
      },
      // Second
      s(date, token) {
        return (0, _index.addLeadingZeros)(date.getSeconds(), token.length);
      },
      // Fraction of second
      S(date, token) {
        const numberOfDigits = token.length;
        const milliseconds = date.getMilliseconds();
        const fractionalSeconds = Math.trunc(
          milliseconds * Math.pow(10, numberOfDigits - 3)
        );
        return (0, _index.addLeadingZeros)(fractionalSeconds, token.length);
      }
    };
  }
});

// node_modules/date-fns/_lib/format/formatters.js
var require_formatters = __commonJS({
  "node_modules/date-fns/_lib/format/formatters.js"(exports) {
    "use strict";
    exports.formatters = void 0;
    var _index = require_getDayOfYear();
    var _index2 = require_getISOWeek();
    var _index3 = require_getISOWeekYear();
    var _index4 = require_getWeek();
    var _index5 = require_getWeekYear();
    var _index6 = require_addLeadingZeros();
    var _index7 = require_lightFormatters();
    var dayPeriodEnum = {
      am: "am",
      pm: "pm",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    };
    var formatters = exports.formatters = {
      // Era
      G: function(date, token, localize) {
        const era = date.getFullYear() > 0 ? 1 : 0;
        switch (token) {
          case "G":
          case "GG":
          case "GGG":
            return localize.era(era, { width: "abbreviated" });
          case "GGGGG":
            return localize.era(era, { width: "narrow" });
          case "GGGG":
          default:
            return localize.era(era, { width: "wide" });
        }
      },
      // Year
      y: function(date, token, localize) {
        if (token === "yo") {
          const signedYear = date.getFullYear();
          const year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, { unit: "year" });
        }
        return _index7.lightFormatters.y(date, token);
      },
      // Local week-numbering year
      Y: function(date, token, localize, options) {
        const signedWeekYear = (0, _index5.getWeekYear)(date, options);
        const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
        if (token === "YY") {
          const twoDigitYear = weekYear % 100;
          return (0, _index6.addLeadingZeros)(twoDigitYear, 2);
        }
        if (token === "Yo") {
          return localize.ordinalNumber(weekYear, { unit: "year" });
        }
        return (0, _index6.addLeadingZeros)(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function(date, token) {
        const isoWeekYear = (0, _index3.getISOWeekYear)(date);
        return (0, _index6.addLeadingZeros)(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function(date, token) {
        const year = date.getFullYear();
        return (0, _index6.addLeadingZeros)(year, token.length);
      },
      // Quarter
      Q: function(date, token, localize) {
        const quarter = Math.ceil((date.getMonth() + 1) / 3);
        switch (token) {
          case "Q":
            return String(quarter);
          case "QQ":
            return (0, _index6.addLeadingZeros)(quarter, 2);
          case "Qo":
            return localize.ordinalNumber(quarter, { unit: "quarter" });
          case "QQQ":
            return localize.quarter(quarter, {
              width: "abbreviated",
              context: "formatting"
            });
          case "QQQQQ":
            return localize.quarter(quarter, {
              width: "narrow",
              context: "formatting"
            });
          case "QQQQ":
          default:
            return localize.quarter(quarter, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Stand-alone quarter
      q: function(date, token, localize) {
        const quarter = Math.ceil((date.getMonth() + 1) / 3);
        switch (token) {
          case "q":
            return String(quarter);
          case "qq":
            return (0, _index6.addLeadingZeros)(quarter, 2);
          case "qo":
            return localize.ordinalNumber(quarter, { unit: "quarter" });
          case "qqq":
            return localize.quarter(quarter, {
              width: "abbreviated",
              context: "standalone"
            });
          case "qqqqq":
            return localize.quarter(quarter, {
              width: "narrow",
              context: "standalone"
            });
          case "qqqq":
          default:
            return localize.quarter(quarter, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      // Month
      M: function(date, token, localize) {
        const month = date.getMonth();
        switch (token) {
          case "M":
          case "MM":
            return _index7.lightFormatters.M(date, token);
          case "Mo":
            return localize.ordinalNumber(month + 1, { unit: "month" });
          case "MMM":
            return localize.month(month, {
              width: "abbreviated",
              context: "formatting"
            });
          case "MMMMM":
            return localize.month(month, {
              width: "narrow",
              context: "formatting"
            });
          case "MMMM":
          default:
            return localize.month(month, { width: "wide", context: "formatting" });
        }
      },
      // Stand-alone month
      L: function(date, token, localize) {
        const month = date.getMonth();
        switch (token) {
          case "L":
            return String(month + 1);
          case "LL":
            return (0, _index6.addLeadingZeros)(month + 1, 2);
          case "Lo":
            return localize.ordinalNumber(month + 1, { unit: "month" });
          case "LLL":
            return localize.month(month, {
              width: "abbreviated",
              context: "standalone"
            });
          case "LLLLL":
            return localize.month(month, {
              width: "narrow",
              context: "standalone"
            });
          case "LLLL":
          default:
            return localize.month(month, { width: "wide", context: "standalone" });
        }
      },
      // Local week of year
      w: function(date, token, localize, options) {
        const week = (0, _index4.getWeek)(date, options);
        if (token === "wo") {
          return localize.ordinalNumber(week, { unit: "week" });
        }
        return (0, _index6.addLeadingZeros)(week, token.length);
      },
      // ISO week of year
      I: function(date, token, localize) {
        const isoWeek = (0, _index2.getISOWeek)(date);
        if (token === "Io") {
          return localize.ordinalNumber(isoWeek, { unit: "week" });
        }
        return (0, _index6.addLeadingZeros)(isoWeek, token.length);
      },
      // Day of the month
      d: function(date, token, localize) {
        if (token === "do") {
          return localize.ordinalNumber(date.getDate(), { unit: "date" });
        }
        return _index7.lightFormatters.d(date, token);
      },
      // Day of year
      D: function(date, token, localize) {
        const dayOfYear = (0, _index.getDayOfYear)(date);
        if (token === "Do") {
          return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
        }
        return (0, _index6.addLeadingZeros)(dayOfYear, token.length);
      },
      // Day of week
      E: function(date, token, localize) {
        const dayOfWeek = date.getDay();
        switch (token) {
          case "E":
          case "EE":
          case "EEE":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "EEEEE":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "EEEEEE":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "EEEE":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Local day of week
      e: function(date, token, localize, options) {
        const dayOfWeek = date.getDay();
        const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          case "e":
            return String(localDayOfWeek);
          case "ee":
            return (0, _index6.addLeadingZeros)(localDayOfWeek, 2);
          case "eo":
            return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
          case "eee":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "eeeee":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "eeeeee":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "eeee":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Stand-alone local day of week
      c: function(date, token, localize, options) {
        const dayOfWeek = date.getDay();
        const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
          case "c":
            return String(localDayOfWeek);
          case "cc":
            return (0, _index6.addLeadingZeros)(localDayOfWeek, token.length);
          case "co":
            return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
          case "ccc":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "standalone"
            });
          case "ccccc":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "standalone"
            });
          case "cccccc":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "standalone"
            });
          case "cccc":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "standalone"
            });
        }
      },
      // ISO day of week
      i: function(date, token, localize) {
        const dayOfWeek = date.getDay();
        const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
          case "i":
            return String(isoDayOfWeek);
          case "ii":
            return (0, _index6.addLeadingZeros)(isoDayOfWeek, token.length);
          case "io":
            return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });
          case "iii":
            return localize.day(dayOfWeek, {
              width: "abbreviated",
              context: "formatting"
            });
          case "iiiii":
            return localize.day(dayOfWeek, {
              width: "narrow",
              context: "formatting"
            });
          case "iiiiii":
            return localize.day(dayOfWeek, {
              width: "short",
              context: "formatting"
            });
          case "iiii":
          default:
            return localize.day(dayOfWeek, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // AM or PM
      a: function(date, token, localize) {
        const hours = date.getHours();
        const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        switch (token) {
          case "a":
          case "aa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "aaa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            }).toLowerCase();
          case "aaaaa":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaa":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // AM, PM, midnight, noon
      b: function(date, token, localize) {
        const hours = date.getHours();
        let dayPeriodEnumValue;
        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        }
        switch (token) {
          case "b":
          case "bb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "bbb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            }).toLowerCase();
          case "bbbbb":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbb":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function(date, token, localize) {
        const hours = date.getHours();
        let dayPeriodEnumValue;
        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
          case "B":
          case "BB":
          case "BBB":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting"
            });
          case "BBBBB":
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBB":
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: "wide",
              context: "formatting"
            });
        }
      },
      // Hour [1-12]
      h: function(date, token, localize) {
        if (token === "ho") {
          let hours = date.getHours() % 12;
          if (hours === 0)
            hours = 12;
          return localize.ordinalNumber(hours, { unit: "hour" });
        }
        return _index7.lightFormatters.h(date, token);
      },
      // Hour [0-23]
      H: function(date, token, localize) {
        if (token === "Ho") {
          return localize.ordinalNumber(date.getHours(), { unit: "hour" });
        }
        return _index7.lightFormatters.H(date, token);
      },
      // Hour [0-11]
      K: function(date, token, localize) {
        const hours = date.getHours() % 12;
        if (token === "Ko") {
          return localize.ordinalNumber(hours, { unit: "hour" });
        }
        return (0, _index6.addLeadingZeros)(hours, token.length);
      },
      // Hour [1-24]
      k: function(date, token, localize) {
        let hours = date.getHours();
        if (hours === 0)
          hours = 24;
        if (token === "ko") {
          return localize.ordinalNumber(hours, { unit: "hour" });
        }
        return (0, _index6.addLeadingZeros)(hours, token.length);
      },
      // Minute
      m: function(date, token, localize) {
        if (token === "mo") {
          return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });
        }
        return _index7.lightFormatters.m(date, token);
      },
      // Second
      s: function(date, token, localize) {
        if (token === "so") {
          return localize.ordinalNumber(date.getSeconds(), { unit: "second" });
        }
        return _index7.lightFormatters.s(date, token);
      },
      // Fraction of second
      S: function(date, token) {
        return _index7.lightFormatters.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        if (timezoneOffset === 0) {
          return "Z";
        }
        switch (token) {
          case "X":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          case "XXXX":
          case "XX":
            return formatTimezone(timezoneOffset);
          case "XXXXX":
          case "XXX":
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        switch (token) {
          case "x":
            return formatTimezoneWithOptionalMinutes(timezoneOffset);
          case "xxxx":
          case "xx":
            return formatTimezone(timezoneOffset);
          case "xxxxx":
          case "xxx":
          default:
            return formatTimezone(timezoneOffset, ":");
        }
      },
      // Timezone (GMT)
      O: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        switch (token) {
          case "O":
          case "OO":
          case "OOO":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          case "OOOO":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      // Timezone (specific non-location)
      z: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        switch (token) {
          case "z":
          case "zz":
          case "zzz":
            return "GMT" + formatTimezoneShort(timezoneOffset, ":");
          case "zzzz":
          default:
            return "GMT" + formatTimezone(timezoneOffset, ":");
        }
      },
      // Seconds timestamp
      t: function(date, token, _localize) {
        const timestamp = Math.trunc(date.getTime() / 1e3);
        return (0, _index6.addLeadingZeros)(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function(date, token, _localize) {
        const timestamp = date.getTime();
        return (0, _index6.addLeadingZeros)(timestamp, token.length);
      }
    };
    function formatTimezoneShort(offset, delimiter = "") {
      const sign = offset > 0 ? "-" : "+";
      const absOffset = Math.abs(offset);
      const hours = Math.trunc(absOffset / 60);
      const minutes = absOffset % 60;
      if (minutes === 0) {
        return sign + String(hours);
      }
      return sign + String(hours) + delimiter + (0, _index6.addLeadingZeros)(minutes, 2);
    }
    function formatTimezoneWithOptionalMinutes(offset, delimiter) {
      if (offset % 60 === 0) {
        const sign = offset > 0 ? "-" : "+";
        return sign + (0, _index6.addLeadingZeros)(Math.abs(offset) / 60, 2);
      }
      return formatTimezone(offset, delimiter);
    }
    function formatTimezone(offset, delimiter = "") {
      const sign = offset > 0 ? "-" : "+";
      const absOffset = Math.abs(offset);
      const hours = (0, _index6.addLeadingZeros)(Math.trunc(absOffset / 60), 2);
      const minutes = (0, _index6.addLeadingZeros)(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }
  }
});

// node_modules/date-fns/_lib/format/longFormatters.js
var require_longFormatters = __commonJS({
  "node_modules/date-fns/_lib/format/longFormatters.js"(exports) {
    "use strict";
    exports.longFormatters = void 0;
    var dateLongFormatter = (pattern, formatLong) => {
      switch (pattern) {
        case "P":
          return formatLong.date({ width: "short" });
        case "PP":
          return formatLong.date({ width: "medium" });
        case "PPP":
          return formatLong.date({ width: "long" });
        case "PPPP":
        default:
          return formatLong.date({ width: "full" });
      }
    };
    var timeLongFormatter = (pattern, formatLong) => {
      switch (pattern) {
        case "p":
          return formatLong.time({ width: "short" });
        case "pp":
          return formatLong.time({ width: "medium" });
        case "ppp":
          return formatLong.time({ width: "long" });
        case "pppp":
        default:
          return formatLong.time({ width: "full" });
      }
    };
    var dateTimeLongFormatter = (pattern, formatLong) => {
      const matchResult = pattern.match(/(P+)(p+)?/) || [];
      const datePattern = matchResult[1];
      const timePattern = matchResult[2];
      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }
      let dateTimeFormat;
      switch (datePattern) {
        case "P":
          dateTimeFormat = formatLong.dateTime({ width: "short" });
          break;
        case "PP":
          dateTimeFormat = formatLong.dateTime({ width: "medium" });
          break;
        case "PPP":
          dateTimeFormat = formatLong.dateTime({ width: "long" });
          break;
        case "PPPP":
        default:
          dateTimeFormat = formatLong.dateTime({ width: "full" });
          break;
      }
      return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong)).replace("{{time}}", timeLongFormatter(timePattern, formatLong));
    };
    var longFormatters = exports.longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };
  }
});

// node_modules/date-fns/_lib/protectedTokens.js
var require_protectedTokens = __commonJS({
  "node_modules/date-fns/_lib/protectedTokens.js"(exports) {
    "use strict";
    exports.isProtectedDayOfYearToken = isProtectedDayOfYearToken;
    exports.isProtectedWeekYearToken = isProtectedWeekYearToken;
    exports.warnOrThrowProtectedError = warnOrThrowProtectedError;
    var dayOfYearTokenRE = /^D+$/;
    var weekYearTokenRE = /^Y+$/;
    var throwTokens = ["D", "DD", "YY", "YYYY"];
    function isProtectedDayOfYearToken(token) {
      return dayOfYearTokenRE.test(token);
    }
    function isProtectedWeekYearToken(token) {
      return weekYearTokenRE.test(token);
    }
    function warnOrThrowProtectedError(token, format, input) {
      const _message = message(token, format, input);
      console.warn(_message);
      if (throwTokens.includes(token))
        throw new RangeError(_message);
    }
    function message(token, format, input) {
      const subject = token[0] === "Y" ? "years" : "days of the month";
      return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
    }
  }
});

// node_modules/date-fns/format.js
var require_format = __commonJS({
  "node_modules/date-fns/format.js"(exports) {
    "use strict";
    exports.format = exports.formatDate = format;
    Object.defineProperty(exports, "formatters", {
      enumerable: true,
      get: function() {
        return _index3.formatters;
      }
    });
    Object.defineProperty(exports, "longFormatters", {
      enumerable: true,
      get: function() {
        return _index4.longFormatters;
      }
    });
    var _index = require_defaultLocale();
    var _index2 = require_defaultOptions();
    var _index3 = require_formatters();
    var _index4 = require_longFormatters();
    var _index5 = require_protectedTokens();
    var _index6 = require_isValid();
    var _index7 = require_toDate();
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function format(date, formatStr, options) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const defaultOptions = (0, _index2.getDefaultOptions)();
      const locale = (options == null ? void 0 : options.locale) ?? defaultOptions.locale ?? _index.defaultLocale;
      const firstWeekContainsDate = (options == null ? void 0 : options.firstWeekContainsDate) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? defaultOptions.firstWeekContainsDate ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) ?? 1;
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_f = (_e = options == null ? void 0 : options.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_h = (_g = defaultOptions.locale) == null ? void 0 : _g.options) == null ? void 0 : _h.weekStartsOn) ?? 0;
      const originalDate = (0, _index7.toDate)(date);
      if (!(0, _index6.isValid)(originalDate)) {
        throw new RangeError("Invalid time value");
      }
      let parts = formatStr.match(longFormattingTokensRegExp).map((substring) => {
        const firstCharacter = substring[0];
        if (firstCharacter === "p" || firstCharacter === "P") {
          const longFormatter = _index4.longFormatters[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      }).join("").match(formattingTokensRegExp).map((substring) => {
        if (substring === "''") {
          return { isToken: false, value: "'" };
        }
        const firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return { isToken: false, value: cleanEscapedString(substring) };
        }
        if (_index3.formatters[firstCharacter]) {
          return { isToken: true, value: substring };
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError(
            "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
          );
        }
        return { isToken: false, value: substring };
      });
      if (locale.localize.preprocessor) {
        parts = locale.localize.preprocessor(originalDate, parts);
      }
      const formatterOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale
      };
      return parts.map((part) => {
        if (!part.isToken)
          return part.value;
        const token = part.value;
        if (!(options == null ? void 0 : options.useAdditionalWeekYearTokens) && (0, _index5.isProtectedWeekYearToken)(token) || !(options == null ? void 0 : options.useAdditionalDayOfYearTokens) && (0, _index5.isProtectedDayOfYearToken)(token)) {
          (0, _index5.warnOrThrowProtectedError)(token, formatStr, String(date));
        }
        const formatter = _index3.formatters[token[0]];
        return formatter(originalDate, token, locale.localize, formatterOptions);
      }).join("");
    }
    function cleanEscapedString(input) {
      const matched = input.match(escapedStringRegExp);
      if (!matched) {
        return input;
      }
      return matched[1].replace(doubleQuoteRegExp, "'");
    }
  }
});

// node_modules/date-fns/formatDistance.js
var require_formatDistance2 = __commonJS({
  "node_modules/date-fns/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = formatDistance;
    var _index = require_compareAsc();
    var _index2 = require_constants();
    var _index3 = require_differenceInMonths();
    var _index4 = require_differenceInSeconds();
    var _index5 = require_toDate();
    var _index6 = require_defaultLocale();
    var _index7 = require_defaultOptions();
    var _index8 = require_getTimezoneOffsetInMilliseconds();
    function formatDistance(date, baseDate, options) {
      const defaultOptions = (0, _index7.getDefaultOptions)();
      const locale = (options == null ? void 0 : options.locale) ?? defaultOptions.locale ?? _index6.defaultLocale;
      const minutesInAlmostTwoDays = 2520;
      const comparison = (0, _index.compareAsc)(date, baseDate);
      if (isNaN(comparison)) {
        throw new RangeError("Invalid time value");
      }
      const localizeOptions = Object.assign({}, options, {
        addSuffix: options == null ? void 0 : options.addSuffix,
        comparison
      });
      let dateLeft;
      let dateRight;
      if (comparison > 0) {
        dateLeft = (0, _index5.toDate)(baseDate);
        dateRight = (0, _index5.toDate)(date);
      } else {
        dateLeft = (0, _index5.toDate)(date);
        dateRight = (0, _index5.toDate)(baseDate);
      }
      const seconds = (0, _index4.differenceInSeconds)(dateRight, dateLeft);
      const offsetInSeconds = ((0, _index8.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index8.getTimezoneOffsetInMilliseconds)(dateLeft)) / 1e3;
      const minutes = Math.round((seconds - offsetInSeconds) / 60);
      let months;
      if (minutes < 2) {
        if (options == null ? void 0 : options.includeSeconds) {
          if (seconds < 5) {
            return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
          } else if (seconds < 10) {
            return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
          } else if (seconds < 20) {
            return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
          } else if (seconds < 40) {
            return locale.formatDistance("halfAMinute", 0, localizeOptions);
          } else if (seconds < 60) {
            return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
          } else {
            return locale.formatDistance("xMinutes", 1, localizeOptions);
          }
        } else {
          if (minutes === 0) {
            return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
          } else {
            return locale.formatDistance("xMinutes", minutes, localizeOptions);
          }
        }
      } else if (minutes < 45) {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      } else if (minutes < 90) {
        return locale.formatDistance("aboutXHours", 1, localizeOptions);
      } else if (minutes < _index2.minutesInDay) {
        const hours = Math.round(minutes / 60);
        return locale.formatDistance("aboutXHours", hours, localizeOptions);
      } else if (minutes < minutesInAlmostTwoDays) {
        return locale.formatDistance("xDays", 1, localizeOptions);
      } else if (minutes < _index2.minutesInMonth) {
        const days = Math.round(minutes / _index2.minutesInDay);
        return locale.formatDistance("xDays", days, localizeOptions);
      } else if (minutes < _index2.minutesInMonth * 2) {
        months = Math.round(minutes / _index2.minutesInMonth);
        return locale.formatDistance("aboutXMonths", months, localizeOptions);
      }
      months = (0, _index3.differenceInMonths)(dateRight, dateLeft);
      if (months < 12) {
        const nearestMonth = Math.round(minutes / _index2.minutesInMonth);
        return locale.formatDistance("xMonths", nearestMonth, localizeOptions);
      } else {
        const monthsSinceStartOfYear = months % 12;
        const years = Math.trunc(months / 12);
        if (monthsSinceStartOfYear < 3) {
          return locale.formatDistance("aboutXYears", years, localizeOptions);
        } else if (monthsSinceStartOfYear < 9) {
          return locale.formatDistance("overXYears", years, localizeOptions);
        } else {
          return locale.formatDistance("almostXYears", years + 1, localizeOptions);
        }
      }
    }
  }
});

// node_modules/date-fns/formatDistanceStrict.js
var require_formatDistanceStrict = __commonJS({
  "node_modules/date-fns/formatDistanceStrict.js"(exports) {
    "use strict";
    exports.formatDistanceStrict = formatDistanceStrict;
    var _index = require_defaultLocale();
    var _index2 = require_defaultOptions();
    var _index3 = require_getRoundingMethod();
    var _index4 = require_getTimezoneOffsetInMilliseconds();
    var _index5 = require_compareAsc();
    var _index6 = require_constants();
    var _index7 = require_toDate();
    function formatDistanceStrict(date, baseDate, options) {
      const defaultOptions = (0, _index2.getDefaultOptions)();
      const locale = (options == null ? void 0 : options.locale) ?? defaultOptions.locale ?? _index.defaultLocale;
      const comparison = (0, _index5.compareAsc)(date, baseDate);
      if (isNaN(comparison)) {
        throw new RangeError("Invalid time value");
      }
      const localizeOptions = Object.assign({}, options, {
        addSuffix: options == null ? void 0 : options.addSuffix,
        comparison
      });
      let dateLeft;
      let dateRight;
      if (comparison > 0) {
        dateLeft = (0, _index7.toDate)(baseDate);
        dateRight = (0, _index7.toDate)(date);
      } else {
        dateLeft = (0, _index7.toDate)(date);
        dateRight = (0, _index7.toDate)(baseDate);
      }
      const roundingMethod = (0, _index3.getRoundingMethod)(
        (options == null ? void 0 : options.roundingMethod) ?? "round"
      );
      const milliseconds = dateRight.getTime() - dateLeft.getTime();
      const minutes = milliseconds / _index6.millisecondsInMinute;
      const timezoneOffset = (0, _index4.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index4.getTimezoneOffsetInMilliseconds)(dateLeft);
      const dstNormalizedMinutes = (milliseconds - timezoneOffset) / _index6.millisecondsInMinute;
      const defaultUnit = options == null ? void 0 : options.unit;
      let unit;
      if (!defaultUnit) {
        if (minutes < 1) {
          unit = "second";
        } else if (minutes < 60) {
          unit = "minute";
        } else if (minutes < _index6.minutesInDay) {
          unit = "hour";
        } else if (dstNormalizedMinutes < _index6.minutesInMonth) {
          unit = "day";
        } else if (dstNormalizedMinutes < _index6.minutesInYear) {
          unit = "month";
        } else {
          unit = "year";
        }
      } else {
        unit = defaultUnit;
      }
      if (unit === "second") {
        const seconds = roundingMethod(milliseconds / 1e3);
        return locale.formatDistance("xSeconds", seconds, localizeOptions);
      } else if (unit === "minute") {
        const roundedMinutes = roundingMethod(minutes);
        return locale.formatDistance("xMinutes", roundedMinutes, localizeOptions);
      } else if (unit === "hour") {
        const hours = roundingMethod(minutes / 60);
        return locale.formatDistance("xHours", hours, localizeOptions);
      } else if (unit === "day") {
        const days = roundingMethod(dstNormalizedMinutes / _index6.minutesInDay);
        return locale.formatDistance("xDays", days, localizeOptions);
      } else if (unit === "month") {
        const months = roundingMethod(
          dstNormalizedMinutes / _index6.minutesInMonth
        );
        return months === 12 && defaultUnit !== "month" ? locale.formatDistance("xYears", 1, localizeOptions) : locale.formatDistance("xMonths", months, localizeOptions);
      } else {
        const years = roundingMethod(dstNormalizedMinutes / _index6.minutesInYear);
        return locale.formatDistance("xYears", years, localizeOptions);
      }
    }
  }
});

// node_modules/date-fns/formatDistanceToNow.js
var require_formatDistanceToNow = __commonJS({
  "node_modules/date-fns/formatDistanceToNow.js"(exports) {
    "use strict";
    exports.formatDistanceToNow = formatDistanceToNow;
    var _index = require_constructNow();
    var _index2 = require_formatDistance2();
    function formatDistanceToNow(date, options) {
      return (0, _index2.formatDistance)(
        date,
        (0, _index.constructNow)(date),
        options
      );
    }
  }
});

// node_modules/date-fns/formatDistanceToNowStrict.js
var require_formatDistanceToNowStrict = __commonJS({
  "node_modules/date-fns/formatDistanceToNowStrict.js"(exports) {
    "use strict";
    exports.formatDistanceToNowStrict = formatDistanceToNowStrict;
    var _index = require_formatDistanceStrict();
    var _index2 = require_constructNow();
    function formatDistanceToNowStrict(date, options) {
      return (0, _index.formatDistanceStrict)(
        date,
        (0, _index2.constructNow)(date),
        options
      );
    }
  }
});

// node_modules/date-fns/formatDuration.js
var require_formatDuration = __commonJS({
  "node_modules/date-fns/formatDuration.js"(exports) {
    "use strict";
    exports.formatDuration = formatDuration;
    var _index = require_defaultLocale();
    var _index2 = require_defaultOptions();
    var defaultFormat = [
      "years",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds"
    ];
    function formatDuration(duration, options) {
      const defaultOptions = (0, _index2.getDefaultOptions)();
      const locale = (options == null ? void 0 : options.locale) ?? defaultOptions.locale ?? _index.defaultLocale;
      const format = (options == null ? void 0 : options.format) ?? defaultFormat;
      const zero = (options == null ? void 0 : options.zero) ?? false;
      const delimiter = (options == null ? void 0 : options.delimiter) ?? " ";
      if (!locale.formatDistance) {
        return "";
      }
      const result = format.reduce((acc, unit) => {
        const token = `x${unit.replace(/(^.)/, (m) => m.toUpperCase())}`;
        const value = duration[unit];
        if (value !== void 0 && (zero || duration[unit])) {
          return acc.concat(locale.formatDistance(token, value));
        }
        return acc;
      }, []).join(delimiter);
      return result;
    }
  }
});

// node_modules/date-fns/formatISO.js
var require_formatISO = __commonJS({
  "node_modules/date-fns/formatISO.js"(exports) {
    "use strict";
    exports.formatISO = formatISO;
    var _index = require_toDate();
    var _index2 = require_addLeadingZeros();
    function formatISO(date, options) {
      const _date = (0, _index.toDate)(date);
      if (isNaN(_date.getTime())) {
        throw new RangeError("Invalid time value");
      }
      const format = (options == null ? void 0 : options.format) ?? "extended";
      const representation = (options == null ? void 0 : options.representation) ?? "complete";
      let result = "";
      let tzOffset = "";
      const dateDelimiter = format === "extended" ? "-" : "";
      const timeDelimiter = format === "extended" ? ":" : "";
      if (representation !== "time") {
        const day = (0, _index2.addLeadingZeros)(_date.getDate(), 2);
        const month = (0, _index2.addLeadingZeros)(_date.getMonth() + 1, 2);
        const year = (0, _index2.addLeadingZeros)(_date.getFullYear(), 4);
        result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
      }
      if (representation !== "date") {
        const offset = _date.getTimezoneOffset();
        if (offset !== 0) {
          const absoluteOffset = Math.abs(offset);
          const hourOffset = (0, _index2.addLeadingZeros)(
            Math.trunc(absoluteOffset / 60),
            2
          );
          const minuteOffset = (0, _index2.addLeadingZeros)(absoluteOffset % 60, 2);
          const sign = offset < 0 ? "+" : "-";
          tzOffset = `${sign}${hourOffset}:${minuteOffset}`;
        } else {
          tzOffset = "Z";
        }
        const hour = (0, _index2.addLeadingZeros)(_date.getHours(), 2);
        const minute = (0, _index2.addLeadingZeros)(_date.getMinutes(), 2);
        const second = (0, _index2.addLeadingZeros)(_date.getSeconds(), 2);
        const separator = result === "" ? "" : "T";
        const time = [hour, minute, second].join(timeDelimiter);
        result = `${result}${separator}${time}${tzOffset}`;
      }
      return result;
    }
  }
});

// node_modules/date-fns/formatISO9075.js
var require_formatISO9075 = __commonJS({
  "node_modules/date-fns/formatISO9075.js"(exports) {
    "use strict";
    exports.formatISO9075 = formatISO9075;
    var _index = require_isValid();
    var _index2 = require_toDate();
    var _index3 = require_addLeadingZeros();
    function formatISO9075(date, options) {
      const _date = (0, _index2.toDate)(date);
      if (!(0, _index.isValid)(_date)) {
        throw new RangeError("Invalid time value");
      }
      const format = (options == null ? void 0 : options.format) ?? "extended";
      const representation = (options == null ? void 0 : options.representation) ?? "complete";
      let result = "";
      const dateDelimiter = format === "extended" ? "-" : "";
      const timeDelimiter = format === "extended" ? ":" : "";
      if (representation !== "time") {
        const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);
        const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);
        const year = (0, _index3.addLeadingZeros)(_date.getFullYear(), 4);
        result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
      }
      if (representation !== "date") {
        const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);
        const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);
        const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);
        const separator = result === "" ? "" : " ";
        result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;
      }
      return result;
    }
  }
});

// node_modules/date-fns/formatISODuration.js
var require_formatISODuration = __commonJS({
  "node_modules/date-fns/formatISODuration.js"(exports) {
    "use strict";
    exports.formatISODuration = formatISODuration;
    function formatISODuration(duration) {
      const {
        years = 0,
        months = 0,
        days = 0,
        hours = 0,
        minutes = 0,
        seconds = 0
      } = duration;
      return `P${years}Y${months}M${days}DT${hours}H${minutes}M${seconds}S`;
    }
  }
});

// node_modules/date-fns/formatRFC3339.js
var require_formatRFC3339 = __commonJS({
  "node_modules/date-fns/formatRFC3339.js"(exports) {
    "use strict";
    exports.formatRFC3339 = formatRFC3339;
    var _index = require_isValid();
    var _index2 = require_toDate();
    var _index3 = require_addLeadingZeros();
    function formatRFC3339(date, options) {
      const _date = (0, _index2.toDate)(date);
      if (!(0, _index.isValid)(_date)) {
        throw new RangeError("Invalid time value");
      }
      const fractionDigits = (options == null ? void 0 : options.fractionDigits) ?? 0;
      const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);
      const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);
      const year = _date.getFullYear();
      const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);
      const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);
      const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);
      let fractionalSecond = "";
      if (fractionDigits > 0) {
        const milliseconds = _date.getMilliseconds();
        const fractionalSeconds = Math.trunc(
          milliseconds * Math.pow(10, fractionDigits - 3)
        );
        fractionalSecond = "." + (0, _index3.addLeadingZeros)(fractionalSeconds, fractionDigits);
      }
      let offset = "";
      const tzOffset = _date.getTimezoneOffset();
      if (tzOffset !== 0) {
        const absoluteOffset = Math.abs(tzOffset);
        const hourOffset = (0, _index3.addLeadingZeros)(
          Math.trunc(absoluteOffset / 60),
          2
        );
        const minuteOffset = (0, _index3.addLeadingZeros)(absoluteOffset % 60, 2);
        const sign = tzOffset < 0 ? "+" : "-";
        offset = `${sign}${hourOffset}:${minuteOffset}`;
      } else {
        offset = "Z";
      }
      return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;
    }
  }
});

// node_modules/date-fns/formatRFC7231.js
var require_formatRFC7231 = __commonJS({
  "node_modules/date-fns/formatRFC7231.js"(exports) {
    "use strict";
    exports.formatRFC7231 = formatRFC7231;
    var _index = require_isValid();
    var _index2 = require_toDate();
    var _index3 = require_addLeadingZeros();
    var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function formatRFC7231(date) {
      const _date = (0, _index2.toDate)(date);
      if (!(0, _index.isValid)(_date)) {
        throw new RangeError("Invalid time value");
      }
      const dayName = days[_date.getUTCDay()];
      const dayOfMonth = (0, _index3.addLeadingZeros)(_date.getUTCDate(), 2);
      const monthName = months[_date.getUTCMonth()];
      const year = _date.getUTCFullYear();
      const hour = (0, _index3.addLeadingZeros)(_date.getUTCHours(), 2);
      const minute = (0, _index3.addLeadingZeros)(_date.getUTCMinutes(), 2);
      const second = (0, _index3.addLeadingZeros)(_date.getUTCSeconds(), 2);
      return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;
    }
  }
});

// node_modules/date-fns/formatRelative.js
var require_formatRelative2 = __commonJS({
  "node_modules/date-fns/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = formatRelative;
    var _index = require_differenceInCalendarDays();
    var _index2 = require_format();
    var _index3 = require_toDate();
    var _index4 = require_defaultLocale();
    var _index5 = require_defaultOptions();
    function formatRelative(date, baseDate, options) {
      var _a, _b, _c, _d;
      const _date = (0, _index3.toDate)(date);
      const _baseDate = (0, _index3.toDate)(baseDate);
      const defaultOptions = (0, _index5.getDefaultOptions)();
      const locale = (options == null ? void 0 : options.locale) ?? defaultOptions.locale ?? _index4.defaultLocale;
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
      const diff = (0, _index.differenceInCalendarDays)(_date, _baseDate);
      if (isNaN(diff)) {
        throw new RangeError("Invalid time value");
      }
      let token;
      if (diff < -6) {
        token = "other";
      } else if (diff < -1) {
        token = "lastWeek";
      } else if (diff < 0) {
        token = "yesterday";
      } else if (diff < 1) {
        token = "today";
      } else if (diff < 2) {
        token = "tomorrow";
      } else if (diff < 7) {
        token = "nextWeek";
      } else {
        token = "other";
      }
      const formatStr = locale.formatRelative(token, _date, _baseDate, {
        locale,
        weekStartsOn
      });
      return (0, _index2.format)(_date, formatStr, { locale, weekStartsOn });
    }
  }
});

// node_modules/date-fns/fromUnixTime.js
var require_fromUnixTime = __commonJS({
  "node_modules/date-fns/fromUnixTime.js"(exports) {
    "use strict";
    exports.fromUnixTime = fromUnixTime;
    var _index = require_toDate();
    function fromUnixTime(unixTime) {
      return (0, _index.toDate)(unixTime * 1e3);
    }
  }
});

// node_modules/date-fns/getDate.js
var require_getDate = __commonJS({
  "node_modules/date-fns/getDate.js"(exports) {
    "use strict";
    exports.getDate = getDate;
    var _index = require_toDate();
    function getDate(date) {
      const _date = (0, _index.toDate)(date);
      const dayOfMonth = _date.getDate();
      return dayOfMonth;
    }
  }
});

// node_modules/date-fns/getDay.js
var require_getDay = __commonJS({
  "node_modules/date-fns/getDay.js"(exports) {
    "use strict";
    exports.getDay = getDay;
    var _index = require_toDate();
    function getDay(date) {
      const _date = (0, _index.toDate)(date);
      const day = _date.getDay();
      return day;
    }
  }
});

// node_modules/date-fns/getDaysInMonth.js
var require_getDaysInMonth = __commonJS({
  "node_modules/date-fns/getDaysInMonth.js"(exports) {
    "use strict";
    exports.getDaysInMonth = getDaysInMonth;
    var _index = require_toDate();
    var _index2 = require_constructFrom();
    function getDaysInMonth(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      const monthIndex = _date.getMonth();
      const lastDayOfMonth = (0, _index2.constructFrom)(date, 0);
      lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
      lastDayOfMonth.setHours(0, 0, 0, 0);
      return lastDayOfMonth.getDate();
    }
  }
});

// node_modules/date-fns/isLeapYear.js
var require_isLeapYear = __commonJS({
  "node_modules/date-fns/isLeapYear.js"(exports) {
    "use strict";
    exports.isLeapYear = isLeapYear;
    var _index = require_toDate();
    function isLeapYear(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
  }
});

// node_modules/date-fns/getDaysInYear.js
var require_getDaysInYear = __commonJS({
  "node_modules/date-fns/getDaysInYear.js"(exports) {
    "use strict";
    exports.getDaysInYear = getDaysInYear;
    var _index = require_isLeapYear();
    var _index2 = require_toDate();
    function getDaysInYear(date) {
      const _date = (0, _index2.toDate)(date);
      if (String(new Date(_date)) === "Invalid Date") {
        return NaN;
      }
      return (0, _index.isLeapYear)(_date) ? 366 : 365;
    }
  }
});

// node_modules/date-fns/getDecade.js
var require_getDecade = __commonJS({
  "node_modules/date-fns/getDecade.js"(exports) {
    "use strict";
    exports.getDecade = getDecade;
    var _index = require_toDate();
    function getDecade(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      const decade = Math.floor(year / 10) * 10;
      return decade;
    }
  }
});

// node_modules/date-fns/getDefaultOptions.js
var require_getDefaultOptions = __commonJS({
  "node_modules/date-fns/getDefaultOptions.js"(exports) {
    "use strict";
    exports.getDefaultOptions = getDefaultOptions;
    var _index = require_defaultOptions();
    function getDefaultOptions() {
      return Object.assign({}, (0, _index.getDefaultOptions)());
    }
  }
});

// node_modules/date-fns/getHours.js
var require_getHours = __commonJS({
  "node_modules/date-fns/getHours.js"(exports) {
    "use strict";
    exports.getHours = getHours;
    var _index = require_toDate();
    function getHours(date) {
      const _date = (0, _index.toDate)(date);
      const hours = _date.getHours();
      return hours;
    }
  }
});

// node_modules/date-fns/getISODay.js
var require_getISODay = __commonJS({
  "node_modules/date-fns/getISODay.js"(exports) {
    "use strict";
    exports.getISODay = getISODay;
    var _index = require_toDate();
    function getISODay(date) {
      const _date = (0, _index.toDate)(date);
      let day = _date.getDay();
      if (day === 0) {
        day = 7;
      }
      return day;
    }
  }
});

// node_modules/date-fns/getISOWeeksInYear.js
var require_getISOWeeksInYear = __commonJS({
  "node_modules/date-fns/getISOWeeksInYear.js"(exports) {
    "use strict";
    exports.getISOWeeksInYear = getISOWeeksInYear;
    var _index = require_addWeeks();
    var _index2 = require_constants();
    var _index3 = require_startOfISOWeekYear();
    function getISOWeeksInYear(date) {
      const thisYear = (0, _index3.startOfISOWeekYear)(date);
      const nextYear = (0, _index3.startOfISOWeekYear)(
        (0, _index.addWeeks)(thisYear, 60)
      );
      const diff = +nextYear - +thisYear;
      return Math.round(diff / _index2.millisecondsInWeek);
    }
  }
});

// node_modules/date-fns/getMilliseconds.js
var require_getMilliseconds = __commonJS({
  "node_modules/date-fns/getMilliseconds.js"(exports) {
    "use strict";
    exports.getMilliseconds = getMilliseconds;
    var _index = require_toDate();
    function getMilliseconds(date) {
      const _date = (0, _index.toDate)(date);
      const milliseconds = _date.getMilliseconds();
      return milliseconds;
    }
  }
});

// node_modules/date-fns/getMinutes.js
var require_getMinutes = __commonJS({
  "node_modules/date-fns/getMinutes.js"(exports) {
    "use strict";
    exports.getMinutes = getMinutes;
    var _index = require_toDate();
    function getMinutes(date) {
      const _date = (0, _index.toDate)(date);
      const minutes = _date.getMinutes();
      return minutes;
    }
  }
});

// node_modules/date-fns/getMonth.js
var require_getMonth = __commonJS({
  "node_modules/date-fns/getMonth.js"(exports) {
    "use strict";
    exports.getMonth = getMonth;
    var _index = require_toDate();
    function getMonth(date) {
      const _date = (0, _index.toDate)(date);
      const month = _date.getMonth();
      return month;
    }
  }
});

// node_modules/date-fns/getOverlappingDaysInIntervals.js
var require_getOverlappingDaysInIntervals = __commonJS({
  "node_modules/date-fns/getOverlappingDaysInIntervals.js"(exports) {
    "use strict";
    exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;
    var _index = require_getTimezoneOffsetInMilliseconds();
    var _index2 = require_constants();
    var _index3 = require_toDate();
    function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {
      const [leftStart, leftEnd] = [
        +(0, _index3.toDate)(intervalLeft.start),
        +(0, _index3.toDate)(intervalLeft.end)
      ].sort((a, b) => a - b);
      const [rightStart, rightEnd] = [
        +(0, _index3.toDate)(intervalRight.start),
        +(0, _index3.toDate)(intervalRight.end)
      ].sort((a, b) => a - b);
      const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;
      if (!isOverlapping)
        return 0;
      const overlapLeft = rightStart < leftStart ? leftStart : rightStart;
      const left = overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);
      const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;
      const right = overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight);
      return Math.ceil((right - left) / _index2.millisecondsInDay);
    }
  }
});

// node_modules/date-fns/getSeconds.js
var require_getSeconds = __commonJS({
  "node_modules/date-fns/getSeconds.js"(exports) {
    "use strict";
    exports.getSeconds = getSeconds;
    var _index = require_toDate();
    function getSeconds(date) {
      const _date = (0, _index.toDate)(date);
      const seconds = _date.getSeconds();
      return seconds;
    }
  }
});

// node_modules/date-fns/getTime.js
var require_getTime = __commonJS({
  "node_modules/date-fns/getTime.js"(exports) {
    "use strict";
    exports.getTime = getTime;
    var _index = require_toDate();
    function getTime(date) {
      const _date = (0, _index.toDate)(date);
      const timestamp = _date.getTime();
      return timestamp;
    }
  }
});

// node_modules/date-fns/getUnixTime.js
var require_getUnixTime = __commonJS({
  "node_modules/date-fns/getUnixTime.js"(exports) {
    "use strict";
    exports.getUnixTime = getUnixTime;
    var _index = require_toDate();
    function getUnixTime(date) {
      return Math.trunc(+(0, _index.toDate)(date) / 1e3);
    }
  }
});

// node_modules/date-fns/getWeekOfMonth.js
var require_getWeekOfMonth = __commonJS({
  "node_modules/date-fns/getWeekOfMonth.js"(exports) {
    "use strict";
    exports.getWeekOfMonth = getWeekOfMonth;
    var _index = require_getDate();
    var _index2 = require_getDay();
    var _index3 = require_startOfMonth();
    var _index4 = require_defaultOptions();
    function getWeekOfMonth(date, options) {
      var _a, _b, _c, _d;
      const defaultOptions = (0, _index4.getDefaultOptions)();
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
      const currentDayOfMonth = (0, _index.getDate)(date);
      if (isNaN(currentDayOfMonth))
        return NaN;
      const startWeekDay = (0, _index2.getDay)((0, _index3.startOfMonth)(date));
      let lastDayOfFirstWeek = weekStartsOn - startWeekDay;
      if (lastDayOfFirstWeek <= 0)
        lastDayOfFirstWeek += 7;
      const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
      return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;
    }
  }
});

// node_modules/date-fns/lastDayOfMonth.js
var require_lastDayOfMonth = __commonJS({
  "node_modules/date-fns/lastDayOfMonth.js"(exports) {
    "use strict";
    exports.lastDayOfMonth = lastDayOfMonth;
    var _index = require_toDate();
    function lastDayOfMonth(date) {
      const _date = (0, _index.toDate)(date);
      const month = _date.getMonth();
      _date.setFullYear(_date.getFullYear(), month + 1, 0);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/getWeeksInMonth.js
var require_getWeeksInMonth = __commonJS({
  "node_modules/date-fns/getWeeksInMonth.js"(exports) {
    "use strict";
    exports.getWeeksInMonth = getWeeksInMonth;
    var _index = require_differenceInCalendarWeeks();
    var _index2 = require_lastDayOfMonth();
    var _index3 = require_startOfMonth();
    function getWeeksInMonth(date, options) {
      return (0, _index.differenceInCalendarWeeks)(
        (0, _index2.lastDayOfMonth)(date),
        (0, _index3.startOfMonth)(date),
        options
      ) + 1;
    }
  }
});

// node_modules/date-fns/getYear.js
var require_getYear = __commonJS({
  "node_modules/date-fns/getYear.js"(exports) {
    "use strict";
    exports.getYear = getYear;
    var _index = require_toDate();
    function getYear(date) {
      return (0, _index.toDate)(date).getFullYear();
    }
  }
});

// node_modules/date-fns/hoursToMilliseconds.js
var require_hoursToMilliseconds = __commonJS({
  "node_modules/date-fns/hoursToMilliseconds.js"(exports) {
    "use strict";
    exports.hoursToMilliseconds = hoursToMilliseconds;
    var _index = require_constants();
    function hoursToMilliseconds(hours) {
      return Math.trunc(hours * _index.millisecondsInHour);
    }
  }
});

// node_modules/date-fns/hoursToMinutes.js
var require_hoursToMinutes = __commonJS({
  "node_modules/date-fns/hoursToMinutes.js"(exports) {
    "use strict";
    exports.hoursToMinutes = hoursToMinutes;
    var _index = require_constants();
    function hoursToMinutes(hours) {
      return Math.trunc(hours * _index.minutesInHour);
    }
  }
});

// node_modules/date-fns/hoursToSeconds.js
var require_hoursToSeconds = __commonJS({
  "node_modules/date-fns/hoursToSeconds.js"(exports) {
    "use strict";
    exports.hoursToSeconds = hoursToSeconds;
    var _index = require_constants();
    function hoursToSeconds(hours) {
      return Math.trunc(hours * _index.secondsInHour);
    }
  }
});

// node_modules/date-fns/interval.js
var require_interval = __commonJS({
  "node_modules/date-fns/interval.js"(exports) {
    "use strict";
    exports.interval = interval;
    var _index = require_toDate();
    function interval(start, end, options) {
      const _start = (0, _index.toDate)(start);
      if (isNaN(+_start))
        throw new TypeError("Start date is invalid");
      const _end = (0, _index.toDate)(end);
      if (isNaN(+_end))
        throw new TypeError("End date is invalid");
      if ((options == null ? void 0 : options.assertPositive) && +_start > +_end)
        throw new TypeError("End date must be after start date");
      return { start: _start, end: _end };
    }
  }
});

// node_modules/date-fns/intervalToDuration.js
var require_intervalToDuration = __commonJS({
  "node_modules/date-fns/intervalToDuration.js"(exports) {
    "use strict";
    exports.intervalToDuration = intervalToDuration;
    var _index = require_add();
    var _index2 = require_differenceInDays();
    var _index3 = require_differenceInHours();
    var _index4 = require_differenceInMinutes();
    var _index5 = require_differenceInMonths();
    var _index6 = require_differenceInSeconds();
    var _index7 = require_differenceInYears();
    var _index8 = require_toDate();
    function intervalToDuration(interval) {
      const start = (0, _index8.toDate)(interval.start);
      const end = (0, _index8.toDate)(interval.end);
      const duration = {};
      const years = (0, _index7.differenceInYears)(end, start);
      if (years)
        duration.years = years;
      const remainingMonths = (0, _index.add)(start, { years: duration.years });
      const months = (0, _index5.differenceInMonths)(end, remainingMonths);
      if (months)
        duration.months = months;
      const remainingDays = (0, _index.add)(remainingMonths, {
        months: duration.months
      });
      const days = (0, _index2.differenceInDays)(end, remainingDays);
      if (days)
        duration.days = days;
      const remainingHours = (0, _index.add)(remainingDays, {
        days: duration.days
      });
      const hours = (0, _index3.differenceInHours)(end, remainingHours);
      if (hours)
        duration.hours = hours;
      const remainingMinutes = (0, _index.add)(remainingHours, {
        hours: duration.hours
      });
      const minutes = (0, _index4.differenceInMinutes)(end, remainingMinutes);
      if (minutes)
        duration.minutes = minutes;
      const remainingSeconds = (0, _index.add)(remainingMinutes, {
        minutes: duration.minutes
      });
      const seconds = (0, _index6.differenceInSeconds)(end, remainingSeconds);
      if (seconds)
        duration.seconds = seconds;
      return duration;
    }
  }
});

// node_modules/date-fns/intlFormat.js
var require_intlFormat = __commonJS({
  "node_modules/date-fns/intlFormat.js"(exports) {
    "use strict";
    exports.intlFormat = intlFormat;
    var _index = require_toDate();
    function intlFormat(date, formatOrLocale, localeOptions) {
      let formatOptions;
      if (isFormatOptions(formatOrLocale)) {
        formatOptions = formatOrLocale;
      } else {
        localeOptions = formatOrLocale;
      }
      return new Intl.DateTimeFormat(localeOptions == null ? void 0 : localeOptions.locale, formatOptions).format(
        (0, _index.toDate)(date)
      );
    }
    function isFormatOptions(opts) {
      return opts !== void 0 && !("locale" in opts);
    }
  }
});

// node_modules/date-fns/intlFormatDistance.js
var require_intlFormatDistance = __commonJS({
  "node_modules/date-fns/intlFormatDistance.js"(exports) {
    "use strict";
    exports.intlFormatDistance = intlFormatDistance;
    var _index = require_constants();
    var _index2 = require_differenceInCalendarDays();
    var _index3 = require_differenceInCalendarMonths();
    var _index4 = require_differenceInCalendarQuarters();
    var _index5 = require_differenceInCalendarWeeks();
    var _index6 = require_differenceInCalendarYears();
    var _index7 = require_differenceInHours();
    var _index8 = require_differenceInMinutes();
    var _index9 = require_differenceInSeconds();
    var _index10 = require_toDate();
    function intlFormatDistance(date, baseDate, options) {
      let value = 0;
      let unit;
      const dateLeft = (0, _index10.toDate)(date);
      const dateRight = (0, _index10.toDate)(baseDate);
      if (!(options == null ? void 0 : options.unit)) {
        const diffInSeconds = (0, _index9.differenceInSeconds)(dateLeft, dateRight);
        if (Math.abs(diffInSeconds) < _index.secondsInMinute) {
          value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);
          unit = "second";
        } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {
          value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);
          unit = "minute";
        } else if (Math.abs(diffInSeconds) < _index.secondsInDay && Math.abs((0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) < 1) {
          value = (0, _index7.differenceInHours)(dateLeft, dateRight);
          unit = "hour";
        } else if (Math.abs(diffInSeconds) < _index.secondsInWeek && (value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) && Math.abs(value) < 7) {
          unit = "day";
        } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {
          value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);
          unit = "week";
        } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {
          value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);
          unit = "month";
        } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {
          if ((0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight) < 4) {
            value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);
            unit = "quarter";
          } else {
            value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);
            unit = "year";
          }
        } else {
          value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);
          unit = "year";
        }
      } else {
        unit = options == null ? void 0 : options.unit;
        if (unit === "second") {
          value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);
        } else if (unit === "minute") {
          value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);
        } else if (unit === "hour") {
          value = (0, _index7.differenceInHours)(dateLeft, dateRight);
        } else if (unit === "day") {
          value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight);
        } else if (unit === "week") {
          value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);
        } else if (unit === "month") {
          value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);
        } else if (unit === "quarter") {
          value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);
        } else if (unit === "year") {
          value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);
        }
      }
      const rtf = new Intl.RelativeTimeFormat(options == null ? void 0 : options.locale, {
        localeMatcher: options == null ? void 0 : options.localeMatcher,
        numeric: (options == null ? void 0 : options.numeric) || "auto",
        style: options == null ? void 0 : options.style
      });
      return rtf.format(value, unit);
    }
  }
});

// node_modules/date-fns/isAfter.js
var require_isAfter = __commonJS({
  "node_modules/date-fns/isAfter.js"(exports) {
    "use strict";
    exports.isAfter = isAfter;
    var _index = require_toDate();
    function isAfter(date, dateToCompare) {
      const _date = (0, _index.toDate)(date);
      const _dateToCompare = (0, _index.toDate)(dateToCompare);
      return _date.getTime() > _dateToCompare.getTime();
    }
  }
});

// node_modules/date-fns/isBefore.js
var require_isBefore = __commonJS({
  "node_modules/date-fns/isBefore.js"(exports) {
    "use strict";
    exports.isBefore = isBefore;
    var _index = require_toDate();
    function isBefore(date, dateToCompare) {
      const _date = (0, _index.toDate)(date);
      const _dateToCompare = (0, _index.toDate)(dateToCompare);
      return +_date < +_dateToCompare;
    }
  }
});

// node_modules/date-fns/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/date-fns/isEqual.js"(exports) {
    "use strict";
    exports.isEqual = isEqual;
    var _index = require_toDate();
    function isEqual(leftDate, rightDate) {
      const _dateLeft = (0, _index.toDate)(leftDate);
      const _dateRight = (0, _index.toDate)(rightDate);
      return +_dateLeft === +_dateRight;
    }
  }
});

// node_modules/date-fns/isExists.js
var require_isExists = __commonJS({
  "node_modules/date-fns/isExists.js"(exports) {
    "use strict";
    exports.isExists = isExists;
    function isExists(year, month, day) {
      const date = new Date(year, month, day);
      return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;
    }
  }
});

// node_modules/date-fns/isFirstDayOfMonth.js
var require_isFirstDayOfMonth = __commonJS({
  "node_modules/date-fns/isFirstDayOfMonth.js"(exports) {
    "use strict";
    exports.isFirstDayOfMonth = isFirstDayOfMonth;
    var _index = require_toDate();
    function isFirstDayOfMonth(date) {
      return (0, _index.toDate)(date).getDate() === 1;
    }
  }
});

// node_modules/date-fns/isFriday.js
var require_isFriday = __commonJS({
  "node_modules/date-fns/isFriday.js"(exports) {
    "use strict";
    exports.isFriday = isFriday;
    var _index = require_toDate();
    function isFriday(date) {
      return (0, _index.toDate)(date).getDay() === 5;
    }
  }
});

// node_modules/date-fns/isFuture.js
var require_isFuture = __commonJS({
  "node_modules/date-fns/isFuture.js"(exports) {
    "use strict";
    exports.isFuture = isFuture;
    var _index = require_toDate();
    function isFuture(date) {
      return +(0, _index.toDate)(date) > Date.now();
    }
  }
});

// node_modules/date-fns/transpose.js
var require_transpose = __commonJS({
  "node_modules/date-fns/transpose.js"(exports) {
    "use strict";
    exports.transpose = transpose;
    var _index = require_constructFrom();
    function transpose(fromDate, constructor) {
      const date = constructor instanceof Date ? (0, _index.constructFrom)(constructor, 0) : new constructor(0);
      date.setFullYear(
        fromDate.getFullYear(),
        fromDate.getMonth(),
        fromDate.getDate()
      );
      date.setHours(
        fromDate.getHours(),
        fromDate.getMinutes(),
        fromDate.getSeconds(),
        fromDate.getMilliseconds()
      );
      return date;
    }
  }
});

// node_modules/date-fns/parse/_lib/Setter.js
var require_Setter = __commonJS({
  "node_modules/date-fns/parse/_lib/Setter.js"(exports) {
    "use strict";
    exports.ValueSetter = exports.Setter = exports.DateToSystemTimezoneSetter = void 0;
    var _index = require_transpose();
    var _index2 = require_constructFrom();
    var TIMEZONE_UNIT_PRIORITY = 10;
    var Setter = class {
      constructor() {
        __publicField(this, "subPriority", 0);
      }
      validate(_utcDate, _options) {
        return true;
      }
    };
    exports.Setter = Setter;
    var ValueSetter = class extends Setter {
      constructor(value, validateValue, setValue, priority, subPriority) {
        super();
        this.value = value;
        this.validateValue = validateValue;
        this.setValue = setValue;
        this.priority = priority;
        if (subPriority) {
          this.subPriority = subPriority;
        }
      }
      validate(date, options) {
        return this.validateValue(date, this.value, options);
      }
      set(date, flags, options) {
        return this.setValue(date, flags, this.value, options);
      }
    };
    exports.ValueSetter = ValueSetter;
    var DateToSystemTimezoneSetter = class extends Setter {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", TIMEZONE_UNIT_PRIORITY);
        __publicField(this, "subPriority", -1);
      }
      set(date, flags) {
        if (flags.timestampIsSet)
          return date;
        return (0, _index2.constructFrom)(date, (0, _index.transpose)(date, Date));
      }
    };
    exports.DateToSystemTimezoneSetter = DateToSystemTimezoneSetter;
  }
});

// node_modules/date-fns/parse/_lib/Parser.js
var require_Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/Parser.js"(exports) {
    "use strict";
    exports.Parser = void 0;
    var _Setter = require_Setter();
    var Parser = class {
      run(dateString, token, match, options) {
        const result = this.parse(dateString, token, match, options);
        if (!result) {
          return null;
        }
        return {
          setter: new _Setter.ValueSetter(
            result.value,
            this.validate,
            this.set,
            this.priority,
            this.subPriority
          ),
          rest: result.rest
        };
      }
      validate(_utcDate, _value, _options) {
        return true;
      }
    };
    exports.Parser = Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/EraParser.js
var require_EraParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/EraParser.js"(exports) {
    "use strict";
    exports.EraParser = void 0;
    var _Parser = require_Parser();
    var EraParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 140);
        __publicField(this, "incompatibleTokens", ["R", "u", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "G":
          case "GG":
          case "GGG":
            return match.era(dateString, { width: "abbreviated" }) || match.era(dateString, { width: "narrow" });
          case "GGGGG":
            return match.era(dateString, { width: "narrow" });
          case "GGGG":
          default:
            return match.era(dateString, { width: "wide" }) || match.era(dateString, { width: "abbreviated" }) || match.era(dateString, { width: "narrow" });
        }
      }
      set(date, flags, value) {
        flags.era = value;
        date.setFullYear(value, 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.EraParser = EraParser;
  }
});

// node_modules/date-fns/parse/_lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/date-fns/parse/_lib/constants.js"(exports) {
    "use strict";
    exports.timezonePatterns = exports.numericPatterns = void 0;
    var numericPatterns = exports.numericPatterns = {
      month: /^(1[0-2]|0?\d)/,
      // 0 to 12
      date: /^(3[0-1]|[0-2]?\d)/,
      // 0 to 31
      dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
      // 0 to 366
      week: /^(5[0-3]|[0-4]?\d)/,
      // 0 to 53
      hour23h: /^(2[0-3]|[0-1]?\d)/,
      // 0 to 23
      hour24h: /^(2[0-4]|[0-1]?\d)/,
      // 0 to 24
      hour11h: /^(1[0-1]|0?\d)/,
      // 0 to 11
      hour12h: /^(1[0-2]|0?\d)/,
      // 0 to 12
      minute: /^[0-5]?\d/,
      // 0 to 59
      second: /^[0-5]?\d/,
      // 0 to 59
      singleDigit: /^\d/,
      // 0 to 9
      twoDigits: /^\d{1,2}/,
      // 0 to 99
      threeDigits: /^\d{1,3}/,
      // 0 to 999
      fourDigits: /^\d{1,4}/,
      // 0 to 9999
      anyDigitsSigned: /^-?\d+/,
      singleDigitSigned: /^-?\d/,
      // 0 to 9, -0 to -9
      twoDigitsSigned: /^-?\d{1,2}/,
      // 0 to 99, -0 to -99
      threeDigitsSigned: /^-?\d{1,3}/,
      // 0 to 999, -0 to -999
      fourDigitsSigned: /^-?\d{1,4}/
      // 0 to 9999, -0 to -9999
    };
    var timezonePatterns = exports.timezonePatterns = {
      basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
      basic: /^([+-])(\d{2})(\d{2})|Z/,
      basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
      extended: /^([+-])(\d{2}):(\d{2})|Z/,
      extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
    };
  }
});

// node_modules/date-fns/parse/_lib/utils.js
var require_utils = __commonJS({
  "node_modules/date-fns/parse/_lib/utils.js"(exports) {
    "use strict";
    exports.dayPeriodEnumToHours = dayPeriodEnumToHours;
    exports.isLeapYearIndex = isLeapYearIndex;
    exports.mapValue = mapValue;
    exports.normalizeTwoDigitYear = normalizeTwoDigitYear;
    exports.parseAnyDigitsSigned = parseAnyDigitsSigned;
    exports.parseNDigits = parseNDigits;
    exports.parseNDigitsSigned = parseNDigitsSigned;
    exports.parseNumericPattern = parseNumericPattern;
    exports.parseTimezonePattern = parseTimezonePattern;
    var _index = require_constants();
    var _constants = require_constants2();
    function mapValue(parseFnResult, mapFn) {
      if (!parseFnResult) {
        return parseFnResult;
      }
      return {
        value: mapFn(parseFnResult.value),
        rest: parseFnResult.rest
      };
    }
    function parseNumericPattern(pattern, dateString) {
      const matchResult = dateString.match(pattern);
      if (!matchResult) {
        return null;
      }
      return {
        value: parseInt(matchResult[0], 10),
        rest: dateString.slice(matchResult[0].length)
      };
    }
    function parseTimezonePattern(pattern, dateString) {
      const matchResult = dateString.match(pattern);
      if (!matchResult) {
        return null;
      }
      if (matchResult[0] === "Z") {
        return {
          value: 0,
          rest: dateString.slice(1)
        };
      }
      const sign = matchResult[1] === "+" ? 1 : -1;
      const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
      const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
      const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
      return {
        value: sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * _index.millisecondsInSecond),
        rest: dateString.slice(matchResult[0].length)
      };
    }
    function parseAnyDigitsSigned(dateString) {
      return parseNumericPattern(
        _constants.numericPatterns.anyDigitsSigned,
        dateString
      );
    }
    function parseNDigits(n, dateString) {
      switch (n) {
        case 1:
          return parseNumericPattern(
            _constants.numericPatterns.singleDigit,
            dateString
          );
        case 2:
          return parseNumericPattern(
            _constants.numericPatterns.twoDigits,
            dateString
          );
        case 3:
          return parseNumericPattern(
            _constants.numericPatterns.threeDigits,
            dateString
          );
        case 4:
          return parseNumericPattern(
            _constants.numericPatterns.fourDigits,
            dateString
          );
        default:
          return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
      }
    }
    function parseNDigitsSigned(n, dateString) {
      switch (n) {
        case 1:
          return parseNumericPattern(
            _constants.numericPatterns.singleDigitSigned,
            dateString
          );
        case 2:
          return parseNumericPattern(
            _constants.numericPatterns.twoDigitsSigned,
            dateString
          );
        case 3:
          return parseNumericPattern(
            _constants.numericPatterns.threeDigitsSigned,
            dateString
          );
        case 4:
          return parseNumericPattern(
            _constants.numericPatterns.fourDigitsSigned,
            dateString
          );
        default:
          return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
      }
    }
    function dayPeriodEnumToHours(dayPeriod) {
      switch (dayPeriod) {
        case "morning":
          return 4;
        case "evening":
          return 17;
        case "pm":
        case "noon":
        case "afternoon":
          return 12;
        case "am":
        case "midnight":
        case "night":
        default:
          return 0;
      }
    }
    function normalizeTwoDigitYear(twoDigitYear, currentYear) {
      const isCommonEra = currentYear > 0;
      const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
      let result;
      if (absCurrentYear <= 50) {
        result = twoDigitYear || 100;
      } else {
        const rangeEnd = absCurrentYear + 50;
        const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;
        const isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
      }
      return isCommonEra ? result : 1 - result;
    }
    function isLeapYearIndex(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
  }
});

// node_modules/date-fns/parse/_lib/parsers/YearParser.js
var require_YearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/YearParser.js"(exports) {
    "use strict";
    exports.YearParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var YearParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 130);
        __publicField(this, "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
      }
      parse(dateString, token, match) {
        const valueCallback = (year) => ({
          year,
          isTwoDigitYear: token === "yy"
        });
        switch (token) {
          case "y":
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(4, dateString),
              valueCallback
            );
          case "yo":
            return (0, _utils.mapValue)(
              match.ordinalNumber(dateString, {
                unit: "year"
              }),
              valueCallback
            );
          default:
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(token.length, dateString),
              valueCallback
            );
        }
      }
      validate(_date, value) {
        return value.isTwoDigitYear || value.year > 0;
      }
      set(date, flags, value) {
        const currentYear = date.getFullYear();
        if (value.isTwoDigitYear) {
          const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(
            value.year,
            currentYear
          );
          date.setFullYear(normalizedTwoDigitYear, 0, 1);
          date.setHours(0, 0, 0, 0);
          return date;
        }
        const year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
        date.setFullYear(year, 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.YearParser = YearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js
var require_LocalWeekYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js"(exports) {
    "use strict";
    exports.LocalWeekYearParser = void 0;
    var _index = require_getWeekYear();
    var _index2 = require_startOfWeek();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var LocalWeekYearParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 130);
        __publicField(this, "incompatibleTokens", [
          "y",
          "R",
          "u",
          "Q",
          "q",
          "M",
          "L",
          "I",
          "d",
          "D",
          "i",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        const valueCallback = (year) => ({
          year,
          isTwoDigitYear: token === "YY"
        });
        switch (token) {
          case "Y":
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(4, dateString),
              valueCallback
            );
          case "Yo":
            return (0, _utils.mapValue)(
              match.ordinalNumber(dateString, {
                unit: "year"
              }),
              valueCallback
            );
          default:
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(token.length, dateString),
              valueCallback
            );
        }
      }
      validate(_date, value) {
        return value.isTwoDigitYear || value.year > 0;
      }
      set(date, flags, value, options) {
        const currentYear = (0, _index.getWeekYear)(date, options);
        if (value.isTwoDigitYear) {
          const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(
            value.year,
            currentYear
          );
          date.setFullYear(
            normalizedTwoDigitYear,
            0,
            options.firstWeekContainsDate
          );
          date.setHours(0, 0, 0, 0);
          return (0, _index2.startOfWeek)(date, options);
        }
        const year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
        date.setFullYear(year, 0, options.firstWeekContainsDate);
        date.setHours(0, 0, 0, 0);
        return (0, _index2.startOfWeek)(date, options);
      }
    };
    exports.LocalWeekYearParser = LocalWeekYearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js
var require_ISOWeekYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js"(exports) {
    "use strict";
    exports.ISOWeekYearParser = void 0;
    var _index = require_startOfISOWeek();
    var _index2 = require_constructFrom();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var ISOWeekYearParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 130);
        __publicField(this, "incompatibleTokens", [
          "G",
          "y",
          "Y",
          "u",
          "Q",
          "q",
          "M",
          "L",
          "w",
          "d",
          "D",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token) {
        if (token === "R") {
          return (0, _utils.parseNDigitsSigned)(4, dateString);
        }
        return (0, _utils.parseNDigitsSigned)(token.length, dateString);
      }
      set(date, _flags, value) {
        const firstWeekOfYear = (0, _index2.constructFrom)(date, 0);
        firstWeekOfYear.setFullYear(value, 0, 4);
        firstWeekOfYear.setHours(0, 0, 0, 0);
        return (0, _index.startOfISOWeek)(firstWeekOfYear);
      }
    };
    exports.ISOWeekYearParser = ISOWeekYearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js
var require_ExtendedYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js"(exports) {
    "use strict";
    exports.ExtendedYearParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var ExtendedYearParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 130);
        __publicField(this, "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
      }
      parse(dateString, token) {
        if (token === "u") {
          return (0, _utils.parseNDigitsSigned)(4, dateString);
        }
        return (0, _utils.parseNDigitsSigned)(token.length, dateString);
      }
      set(date, _flags, value) {
        date.setFullYear(value, 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.ExtendedYearParser = ExtendedYearParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/QuarterParser.js
var require_QuarterParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/QuarterParser.js"(exports) {
    "use strict";
    exports.QuarterParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var QuarterParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 120);
        __publicField(this, "incompatibleTokens", [
          "Y",
          "R",
          "q",
          "M",
          "L",
          "w",
          "I",
          "d",
          "D",
          "i",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "Q":
          case "QQ":
            return (0, _utils.parseNDigits)(token.length, dateString);
          case "Qo":
            return match.ordinalNumber(dateString, { unit: "quarter" });
          case "QQQ":
            return match.quarter(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.quarter(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "QQQQQ":
            return match.quarter(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "QQQQ":
          default:
            return match.quarter(dateString, {
              width: "wide",
              context: "formatting"
            }) || match.quarter(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.quarter(dateString, {
              width: "narrow",
              context: "formatting"
            });
        }
      }
      validate(_date, value) {
        return value >= 1 && value <= 4;
      }
      set(date, _flags, value) {
        date.setMonth((value - 1) * 3, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.QuarterParser = QuarterParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js
var require_StandAloneQuarterParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js"(exports) {
    "use strict";
    exports.StandAloneQuarterParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var StandAloneQuarterParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 120);
        __publicField(this, "incompatibleTokens", [
          "Y",
          "R",
          "Q",
          "M",
          "L",
          "w",
          "I",
          "d",
          "D",
          "i",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "q":
          case "qq":
            return (0, _utils.parseNDigits)(token.length, dateString);
          case "qo":
            return match.ordinalNumber(dateString, { unit: "quarter" });
          case "qqq":
            return match.quarter(dateString, {
              width: "abbreviated",
              context: "standalone"
            }) || match.quarter(dateString, {
              width: "narrow",
              context: "standalone"
            });
          case "qqqqq":
            return match.quarter(dateString, {
              width: "narrow",
              context: "standalone"
            });
          case "qqqq":
          default:
            return match.quarter(dateString, {
              width: "wide",
              context: "standalone"
            }) || match.quarter(dateString, {
              width: "abbreviated",
              context: "standalone"
            }) || match.quarter(dateString, {
              width: "narrow",
              context: "standalone"
            });
        }
      }
      validate(_date, value) {
        return value >= 1 && value <= 4;
      }
      set(date, _flags, value) {
        date.setMonth((value - 1) * 3, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.StandAloneQuarterParser = StandAloneQuarterParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/MonthParser.js
var require_MonthParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/MonthParser.js"(exports) {
    "use strict";
    exports.MonthParser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var MonthParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "incompatibleTokens", [
          "Y",
          "R",
          "q",
          "Q",
          "L",
          "w",
          "I",
          "D",
          "i",
          "e",
          "c",
          "t",
          "T"
        ]);
        __publicField(this, "priority", 110);
      }
      parse(dateString, token, match) {
        const valueCallback = (value) => value - 1;
        switch (token) {
          case "M":
            return (0, _utils.mapValue)(
              (0, _utils.parseNumericPattern)(
                _constants.numericPatterns.month,
                dateString
              ),
              valueCallback
            );
          case "MM":
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(2, dateString),
              valueCallback
            );
          case "Mo":
            return (0, _utils.mapValue)(
              match.ordinalNumber(dateString, {
                unit: "month"
              }),
              valueCallback
            );
          case "MMM":
            return match.month(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.month(dateString, { width: "narrow", context: "formatting" });
          case "MMMMM":
            return match.month(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "MMMM":
          default:
            return match.month(dateString, { width: "wide", context: "formatting" }) || match.month(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.month(dateString, { width: "narrow", context: "formatting" });
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 11;
      }
      set(date, _flags, value) {
        date.setMonth(value, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.MonthParser = MonthParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js
var require_StandAloneMonthParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js"(exports) {
    "use strict";
    exports.StandAloneMonthParser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var StandAloneMonthParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 110);
        __publicField(this, "incompatibleTokens", [
          "Y",
          "R",
          "q",
          "Q",
          "M",
          "w",
          "I",
          "D",
          "i",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        const valueCallback = (value) => value - 1;
        switch (token) {
          case "L":
            return (0, _utils.mapValue)(
              (0, _utils.parseNumericPattern)(
                _constants.numericPatterns.month,
                dateString
              ),
              valueCallback
            );
          case "LL":
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(2, dateString),
              valueCallback
            );
          case "Lo":
            return (0, _utils.mapValue)(
              match.ordinalNumber(dateString, {
                unit: "month"
              }),
              valueCallback
            );
          case "LLL":
            return match.month(dateString, {
              width: "abbreviated",
              context: "standalone"
            }) || match.month(dateString, { width: "narrow", context: "standalone" });
          case "LLLLL":
            return match.month(dateString, {
              width: "narrow",
              context: "standalone"
            });
          case "LLLL":
          default:
            return match.month(dateString, { width: "wide", context: "standalone" }) || match.month(dateString, {
              width: "abbreviated",
              context: "standalone"
            }) || match.month(dateString, { width: "narrow", context: "standalone" });
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 11;
      }
      set(date, _flags, value) {
        date.setMonth(value, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.StandAloneMonthParser = StandAloneMonthParser;
  }
});

// node_modules/date-fns/setWeek.js
var require_setWeek = __commonJS({
  "node_modules/date-fns/setWeek.js"(exports) {
    "use strict";
    exports.setWeek = setWeek;
    var _index = require_getWeek();
    var _index2 = require_toDate();
    function setWeek(date, week, options) {
      const _date = (0, _index2.toDate)(date);
      const diff = (0, _index.getWeek)(_date, options) - week;
      _date.setDate(_date.getDate() - diff * 7);
      return _date;
    }
  }
});

// node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js
var require_LocalWeekParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js"(exports) {
    "use strict";
    exports.LocalWeekParser = void 0;
    var _index = require_setWeek();
    var _index2 = require_startOfWeek();
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var LocalWeekParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 100);
        __publicField(this, "incompatibleTokens", [
          "y",
          "R",
          "u",
          "q",
          "Q",
          "M",
          "L",
          "I",
          "d",
          "D",
          "i",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "w":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.week,
              dateString
            );
          case "wo":
            return match.ordinalNumber(dateString, { unit: "week" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 1 && value <= 53;
      }
      set(date, _flags, value, options) {
        return (0, _index2.startOfWeek)(
          (0, _index.setWeek)(date, value, options),
          options
        );
      }
    };
    exports.LocalWeekParser = LocalWeekParser;
  }
});

// node_modules/date-fns/setISOWeek.js
var require_setISOWeek = __commonJS({
  "node_modules/date-fns/setISOWeek.js"(exports) {
    "use strict";
    exports.setISOWeek = setISOWeek;
    var _index = require_getISOWeek();
    var _index2 = require_toDate();
    function setISOWeek(date, week) {
      const _date = (0, _index2.toDate)(date);
      const diff = (0, _index.getISOWeek)(_date) - week;
      _date.setDate(_date.getDate() - diff * 7);
      return _date;
    }
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js
var require_ISOWeekParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js"(exports) {
    "use strict";
    exports.ISOWeekParser = void 0;
    var _index = require_setISOWeek();
    var _index2 = require_startOfISOWeek();
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var ISOWeekParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 100);
        __publicField(this, "incompatibleTokens", [
          "y",
          "Y",
          "u",
          "q",
          "Q",
          "M",
          "L",
          "w",
          "d",
          "D",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "I":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.week,
              dateString
            );
          case "Io":
            return match.ordinalNumber(dateString, { unit: "week" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 1 && value <= 53;
      }
      set(date, _flags, value) {
        return (0, _index2.startOfISOWeek)((0, _index.setISOWeek)(date, value));
      }
    };
    exports.ISOWeekParser = ISOWeekParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/DateParser.js
var require_DateParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DateParser.js"(exports) {
    "use strict";
    exports.DateParser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var DAYS_IN_MONTH_LEAP_YEAR = [
      31,
      29,
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31
    ];
    var DateParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 90);
        __publicField(this, "subPriority", 1);
        __publicField(this, "incompatibleTokens", [
          "Y",
          "R",
          "q",
          "Q",
          "w",
          "I",
          "D",
          "i",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "d":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.date,
              dateString
            );
          case "do":
            return match.ordinalNumber(dateString, { unit: "date" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(date, value) {
        const year = date.getFullYear();
        const isLeapYear = (0, _utils.isLeapYearIndex)(year);
        const month = date.getMonth();
        if (isLeapYear) {
          return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
        } else {
          return value >= 1 && value <= DAYS_IN_MONTH[month];
        }
      }
      set(date, _flags, value) {
        date.setDate(value);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.DateParser = DateParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js
var require_DayOfYearParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js"(exports) {
    "use strict";
    exports.DayOfYearParser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var DayOfYearParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 90);
        __publicField(this, "subpriority", 1);
        __publicField(this, "incompatibleTokens", [
          "Y",
          "R",
          "q",
          "Q",
          "M",
          "L",
          "w",
          "I",
          "d",
          "E",
          "i",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "D":
          case "DD":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.dayOfYear,
              dateString
            );
          case "Do":
            return match.ordinalNumber(dateString, { unit: "date" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(date, value) {
        const year = date.getFullYear();
        const isLeapYear = (0, _utils.isLeapYearIndex)(year);
        if (isLeapYear) {
          return value >= 1 && value <= 366;
        } else {
          return value >= 1 && value <= 365;
        }
      }
      set(date, _flags, value) {
        date.setMonth(0, value);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.DayOfYearParser = DayOfYearParser;
  }
});

// node_modules/date-fns/setDay.js
var require_setDay = __commonJS({
  "node_modules/date-fns/setDay.js"(exports) {
    "use strict";
    exports.setDay = setDay;
    var _index = require_addDays();
    var _index2 = require_toDate();
    var _index3 = require_defaultOptions();
    function setDay(date, day, options) {
      var _a, _b, _c, _d;
      const defaultOptions = (0, _index3.getDefaultOptions)();
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
      const _date = (0, _index2.toDate)(date);
      const currentDay = _date.getDay();
      const remainder = day % 7;
      const dayIndex = (remainder + 7) % 7;
      const delta = 7 - weekStartsOn;
      const diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;
      return (0, _index.addDays)(_date, diff);
    }
  }
});

// node_modules/date-fns/parse/_lib/parsers/DayParser.js
var require_DayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DayParser.js"(exports) {
    "use strict";
    exports.DayParser = void 0;
    var _index = require_setDay();
    var _Parser = require_Parser();
    var DayParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 90);
        __publicField(this, "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "E":
          case "EE":
          case "EEE":
            return match.day(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
          case "EEEEE":
            return match.day(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "EEEEEE":
            return match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
          case "EEEE":
          default:
            return match.day(dateString, { width: "wide", context: "formatting" }) || match.day(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 6;
      }
      set(date, _flags, value, options) {
        date = (0, _index.setDay)(date, value, options);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.DayParser = DayParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js
var require_LocalDayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js"(exports) {
    "use strict";
    exports.LocalDayParser = void 0;
    var _index = require_setDay();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var LocalDayParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 90);
        __publicField(this, "incompatibleTokens", [
          "y",
          "R",
          "u",
          "q",
          "Q",
          "M",
          "L",
          "I",
          "d",
          "D",
          "E",
          "i",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match, options) {
        const valueCallback = (value) => {
          const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
          return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
        };
        switch (token) {
          case "e":
          case "ee":
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(token.length, dateString),
              valueCallback
            );
          case "eo":
            return (0, _utils.mapValue)(
              match.ordinalNumber(dateString, {
                unit: "day"
              }),
              valueCallback
            );
          case "eee":
            return match.day(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
          case "eeeee":
            return match.day(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "eeeeee":
            return match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
          case "eeee":
          default:
            return match.day(dateString, { width: "wide", context: "formatting" }) || match.day(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 6;
      }
      set(date, _flags, value, options) {
        date = (0, _index.setDay)(date, value, options);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.LocalDayParser = LocalDayParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js
var require_StandAloneLocalDayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js"(exports) {
    "use strict";
    exports.StandAloneLocalDayParser = void 0;
    var _index = require_setDay();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var StandAloneLocalDayParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 90);
        __publicField(this, "incompatibleTokens", [
          "y",
          "R",
          "u",
          "q",
          "Q",
          "M",
          "L",
          "I",
          "d",
          "D",
          "E",
          "i",
          "e",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match, options) {
        const valueCallback = (value) => {
          const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
          return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
        };
        switch (token) {
          case "c":
          case "cc":
            return (0, _utils.mapValue)(
              (0, _utils.parseNDigits)(token.length, dateString),
              valueCallback
            );
          case "co":
            return (0, _utils.mapValue)(
              match.ordinalNumber(dateString, {
                unit: "day"
              }),
              valueCallback
            );
          case "ccc":
            return match.day(dateString, {
              width: "abbreviated",
              context: "standalone"
            }) || match.day(dateString, { width: "short", context: "standalone" }) || match.day(dateString, { width: "narrow", context: "standalone" });
          case "ccccc":
            return match.day(dateString, {
              width: "narrow",
              context: "standalone"
            });
          case "cccccc":
            return match.day(dateString, { width: "short", context: "standalone" }) || match.day(dateString, { width: "narrow", context: "standalone" });
          case "cccc":
          default:
            return match.day(dateString, { width: "wide", context: "standalone" }) || match.day(dateString, {
              width: "abbreviated",
              context: "standalone"
            }) || match.day(dateString, { width: "short", context: "standalone" }) || match.day(dateString, { width: "narrow", context: "standalone" });
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 6;
      }
      set(date, _flags, value, options) {
        date = (0, _index.setDay)(date, value, options);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.StandAloneLocalDayParser = StandAloneLocalDayParser;
  }
});

// node_modules/date-fns/setISODay.js
var require_setISODay = __commonJS({
  "node_modules/date-fns/setISODay.js"(exports) {
    "use strict";
    exports.setISODay = setISODay;
    var _index = require_addDays();
    var _index2 = require_getISODay();
    var _index3 = require_toDate();
    function setISODay(date, day) {
      const _date = (0, _index3.toDate)(date);
      const currentDay = (0, _index2.getISODay)(_date);
      const diff = day - currentDay;
      return (0, _index.addDays)(_date, diff);
    }
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISODayParser.js
var require_ISODayParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISODayParser.js"(exports) {
    "use strict";
    exports.ISODayParser = void 0;
    var _index = require_setISODay();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var ISODayParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 90);
        __publicField(this, "incompatibleTokens", [
          "y",
          "Y",
          "u",
          "q",
          "Q",
          "M",
          "L",
          "w",
          "d",
          "D",
          "E",
          "e",
          "c",
          "t",
          "T"
        ]);
      }
      parse(dateString, token, match) {
        const valueCallback = (value) => {
          if (value === 0) {
            return 7;
          }
          return value;
        };
        switch (token) {
          case "i":
          case "ii":
            return (0, _utils.parseNDigits)(token.length, dateString);
          case "io":
            return match.ordinalNumber(dateString, { unit: "day" });
          case "iii":
            return (0, _utils.mapValue)(
              match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }),
              valueCallback
            );
          case "iiiii":
            return (0, _utils.mapValue)(
              match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }),
              valueCallback
            );
          case "iiiiii":
            return (0, _utils.mapValue)(
              match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }),
              valueCallback
            );
          case "iiii":
          default:
            return (0, _utils.mapValue)(
              match.day(dateString, {
                width: "wide",
                context: "formatting"
              }) || match.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match.day(dateString, {
                width: "narrow",
                context: "formatting"
              }),
              valueCallback
            );
        }
      }
      validate(_date, value) {
        return value >= 1 && value <= 7;
      }
      set(date, _flags, value) {
        date = (0, _index.setISODay)(date, value);
        date.setHours(0, 0, 0, 0);
        return date;
      }
    };
    exports.ISODayParser = ISODayParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/AMPMParser.js
var require_AMPMParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/AMPMParser.js"(exports) {
    "use strict";
    exports.AMPMParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var AMPMParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 80);
        __publicField(this, "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "a":
          case "aa":
          case "aaa":
            return match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaaa":
            return match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaa":
          default:
            return match.dayPeriod(dateString, {
              width: "wide",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
        }
      }
      set(date, _flags, value) {
        date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
        return date;
      }
    };
    exports.AMPMParser = AMPMParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js
var require_AMPMMidnightParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js"(exports) {
    "use strict";
    exports.AMPMMidnightParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var AMPMMidnightParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 80);
        __publicField(this, "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "b":
          case "bb":
          case "bbb":
            return match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbbb":
            return match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbb":
          default:
            return match.dayPeriod(dateString, {
              width: "wide",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
        }
      }
      set(date, _flags, value) {
        date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
        return date;
      }
    };
    exports.AMPMMidnightParser = AMPMMidnightParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js
var require_DayPeriodParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js"(exports) {
    "use strict";
    exports.DayPeriodParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var DayPeriodParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 80);
        __publicField(this, "incompatibleTokens", ["a", "b", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "B":
          case "BB":
          case "BBB":
            return match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBBB":
            return match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBB":
          default:
            return match.dayPeriod(dateString, {
              width: "wide",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting"
            }) || match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting"
            });
        }
      }
      set(date, _flags, value) {
        date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
        return date;
      }
    };
    exports.DayPeriodParser = DayPeriodParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js
var require_Hour1to12Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js"(exports) {
    "use strict";
    exports.Hour1to12Parser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var Hour1to12Parser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 70);
        __publicField(this, "incompatibleTokens", ["H", "K", "k", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "h":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.hour12h,
              dateString
            );
          case "ho":
            return match.ordinalNumber(dateString, { unit: "hour" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 1 && value <= 12;
      }
      set(date, _flags, value) {
        const isPM = date.getHours() >= 12;
        if (isPM && value < 12) {
          date.setHours(value + 12, 0, 0, 0);
        } else if (!isPM && value === 12) {
          date.setHours(0, 0, 0, 0);
        } else {
          date.setHours(value, 0, 0, 0);
        }
        return date;
      }
    };
    exports.Hour1to12Parser = Hour1to12Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js
var require_Hour0to23Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js"(exports) {
    "use strict";
    exports.Hour0to23Parser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var Hour0to23Parser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 70);
        __publicField(this, "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "H":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.hour23h,
              dateString
            );
          case "Ho":
            return match.ordinalNumber(dateString, { unit: "hour" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 23;
      }
      set(date, _flags, value) {
        date.setHours(value, 0, 0, 0);
        return date;
      }
    };
    exports.Hour0to23Parser = Hour0to23Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js
var require_Hour0To11Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js"(exports) {
    "use strict";
    exports.Hour0To11Parser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var Hour0To11Parser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 70);
        __publicField(this, "incompatibleTokens", ["h", "H", "k", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "K":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.hour11h,
              dateString
            );
          case "Ko":
            return match.ordinalNumber(dateString, { unit: "hour" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 11;
      }
      set(date, _flags, value) {
        const isPM = date.getHours() >= 12;
        if (isPM && value < 12) {
          date.setHours(value + 12, 0, 0, 0);
        } else {
          date.setHours(value, 0, 0, 0);
        }
        return date;
      }
    };
    exports.Hour0To11Parser = Hour0To11Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js
var require_Hour1To24Parser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js"(exports) {
    "use strict";
    exports.Hour1To24Parser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var Hour1To24Parser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 70);
        __publicField(this, "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "k":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.hour24h,
              dateString
            );
          case "ko":
            return match.ordinalNumber(dateString, { unit: "hour" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 1 && value <= 24;
      }
      set(date, _flags, value) {
        const hours = value <= 24 ? value % 24 : value;
        date.setHours(hours, 0, 0, 0);
        return date;
      }
    };
    exports.Hour1To24Parser = Hour1To24Parser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/MinuteParser.js
var require_MinuteParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/MinuteParser.js"(exports) {
    "use strict";
    exports.MinuteParser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var MinuteParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 60);
        __publicField(this, "incompatibleTokens", ["t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "m":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.minute,
              dateString
            );
          case "mo":
            return match.ordinalNumber(dateString, { unit: "minute" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 59;
      }
      set(date, _flags, value) {
        date.setMinutes(value, 0, 0);
        return date;
      }
    };
    exports.MinuteParser = MinuteParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/SecondParser.js
var require_SecondParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/SecondParser.js"(exports) {
    "use strict";
    exports.SecondParser = void 0;
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var SecondParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 50);
        __publicField(this, "incompatibleTokens", ["t", "T"]);
      }
      parse(dateString, token, match) {
        switch (token) {
          case "s":
            return (0, _utils.parseNumericPattern)(
              _constants.numericPatterns.second,
              dateString
            );
          case "so":
            return match.ordinalNumber(dateString, { unit: "second" });
          default:
            return (0, _utils.parseNDigits)(token.length, dateString);
        }
      }
      validate(_date, value) {
        return value >= 0 && value <= 59;
      }
      set(date, _flags, value) {
        date.setSeconds(value, 0);
        return date;
      }
    };
    exports.SecondParser = SecondParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js
var require_FractionOfSecondParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js"(exports) {
    "use strict";
    exports.FractionOfSecondParser = void 0;
    var _Parser = require_Parser();
    var _utils = require_utils();
    var FractionOfSecondParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 30);
        __publicField(this, "incompatibleTokens", ["t", "T"]);
      }
      parse(dateString, token) {
        const valueCallback = (value) => Math.trunc(value * Math.pow(10, -token.length + 3));
        return (0, _utils.mapValue)(
          (0, _utils.parseNDigits)(token.length, dateString),
          valueCallback
        );
      }
      set(date, _flags, value) {
        date.setMilliseconds(value);
        return date;
      }
    };
    exports.FractionOfSecondParser = FractionOfSecondParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js
var require_ISOTimezoneWithZParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js"(exports) {
    "use strict";
    exports.ISOTimezoneWithZParser = void 0;
    var _index = require_constructFrom();
    var _index2 = require_getTimezoneOffsetInMilliseconds();
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var ISOTimezoneWithZParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 10);
        __publicField(this, "incompatibleTokens", ["t", "T", "x"]);
      }
      parse(dateString, token) {
        switch (token) {
          case "X":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.basicOptionalMinutes,
              dateString
            );
          case "XX":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.basic,
              dateString
            );
          case "XXXX":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.basicOptionalSeconds,
              dateString
            );
          case "XXXXX":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.extendedOptionalSeconds,
              dateString
            );
          case "XXX":
          default:
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.extended,
              dateString
            );
        }
      }
      set(date, flags, value) {
        if (flags.timestampIsSet)
          return date;
        return (0, _index.constructFrom)(
          date,
          date.getTime() - (0, _index2.getTimezoneOffsetInMilliseconds)(date) - value
        );
      }
    };
    exports.ISOTimezoneWithZParser = ISOTimezoneWithZParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js
var require_ISOTimezoneParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js"(exports) {
    "use strict";
    exports.ISOTimezoneParser = void 0;
    var _index = require_constructFrom();
    var _index2 = require_getTimezoneOffsetInMilliseconds();
    var _constants = require_constants2();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var ISOTimezoneParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 10);
        __publicField(this, "incompatibleTokens", ["t", "T", "X"]);
      }
      parse(dateString, token) {
        switch (token) {
          case "x":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.basicOptionalMinutes,
              dateString
            );
          case "xx":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.basic,
              dateString
            );
          case "xxxx":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.basicOptionalSeconds,
              dateString
            );
          case "xxxxx":
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.extendedOptionalSeconds,
              dateString
            );
          case "xxx":
          default:
            return (0, _utils.parseTimezonePattern)(
              _constants.timezonePatterns.extended,
              dateString
            );
        }
      }
      set(date, flags, value) {
        if (flags.timestampIsSet)
          return date;
        return (0, _index.constructFrom)(
          date,
          date.getTime() - (0, _index2.getTimezoneOffsetInMilliseconds)(date) - value
        );
      }
    };
    exports.ISOTimezoneParser = ISOTimezoneParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js
var require_TimestampSecondsParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js"(exports) {
    "use strict";
    exports.TimestampSecondsParser = void 0;
    var _index = require_constructFrom();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var TimestampSecondsParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 40);
        __publicField(this, "incompatibleTokens", "*");
      }
      parse(dateString) {
        return (0, _utils.parseAnyDigitsSigned)(dateString);
      }
      set(date, _flags, value) {
        return [
          (0, _index.constructFrom)(date, value * 1e3),
          { timestampIsSet: true }
        ];
      }
    };
    exports.TimestampSecondsParser = TimestampSecondsParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js
var require_TimestampMillisecondsParser = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js"(exports) {
    "use strict";
    exports.TimestampMillisecondsParser = void 0;
    var _index = require_constructFrom();
    var _Parser = require_Parser();
    var _utils = require_utils();
    var TimestampMillisecondsParser = class extends _Parser.Parser {
      constructor() {
        super(...arguments);
        __publicField(this, "priority", 20);
        __publicField(this, "incompatibleTokens", "*");
      }
      parse(dateString) {
        return (0, _utils.parseAnyDigitsSigned)(dateString);
      }
      set(date, _flags, value) {
        return [(0, _index.constructFrom)(date, value), { timestampIsSet: true }];
      }
    };
    exports.TimestampMillisecondsParser = TimestampMillisecondsParser;
  }
});

// node_modules/date-fns/parse/_lib/parsers.js
var require_parsers = __commonJS({
  "node_modules/date-fns/parse/_lib/parsers.js"(exports) {
    "use strict";
    exports.parsers = void 0;
    var _EraParser = require_EraParser();
    var _YearParser = require_YearParser();
    var _LocalWeekYearParser = require_LocalWeekYearParser();
    var _ISOWeekYearParser = require_ISOWeekYearParser();
    var _ExtendedYearParser = require_ExtendedYearParser();
    var _QuarterParser = require_QuarterParser();
    var _StandAloneQuarterParser = require_StandAloneQuarterParser();
    var _MonthParser = require_MonthParser();
    var _StandAloneMonthParser = require_StandAloneMonthParser();
    var _LocalWeekParser = require_LocalWeekParser();
    var _ISOWeekParser = require_ISOWeekParser();
    var _DateParser = require_DateParser();
    var _DayOfYearParser = require_DayOfYearParser();
    var _DayParser = require_DayParser();
    var _LocalDayParser = require_LocalDayParser();
    var _StandAloneLocalDayParser = require_StandAloneLocalDayParser();
    var _ISODayParser = require_ISODayParser();
    var _AMPMParser = require_AMPMParser();
    var _AMPMMidnightParser = require_AMPMMidnightParser();
    var _DayPeriodParser = require_DayPeriodParser();
    var _Hour1to12Parser = require_Hour1to12Parser();
    var _Hour0to23Parser = require_Hour0to23Parser();
    var _Hour0To11Parser = require_Hour0To11Parser();
    var _Hour1To24Parser = require_Hour1To24Parser();
    var _MinuteParser = require_MinuteParser();
    var _SecondParser = require_SecondParser();
    var _FractionOfSecondParser = require_FractionOfSecondParser();
    var _ISOTimezoneWithZParser = require_ISOTimezoneWithZParser();
    var _ISOTimezoneParser = require_ISOTimezoneParser();
    var _TimestampSecondsParser = require_TimestampSecondsParser();
    var _TimestampMillisecondsParser = require_TimestampMillisecondsParser();
    var parsers = exports.parsers = {
      G: new _EraParser.EraParser(),
      y: new _YearParser.YearParser(),
      Y: new _LocalWeekYearParser.LocalWeekYearParser(),
      R: new _ISOWeekYearParser.ISOWeekYearParser(),
      u: new _ExtendedYearParser.ExtendedYearParser(),
      Q: new _QuarterParser.QuarterParser(),
      q: new _StandAloneQuarterParser.StandAloneQuarterParser(),
      M: new _MonthParser.MonthParser(),
      L: new _StandAloneMonthParser.StandAloneMonthParser(),
      w: new _LocalWeekParser.LocalWeekParser(),
      I: new _ISOWeekParser.ISOWeekParser(),
      d: new _DateParser.DateParser(),
      D: new _DayOfYearParser.DayOfYearParser(),
      E: new _DayParser.DayParser(),
      e: new _LocalDayParser.LocalDayParser(),
      c: new _StandAloneLocalDayParser.StandAloneLocalDayParser(),
      i: new _ISODayParser.ISODayParser(),
      a: new _AMPMParser.AMPMParser(),
      b: new _AMPMMidnightParser.AMPMMidnightParser(),
      B: new _DayPeriodParser.DayPeriodParser(),
      h: new _Hour1to12Parser.Hour1to12Parser(),
      H: new _Hour0to23Parser.Hour0to23Parser(),
      K: new _Hour0To11Parser.Hour0To11Parser(),
      k: new _Hour1To24Parser.Hour1To24Parser(),
      m: new _MinuteParser.MinuteParser(),
      s: new _SecondParser.SecondParser(),
      S: new _FractionOfSecondParser.FractionOfSecondParser(),
      X: new _ISOTimezoneWithZParser.ISOTimezoneWithZParser(),
      x: new _ISOTimezoneParser.ISOTimezoneParser(),
      t: new _TimestampSecondsParser.TimestampSecondsParser(),
      T: new _TimestampMillisecondsParser.TimestampMillisecondsParser()
    };
  }
});

// node_modules/date-fns/parse.js
var require_parse = __commonJS({
  "node_modules/date-fns/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "longFormatters", {
      enumerable: true,
      get: function() {
        return _index5.longFormatters;
      }
    });
    exports.parse = parse;
    Object.defineProperty(exports, "parsers", {
      enumerable: true,
      get: function() {
        return _index7.parsers;
      }
    });
    var _index = require_constructFrom();
    var _index2 = require_getDefaultOptions();
    var _index3 = require_defaultLocale();
    var _index4 = require_toDate();
    var _index5 = require_longFormatters();
    var _index6 = require_protectedTokens();
    var _index7 = require_parsers();
    var _Setter = require_Setter();
    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var notWhitespaceRegExp = /\S/;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function parse(dateStr, formatStr, referenceDate, options) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const defaultOptions = (0, _index2.getDefaultOptions)();
      const locale = (options == null ? void 0 : options.locale) ?? defaultOptions.locale ?? _index3.defaultLocale;
      const firstWeekContainsDate = (options == null ? void 0 : options.firstWeekContainsDate) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? defaultOptions.firstWeekContainsDate ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) ?? 1;
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_f = (_e = options == null ? void 0 : options.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_h = (_g = defaultOptions.locale) == null ? void 0 : _g.options) == null ? void 0 : _h.weekStartsOn) ?? 0;
      if (formatStr === "") {
        if (dateStr === "") {
          return (0, _index4.toDate)(referenceDate);
        } else {
          return (0, _index.constructFrom)(referenceDate, NaN);
        }
      }
      const subFnOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale
      };
      const setters = [new _Setter.DateToSystemTimezoneSetter()];
      const tokens = formatStr.match(longFormattingTokensRegExp).map((substring) => {
        const firstCharacter = substring[0];
        if (firstCharacter in _index5.longFormatters) {
          const longFormatter = _index5.longFormatters[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      }).join("").match(formattingTokensRegExp);
      const usedTokens = [];
      for (let token of tokens) {
        if (!(options == null ? void 0 : options.useAdditionalWeekYearTokens) && (0, _index6.isProtectedWeekYearToken)(token)) {
          (0, _index6.warnOrThrowProtectedError)(token, formatStr, dateStr);
        }
        if (!(options == null ? void 0 : options.useAdditionalDayOfYearTokens) && (0, _index6.isProtectedDayOfYearToken)(token)) {
          (0, _index6.warnOrThrowProtectedError)(token, formatStr, dateStr);
        }
        const firstCharacter = token[0];
        const parser = _index7.parsers[firstCharacter];
        if (parser) {
          const { incompatibleTokens } = parser;
          if (Array.isArray(incompatibleTokens)) {
            const incompatibleToken = usedTokens.find(
              (usedToken) => incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter
            );
            if (incompatibleToken) {
              throw new RangeError(
                `The format string mustn't contain \`${incompatibleToken.fullToken}\` and \`${token}\` at the same time`
              );
            }
          } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
            throw new RangeError(
              `The format string mustn't contain \`${token}\` and any other token at the same time`
            );
          }
          usedTokens.push({ token: firstCharacter, fullToken: token });
          const parseResult = parser.run(
            dateStr,
            token,
            locale.match,
            subFnOptions
          );
          if (!parseResult) {
            return (0, _index.constructFrom)(referenceDate, NaN);
          }
          setters.push(parseResult.setter);
          dateStr = parseResult.rest;
        } else {
          if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
            throw new RangeError(
              "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
            );
          }
          if (token === "''") {
            token = "'";
          } else if (firstCharacter === "'") {
            token = cleanEscapedString(token);
          }
          if (dateStr.indexOf(token) === 0) {
            dateStr = dateStr.slice(token.length);
          } else {
            return (0, _index.constructFrom)(referenceDate, NaN);
          }
        }
      }
      if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {
        return (0, _index.constructFrom)(referenceDate, NaN);
      }
      const uniquePrioritySetters = setters.map((setter) => setter.priority).sort((a, b) => b - a).filter((priority, index, array) => array.indexOf(priority) === index).map(
        (priority) => setters.filter((setter) => setter.priority === priority).sort((a, b) => b.subPriority - a.subPriority)
      ).map((setterArray) => setterArray[0]);
      let date = (0, _index4.toDate)(referenceDate);
      if (isNaN(date.getTime())) {
        return (0, _index.constructFrom)(referenceDate, NaN);
      }
      const flags = {};
      for (const setter of uniquePrioritySetters) {
        if (!setter.validate(date, subFnOptions)) {
          return (0, _index.constructFrom)(referenceDate, NaN);
        }
        const result = setter.set(date, flags, subFnOptions);
        if (Array.isArray(result)) {
          date = result[0];
          Object.assign(flags, result[1]);
        } else {
          date = result;
        }
      }
      return (0, _index.constructFrom)(referenceDate, date);
    }
    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }
  }
});

// node_modules/date-fns/isMatch.js
var require_isMatch = __commonJS({
  "node_modules/date-fns/isMatch.js"(exports) {
    "use strict";
    exports.isMatch = isMatch;
    var _index = require_isValid();
    var _index2 = require_parse();
    function isMatch(dateStr, formatStr, options) {
      return (0, _index.isValid)(
        (0, _index2.parse)(dateStr, formatStr, /* @__PURE__ */ new Date(), options)
      );
    }
  }
});

// node_modules/date-fns/isMonday.js
var require_isMonday = __commonJS({
  "node_modules/date-fns/isMonday.js"(exports) {
    "use strict";
    exports.isMonday = isMonday;
    var _index = require_toDate();
    function isMonday(date) {
      return (0, _index.toDate)(date).getDay() === 1;
    }
  }
});

// node_modules/date-fns/isPast.js
var require_isPast = __commonJS({
  "node_modules/date-fns/isPast.js"(exports) {
    "use strict";
    exports.isPast = isPast;
    var _index = require_toDate();
    function isPast(date) {
      return +(0, _index.toDate)(date) < Date.now();
    }
  }
});

// node_modules/date-fns/startOfHour.js
var require_startOfHour = __commonJS({
  "node_modules/date-fns/startOfHour.js"(exports) {
    "use strict";
    exports.startOfHour = startOfHour;
    var _index = require_toDate();
    function startOfHour(date) {
      const _date = (0, _index.toDate)(date);
      _date.setMinutes(0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/isSameHour.js
var require_isSameHour = __commonJS({
  "node_modules/date-fns/isSameHour.js"(exports) {
    "use strict";
    exports.isSameHour = isSameHour;
    var _index = require_startOfHour();
    function isSameHour(dateLeft, dateRight) {
      const dateLeftStartOfHour = (0, _index.startOfHour)(dateLeft);
      const dateRightStartOfHour = (0, _index.startOfHour)(dateRight);
      return +dateLeftStartOfHour === +dateRightStartOfHour;
    }
  }
});

// node_modules/date-fns/isSameWeek.js
var require_isSameWeek = __commonJS({
  "node_modules/date-fns/isSameWeek.js"(exports) {
    "use strict";
    exports.isSameWeek = isSameWeek;
    var _index = require_startOfWeek();
    function isSameWeek(dateLeft, dateRight, options) {
      const dateLeftStartOfWeek = (0, _index.startOfWeek)(dateLeft, options);
      const dateRightStartOfWeek = (0, _index.startOfWeek)(dateRight, options);
      return +dateLeftStartOfWeek === +dateRightStartOfWeek;
    }
  }
});

// node_modules/date-fns/isSameISOWeek.js
var require_isSameISOWeek = __commonJS({
  "node_modules/date-fns/isSameISOWeek.js"(exports) {
    "use strict";
    exports.isSameISOWeek = isSameISOWeek;
    var _index = require_isSameWeek();
    function isSameISOWeek(dateLeft, dateRight) {
      return (0, _index.isSameWeek)(dateLeft, dateRight, { weekStartsOn: 1 });
    }
  }
});

// node_modules/date-fns/isSameISOWeekYear.js
var require_isSameISOWeekYear = __commonJS({
  "node_modules/date-fns/isSameISOWeekYear.js"(exports) {
    "use strict";
    exports.isSameISOWeekYear = isSameISOWeekYear;
    var _index = require_startOfISOWeekYear();
    function isSameISOWeekYear(dateLeft, dateRight) {
      const dateLeftStartOfYear = (0, _index.startOfISOWeekYear)(dateLeft);
      const dateRightStartOfYear = (0, _index.startOfISOWeekYear)(dateRight);
      return +dateLeftStartOfYear === +dateRightStartOfYear;
    }
  }
});

// node_modules/date-fns/isSameMinute.js
var require_isSameMinute = __commonJS({
  "node_modules/date-fns/isSameMinute.js"(exports) {
    "use strict";
    exports.isSameMinute = isSameMinute;
    var _index = require_startOfMinute();
    function isSameMinute(dateLeft, dateRight) {
      const dateLeftStartOfMinute = (0, _index.startOfMinute)(dateLeft);
      const dateRightStartOfMinute = (0, _index.startOfMinute)(dateRight);
      return +dateLeftStartOfMinute === +dateRightStartOfMinute;
    }
  }
});

// node_modules/date-fns/isSameMonth.js
var require_isSameMonth = __commonJS({
  "node_modules/date-fns/isSameMonth.js"(exports) {
    "use strict";
    exports.isSameMonth = isSameMonth;
    var _index = require_toDate();
    function isSameMonth(dateLeft, dateRight) {
      const _dateLeft = (0, _index.toDate)(dateLeft);
      const _dateRight = (0, _index.toDate)(dateRight);
      return _dateLeft.getFullYear() === _dateRight.getFullYear() && _dateLeft.getMonth() === _dateRight.getMonth();
    }
  }
});

// node_modules/date-fns/isSameQuarter.js
var require_isSameQuarter = __commonJS({
  "node_modules/date-fns/isSameQuarter.js"(exports) {
    "use strict";
    exports.isSameQuarter = isSameQuarter;
    var _index = require_startOfQuarter();
    function isSameQuarter(dateLeft, dateRight) {
      const dateLeftStartOfQuarter = (0, _index.startOfQuarter)(dateLeft);
      const dateRightStartOfQuarter = (0, _index.startOfQuarter)(dateRight);
      return +dateLeftStartOfQuarter === +dateRightStartOfQuarter;
    }
  }
});

// node_modules/date-fns/startOfSecond.js
var require_startOfSecond = __commonJS({
  "node_modules/date-fns/startOfSecond.js"(exports) {
    "use strict";
    exports.startOfSecond = startOfSecond;
    var _index = require_toDate();
    function startOfSecond(date) {
      const _date = (0, _index.toDate)(date);
      _date.setMilliseconds(0);
      return _date;
    }
  }
});

// node_modules/date-fns/isSameSecond.js
var require_isSameSecond = __commonJS({
  "node_modules/date-fns/isSameSecond.js"(exports) {
    "use strict";
    exports.isSameSecond = isSameSecond;
    var _index = require_startOfSecond();
    function isSameSecond(dateLeft, dateRight) {
      const dateLeftStartOfSecond = (0, _index.startOfSecond)(dateLeft);
      const dateRightStartOfSecond = (0, _index.startOfSecond)(dateRight);
      return +dateLeftStartOfSecond === +dateRightStartOfSecond;
    }
  }
});

// node_modules/date-fns/isSameYear.js
var require_isSameYear = __commonJS({
  "node_modules/date-fns/isSameYear.js"(exports) {
    "use strict";
    exports.isSameYear = isSameYear;
    var _index = require_toDate();
    function isSameYear(dateLeft, dateRight) {
      const _dateLeft = (0, _index.toDate)(dateLeft);
      const _dateRight = (0, _index.toDate)(dateRight);
      return _dateLeft.getFullYear() === _dateRight.getFullYear();
    }
  }
});

// node_modules/date-fns/isThisHour.js
var require_isThisHour = __commonJS({
  "node_modules/date-fns/isThisHour.js"(exports) {
    "use strict";
    exports.isThisHour = isThisHour;
    var _index = require_constructNow();
    var _index2 = require_isSameHour();
    function isThisHour(date) {
      return (0, _index2.isSameHour)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isThisISOWeek.js
var require_isThisISOWeek = __commonJS({
  "node_modules/date-fns/isThisISOWeek.js"(exports) {
    "use strict";
    exports.isThisISOWeek = isThisISOWeek;
    var _index = require_constructNow();
    var _index2 = require_isSameISOWeek();
    function isThisISOWeek(date) {
      return (0, _index2.isSameISOWeek)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isThisMinute.js
var require_isThisMinute = __commonJS({
  "node_modules/date-fns/isThisMinute.js"(exports) {
    "use strict";
    exports.isThisMinute = isThisMinute;
    var _index = require_constructNow();
    var _index2 = require_isSameMinute();
    function isThisMinute(date) {
      return (0, _index2.isSameMinute)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isThisMonth.js
var require_isThisMonth = __commonJS({
  "node_modules/date-fns/isThisMonth.js"(exports) {
    "use strict";
    exports.isThisMonth = isThisMonth;
    var _index = require_constructNow();
    var _index2 = require_isSameMonth();
    function isThisMonth(date) {
      return (0, _index2.isSameMonth)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isThisQuarter.js
var require_isThisQuarter = __commonJS({
  "node_modules/date-fns/isThisQuarter.js"(exports) {
    "use strict";
    exports.isThisQuarter = isThisQuarter;
    var _index = require_constructNow();
    var _index2 = require_isSameQuarter();
    function isThisQuarter(date) {
      return (0, _index2.isSameQuarter)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isThisSecond.js
var require_isThisSecond = __commonJS({
  "node_modules/date-fns/isThisSecond.js"(exports) {
    "use strict";
    exports.isThisSecond = isThisSecond;
    var _index = require_constructNow();
    var _index2 = require_isSameSecond();
    function isThisSecond(date) {
      return (0, _index2.isSameSecond)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isThisWeek.js
var require_isThisWeek = __commonJS({
  "node_modules/date-fns/isThisWeek.js"(exports) {
    "use strict";
    exports.isThisWeek = isThisWeek;
    var _index = require_constructNow();
    var _index2 = require_isSameWeek();
    function isThisWeek(date, options) {
      return (0, _index2.isSameWeek)(date, (0, _index.constructNow)(date), options);
    }
  }
});

// node_modules/date-fns/isThisYear.js
var require_isThisYear = __commonJS({
  "node_modules/date-fns/isThisYear.js"(exports) {
    "use strict";
    exports.isThisYear = isThisYear;
    var _index = require_constructNow();
    var _index2 = require_isSameYear();
    function isThisYear(date) {
      return (0, _index2.isSameYear)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isThursday.js
var require_isThursday = __commonJS({
  "node_modules/date-fns/isThursday.js"(exports) {
    "use strict";
    exports.isThursday = isThursday;
    var _index = require_toDate();
    function isThursday(date) {
      return (0, _index.toDate)(date).getDay() === 4;
    }
  }
});

// node_modules/date-fns/isToday.js
var require_isToday = __commonJS({
  "node_modules/date-fns/isToday.js"(exports) {
    "use strict";
    exports.isToday = isToday;
    var _index = require_constructNow();
    var _index2 = require_isSameDay();
    function isToday(date) {
      return (0, _index2.isSameDay)(date, (0, _index.constructNow)(date));
    }
  }
});

// node_modules/date-fns/isTomorrow.js
var require_isTomorrow = __commonJS({
  "node_modules/date-fns/isTomorrow.js"(exports) {
    "use strict";
    exports.isTomorrow = isTomorrow;
    var _index = require_addDays();
    var _index2 = require_constructNow();
    var _index3 = require_isSameDay();
    function isTomorrow(date) {
      return (0, _index3.isSameDay)(
        date,
        (0, _index.addDays)((0, _index2.constructNow)(date), 1)
      );
    }
  }
});

// node_modules/date-fns/isTuesday.js
var require_isTuesday = __commonJS({
  "node_modules/date-fns/isTuesday.js"(exports) {
    "use strict";
    exports.isTuesday = isTuesday;
    var _index = require_toDate();
    function isTuesday(date) {
      return (0, _index.toDate)(date).getDay() === 2;
    }
  }
});

// node_modules/date-fns/isWednesday.js
var require_isWednesday = __commonJS({
  "node_modules/date-fns/isWednesday.js"(exports) {
    "use strict";
    exports.isWednesday = isWednesday;
    var _index = require_toDate();
    function isWednesday(date) {
      return (0, _index.toDate)(date).getDay() === 3;
    }
  }
});

// node_modules/date-fns/isWithinInterval.js
var require_isWithinInterval = __commonJS({
  "node_modules/date-fns/isWithinInterval.js"(exports) {
    "use strict";
    exports.isWithinInterval = isWithinInterval;
    var _index = require_toDate();
    function isWithinInterval(date, interval) {
      const time = +(0, _index.toDate)(date);
      const [startTime, endTime] = [
        +(0, _index.toDate)(interval.start),
        +(0, _index.toDate)(interval.end)
      ].sort((a, b) => a - b);
      return time >= startTime && time <= endTime;
    }
  }
});

// node_modules/date-fns/subDays.js
var require_subDays = __commonJS({
  "node_modules/date-fns/subDays.js"(exports) {
    "use strict";
    exports.subDays = subDays;
    var _index = require_addDays();
    function subDays(date, amount) {
      return (0, _index.addDays)(date, -amount);
    }
  }
});

// node_modules/date-fns/isYesterday.js
var require_isYesterday = __commonJS({
  "node_modules/date-fns/isYesterday.js"(exports) {
    "use strict";
    exports.isYesterday = isYesterday;
    var _index = require_constructNow();
    var _index2 = require_isSameDay();
    var _index3 = require_subDays();
    function isYesterday(date) {
      return (0, _index2.isSameDay)(
        date,
        (0, _index3.subDays)((0, _index.constructNow)(date), 1)
      );
    }
  }
});

// node_modules/date-fns/lastDayOfDecade.js
var require_lastDayOfDecade = __commonJS({
  "node_modules/date-fns/lastDayOfDecade.js"(exports) {
    "use strict";
    exports.lastDayOfDecade = lastDayOfDecade;
    var _index = require_toDate();
    function lastDayOfDecade(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      const decade = 9 + Math.floor(year / 10) * 10;
      _date.setFullYear(decade + 1, 0, 0);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/lastDayOfWeek.js
var require_lastDayOfWeek = __commonJS({
  "node_modules/date-fns/lastDayOfWeek.js"(exports) {
    "use strict";
    exports.lastDayOfWeek = lastDayOfWeek;
    var _index = require_toDate();
    var _index2 = require_defaultOptions();
    function lastDayOfWeek(date, options) {
      var _a, _b, _c, _d;
      const defaultOptions = (0, _index2.getDefaultOptions)();
      const weekStartsOn = (options == null ? void 0 : options.weekStartsOn) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) ?? defaultOptions.weekStartsOn ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.weekStartsOn) ?? 0;
      const _date = (0, _index.toDate)(date);
      const day = _date.getDay();
      const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
      _date.setHours(0, 0, 0, 0);
      _date.setDate(_date.getDate() + diff);
      return _date;
    }
  }
});

// node_modules/date-fns/lastDayOfISOWeek.js
var require_lastDayOfISOWeek = __commonJS({
  "node_modules/date-fns/lastDayOfISOWeek.js"(exports) {
    "use strict";
    exports.lastDayOfISOWeek = lastDayOfISOWeek;
    var _index = require_lastDayOfWeek();
    function lastDayOfISOWeek(date) {
      return (0, _index.lastDayOfWeek)(date, { weekStartsOn: 1 });
    }
  }
});

// node_modules/date-fns/lastDayOfISOWeekYear.js
var require_lastDayOfISOWeekYear = __commonJS({
  "node_modules/date-fns/lastDayOfISOWeekYear.js"(exports) {
    "use strict";
    exports.lastDayOfISOWeekYear = lastDayOfISOWeekYear;
    var _index = require_getISOWeekYear();
    var _index2 = require_startOfISOWeek();
    var _index3 = require_constructFrom();
    function lastDayOfISOWeekYear(date) {
      const year = (0, _index.getISOWeekYear)(date);
      const fourthOfJanuary = (0, _index3.constructFrom)(date, 0);
      fourthOfJanuary.setFullYear(year + 1, 0, 4);
      fourthOfJanuary.setHours(0, 0, 0, 0);
      const _date = (0, _index2.startOfISOWeek)(fourthOfJanuary);
      _date.setDate(_date.getDate() - 1);
      return _date;
    }
  }
});

// node_modules/date-fns/lastDayOfQuarter.js
var require_lastDayOfQuarter = __commonJS({
  "node_modules/date-fns/lastDayOfQuarter.js"(exports) {
    "use strict";
    exports.lastDayOfQuarter = lastDayOfQuarter;
    var _index = require_toDate();
    function lastDayOfQuarter(date) {
      const _date = (0, _index.toDate)(date);
      const currentMonth = _date.getMonth();
      const month = currentMonth - currentMonth % 3 + 3;
      _date.setMonth(month, 0);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/lastDayOfYear.js
var require_lastDayOfYear = __commonJS({
  "node_modules/date-fns/lastDayOfYear.js"(exports) {
    "use strict";
    exports.lastDayOfYear = lastDayOfYear;
    var _index = require_toDate();
    function lastDayOfYear(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      _date.setFullYear(year + 1, 0, 0);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/lightFormat.js
var require_lightFormat = __commonJS({
  "node_modules/date-fns/lightFormat.js"(exports) {
    "use strict";
    exports.lightFormat = lightFormat;
    Object.defineProperty(exports, "lightFormatters", {
      enumerable: true,
      get: function() {
        return _index3.lightFormatters;
      }
    });
    var _index = require_isValid();
    var _index2 = require_toDate();
    var _index3 = require_lightFormatters();
    var formattingTokensRegExp = /(\w)\1*|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    function lightFormat(date, formatStr) {
      const _date = (0, _index2.toDate)(date);
      if (!(0, _index.isValid)(_date)) {
        throw new RangeError("Invalid time value");
      }
      const tokens = formatStr.match(formattingTokensRegExp);
      if (!tokens)
        return "";
      const result = tokens.map((substring) => {
        if (substring === "''") {
          return "'";
        }
        const firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }
        const formatter = _index3.lightFormatters[firstCharacter];
        if (formatter) {
          return formatter(_date, substring);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError(
            "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
          );
        }
        return substring;
      }).join("");
      return result;
    }
    function cleanEscapedString(input) {
      const matches = input.match(escapedStringRegExp);
      if (!matches) {
        return input;
      }
      return matches[1].replace(doubleQuoteRegExp, "'");
    }
  }
});

// node_modules/date-fns/milliseconds.js
var require_milliseconds = __commonJS({
  "node_modules/date-fns/milliseconds.js"(exports) {
    "use strict";
    exports.milliseconds = milliseconds;
    var _index = require_constants();
    function milliseconds({ years, months, weeks, days, hours, minutes, seconds }) {
      let totalDays = 0;
      if (years)
        totalDays += years * _index.daysInYear;
      if (months)
        totalDays += months * (_index.daysInYear / 12);
      if (weeks)
        totalDays += weeks * 7;
      if (days)
        totalDays += days;
      let totalSeconds = totalDays * 24 * 60 * 60;
      if (hours)
        totalSeconds += hours * 60 * 60;
      if (minutes)
        totalSeconds += minutes * 60;
      if (seconds)
        totalSeconds += seconds;
      return Math.trunc(totalSeconds * 1e3);
    }
  }
});

// node_modules/date-fns/millisecondsToHours.js
var require_millisecondsToHours = __commonJS({
  "node_modules/date-fns/millisecondsToHours.js"(exports) {
    "use strict";
    exports.millisecondsToHours = millisecondsToHours;
    var _index = require_constants();
    function millisecondsToHours(milliseconds) {
      const hours = milliseconds / _index.millisecondsInHour;
      return Math.trunc(hours);
    }
  }
});

// node_modules/date-fns/millisecondsToMinutes.js
var require_millisecondsToMinutes = __commonJS({
  "node_modules/date-fns/millisecondsToMinutes.js"(exports) {
    "use strict";
    exports.millisecondsToMinutes = millisecondsToMinutes;
    var _index = require_constants();
    function millisecondsToMinutes(milliseconds) {
      const minutes = milliseconds / _index.millisecondsInMinute;
      return Math.trunc(minutes);
    }
  }
});

// node_modules/date-fns/millisecondsToSeconds.js
var require_millisecondsToSeconds = __commonJS({
  "node_modules/date-fns/millisecondsToSeconds.js"(exports) {
    "use strict";
    exports.millisecondsToSeconds = millisecondsToSeconds;
    var _index = require_constants();
    function millisecondsToSeconds(milliseconds) {
      const seconds = milliseconds / _index.millisecondsInSecond;
      return Math.trunc(seconds);
    }
  }
});

// node_modules/date-fns/minutesToHours.js
var require_minutesToHours = __commonJS({
  "node_modules/date-fns/minutesToHours.js"(exports) {
    "use strict";
    exports.minutesToHours = minutesToHours;
    var _index = require_constants();
    function minutesToHours(minutes) {
      const hours = minutes / _index.minutesInHour;
      return Math.trunc(hours);
    }
  }
});

// node_modules/date-fns/minutesToMilliseconds.js
var require_minutesToMilliseconds = __commonJS({
  "node_modules/date-fns/minutesToMilliseconds.js"(exports) {
    "use strict";
    exports.minutesToMilliseconds = minutesToMilliseconds;
    var _index = require_constants();
    function minutesToMilliseconds(minutes) {
      return Math.trunc(minutes * _index.millisecondsInMinute);
    }
  }
});

// node_modules/date-fns/minutesToSeconds.js
var require_minutesToSeconds = __commonJS({
  "node_modules/date-fns/minutesToSeconds.js"(exports) {
    "use strict";
    exports.minutesToSeconds = minutesToSeconds;
    var _index = require_constants();
    function minutesToSeconds(minutes) {
      return Math.trunc(minutes * _index.secondsInMinute);
    }
  }
});

// node_modules/date-fns/monthsToQuarters.js
var require_monthsToQuarters = __commonJS({
  "node_modules/date-fns/monthsToQuarters.js"(exports) {
    "use strict";
    exports.monthsToQuarters = monthsToQuarters;
    var _index = require_constants();
    function monthsToQuarters(months) {
      const quarters = months / _index.monthsInQuarter;
      return Math.trunc(quarters);
    }
  }
});

// node_modules/date-fns/monthsToYears.js
var require_monthsToYears = __commonJS({
  "node_modules/date-fns/monthsToYears.js"(exports) {
    "use strict";
    exports.monthsToYears = monthsToYears;
    var _index = require_constants();
    function monthsToYears(months) {
      const years = months / _index.monthsInYear;
      return Math.trunc(years);
    }
  }
});

// node_modules/date-fns/nextDay.js
var require_nextDay = __commonJS({
  "node_modules/date-fns/nextDay.js"(exports) {
    "use strict";
    exports.nextDay = nextDay;
    var _index = require_addDays();
    var _index2 = require_getDay();
    function nextDay(date, day) {
      let delta = day - (0, _index2.getDay)(date);
      if (delta <= 0)
        delta += 7;
      return (0, _index.addDays)(date, delta);
    }
  }
});

// node_modules/date-fns/nextFriday.js
var require_nextFriday = __commonJS({
  "node_modules/date-fns/nextFriday.js"(exports) {
    "use strict";
    exports.nextFriday = nextFriday;
    var _index = require_nextDay();
    function nextFriday(date) {
      return (0, _index.nextDay)(date, 5);
    }
  }
});

// node_modules/date-fns/nextMonday.js
var require_nextMonday = __commonJS({
  "node_modules/date-fns/nextMonday.js"(exports) {
    "use strict";
    exports.nextMonday = nextMonday;
    var _index = require_nextDay();
    function nextMonday(date) {
      return (0, _index.nextDay)(date, 1);
    }
  }
});

// node_modules/date-fns/nextSaturday.js
var require_nextSaturday = __commonJS({
  "node_modules/date-fns/nextSaturday.js"(exports) {
    "use strict";
    exports.nextSaturday = nextSaturday;
    var _index = require_nextDay();
    function nextSaturday(date) {
      return (0, _index.nextDay)(date, 6);
    }
  }
});

// node_modules/date-fns/nextSunday.js
var require_nextSunday = __commonJS({
  "node_modules/date-fns/nextSunday.js"(exports) {
    "use strict";
    exports.nextSunday = nextSunday;
    var _index = require_nextDay();
    function nextSunday(date) {
      return (0, _index.nextDay)(date, 0);
    }
  }
});

// node_modules/date-fns/nextThursday.js
var require_nextThursday = __commonJS({
  "node_modules/date-fns/nextThursday.js"(exports) {
    "use strict";
    exports.nextThursday = nextThursday;
    var _index = require_nextDay();
    function nextThursday(date) {
      return (0, _index.nextDay)(date, 4);
    }
  }
});

// node_modules/date-fns/nextTuesday.js
var require_nextTuesday = __commonJS({
  "node_modules/date-fns/nextTuesday.js"(exports) {
    "use strict";
    exports.nextTuesday = nextTuesday;
    var _index = require_nextDay();
    function nextTuesday(date) {
      return (0, _index.nextDay)(date, 2);
    }
  }
});

// node_modules/date-fns/nextWednesday.js
var require_nextWednesday = __commonJS({
  "node_modules/date-fns/nextWednesday.js"(exports) {
    "use strict";
    exports.nextWednesday = nextWednesday;
    var _index = require_nextDay();
    function nextWednesday(date) {
      return (0, _index.nextDay)(date, 3);
    }
  }
});

// node_modules/date-fns/parseISO.js
var require_parseISO = __commonJS({
  "node_modules/date-fns/parseISO.js"(exports) {
    "use strict";
    exports.parseISO = parseISO;
    var _index = require_constants();
    function parseISO(argument, options) {
      const additionalDigits = (options == null ? void 0 : options.additionalDigits) ?? 2;
      const dateStrings = splitDateString(argument);
      let date;
      if (dateStrings.date) {
        const parseYearResult = parseYear(dateStrings.date, additionalDigits);
        date = parseDate(parseYearResult.restDateString, parseYearResult.year);
      }
      if (!date || isNaN(date.getTime())) {
        return /* @__PURE__ */ new Date(NaN);
      }
      const timestamp = date.getTime();
      let time = 0;
      let offset;
      if (dateStrings.time) {
        time = parseTime(dateStrings.time);
        if (isNaN(time)) {
          return /* @__PURE__ */ new Date(NaN);
        }
      }
      if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone);
        if (isNaN(offset)) {
          return /* @__PURE__ */ new Date(NaN);
        }
      } else {
        const dirtyDate = new Date(timestamp + time);
        const result = /* @__PURE__ */ new Date(0);
        result.setFullYear(
          dirtyDate.getUTCFullYear(),
          dirtyDate.getUTCMonth(),
          dirtyDate.getUTCDate()
        );
        result.setHours(
          dirtyDate.getUTCHours(),
          dirtyDate.getUTCMinutes(),
          dirtyDate.getUTCSeconds(),
          dirtyDate.getUTCMilliseconds()
        );
        return result;
      }
      return new Date(timestamp + time + offset);
    }
    var patterns = {
      dateTimeDelimiter: /[T ]/,
      timeZoneDelimiter: /[Z ]/i,
      timezone: /([Z+-].*)$/
    };
    var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
    var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
    var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
    function splitDateString(dateString) {
      const dateStrings = {};
      const array = dateString.split(patterns.dateTimeDelimiter);
      let timeString;
      if (array.length > 2) {
        return dateStrings;
      }
      if (/:/.test(array[0])) {
        timeString = array[0];
      } else {
        dateStrings.date = array[0];
        timeString = array[1];
        if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
          dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
          timeString = dateString.substr(
            dateStrings.date.length,
            dateString.length
          );
        }
      }
      if (timeString) {
        const token = patterns.timezone.exec(timeString);
        if (token) {
          dateStrings.time = timeString.replace(token[1], "");
          dateStrings.timezone = token[1];
        } else {
          dateStrings.time = timeString;
        }
      }
      return dateStrings;
    }
    function parseYear(dateString, additionalDigits) {
      const regex = new RegExp(
        "^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)"
      );
      const captures = dateString.match(regex);
      if (!captures)
        return { year: NaN, restDateString: "" };
      const year = captures[1] ? parseInt(captures[1]) : null;
      const century = captures[2] ? parseInt(captures[2]) : null;
      return {
        year: century === null ? year : century * 100,
        restDateString: dateString.slice((captures[1] || captures[2]).length)
      };
    }
    function parseDate(dateString, year) {
      if (year === null)
        return /* @__PURE__ */ new Date(NaN);
      const captures = dateString.match(dateRegex);
      if (!captures)
        return /* @__PURE__ */ new Date(NaN);
      const isWeekDate = !!captures[4];
      const dayOfYear = parseDateUnit(captures[1]);
      const month = parseDateUnit(captures[2]) - 1;
      const day = parseDateUnit(captures[3]);
      const week = parseDateUnit(captures[4]);
      const dayOfWeek = parseDateUnit(captures[5]) - 1;
      if (isWeekDate) {
        if (!validateWeekDate(year, week, dayOfWeek)) {
          return /* @__PURE__ */ new Date(NaN);
        }
        return dayOfISOWeekYear(year, week, dayOfWeek);
      } else {
        const date = /* @__PURE__ */ new Date(0);
        if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
          return /* @__PURE__ */ new Date(NaN);
        }
        date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
        return date;
      }
    }
    function parseDateUnit(value) {
      return value ? parseInt(value) : 1;
    }
    function parseTime(timeString) {
      const captures = timeString.match(timeRegex);
      if (!captures)
        return NaN;
      const hours = parseTimeUnit(captures[1]);
      const minutes = parseTimeUnit(captures[2]);
      const seconds = parseTimeUnit(captures[3]);
      if (!validateTime(hours, minutes, seconds)) {
        return NaN;
      }
      return hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * 1e3;
    }
    function parseTimeUnit(value) {
      return value && parseFloat(value.replace(",", ".")) || 0;
    }
    function parseTimezone(timezoneString) {
      if (timezoneString === "Z")
        return 0;
      const captures = timezoneString.match(timezoneRegex);
      if (!captures)
        return 0;
      const sign = captures[1] === "+" ? -1 : 1;
      const hours = parseInt(captures[2]);
      const minutes = captures[3] && parseInt(captures[3]) || 0;
      if (!validateTimezone(hours, minutes)) {
        return NaN;
      }
      return sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute);
    }
    function dayOfISOWeekYear(isoWeekYear, week, day) {
      const date = /* @__PURE__ */ new Date(0);
      date.setUTCFullYear(isoWeekYear, 0, 4);
      const fourthOfJanuaryDay = date.getUTCDay() || 7;
      const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date;
    }
    var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function isLeapYearIndex(year) {
      return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }
    function validateDate(year, month, date) {
      return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
    }
    function validateDayOfYearDate(year, dayOfYear) {
      return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
    }
    function validateWeekDate(_year, week, day) {
      return week >= 1 && week <= 53 && day >= 0 && day <= 6;
    }
    function validateTime(hours, minutes, seconds) {
      if (hours === 24) {
        return minutes === 0 && seconds === 0;
      }
      return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
    }
    function validateTimezone(_hours, minutes) {
      return minutes >= 0 && minutes <= 59;
    }
  }
});

// node_modules/date-fns/parseJSON.js
var require_parseJSON = __commonJS({
  "node_modules/date-fns/parseJSON.js"(exports) {
    "use strict";
    exports.parseJSON = parseJSON;
    function parseJSON(dateStr) {
      const parts = dateStr.match(
        /(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/
      );
      if (parts) {
        return new Date(
          Date.UTC(
            +parts[1],
            +parts[2] - 1,
            +parts[3],
            +parts[4] - (+parts[9] || 0) * (parts[8] == "-" ? -1 : 1),
            +parts[5] - (+parts[10] || 0) * (parts[8] == "-" ? -1 : 1),
            +parts[6],
            +((parts[7] || "0") + "00").substring(0, 3)
          )
        );
      }
      return /* @__PURE__ */ new Date(NaN);
    }
  }
});

// node_modules/date-fns/previousDay.js
var require_previousDay = __commonJS({
  "node_modules/date-fns/previousDay.js"(exports) {
    "use strict";
    exports.previousDay = previousDay;
    var _index = require_getDay();
    var _index2 = require_subDays();
    function previousDay(date, day) {
      let delta = (0, _index.getDay)(date) - day;
      if (delta <= 0)
        delta += 7;
      return (0, _index2.subDays)(date, delta);
    }
  }
});

// node_modules/date-fns/previousFriday.js
var require_previousFriday = __commonJS({
  "node_modules/date-fns/previousFriday.js"(exports) {
    "use strict";
    exports.previousFriday = previousFriday;
    var _index = require_previousDay();
    function previousFriday(date) {
      return (0, _index.previousDay)(date, 5);
    }
  }
});

// node_modules/date-fns/previousMonday.js
var require_previousMonday = __commonJS({
  "node_modules/date-fns/previousMonday.js"(exports) {
    "use strict";
    exports.previousMonday = previousMonday;
    var _index = require_previousDay();
    function previousMonday(date) {
      return (0, _index.previousDay)(date, 1);
    }
  }
});

// node_modules/date-fns/previousSaturday.js
var require_previousSaturday = __commonJS({
  "node_modules/date-fns/previousSaturday.js"(exports) {
    "use strict";
    exports.previousSaturday = previousSaturday;
    var _index = require_previousDay();
    function previousSaturday(date) {
      return (0, _index.previousDay)(date, 6);
    }
  }
});

// node_modules/date-fns/previousSunday.js
var require_previousSunday = __commonJS({
  "node_modules/date-fns/previousSunday.js"(exports) {
    "use strict";
    exports.previousSunday = previousSunday;
    var _index = require_previousDay();
    function previousSunday(date) {
      return (0, _index.previousDay)(date, 0);
    }
  }
});

// node_modules/date-fns/previousThursday.js
var require_previousThursday = __commonJS({
  "node_modules/date-fns/previousThursday.js"(exports) {
    "use strict";
    exports.previousThursday = previousThursday;
    var _index = require_previousDay();
    function previousThursday(date) {
      return (0, _index.previousDay)(date, 4);
    }
  }
});

// node_modules/date-fns/previousTuesday.js
var require_previousTuesday = __commonJS({
  "node_modules/date-fns/previousTuesday.js"(exports) {
    "use strict";
    exports.previousTuesday = previousTuesday;
    var _index = require_previousDay();
    function previousTuesday(date) {
      return (0, _index.previousDay)(date, 2);
    }
  }
});

// node_modules/date-fns/previousWednesday.js
var require_previousWednesday = __commonJS({
  "node_modules/date-fns/previousWednesday.js"(exports) {
    "use strict";
    exports.previousWednesday = previousWednesday;
    var _index = require_previousDay();
    function previousWednesday(date) {
      return (0, _index.previousDay)(date, 3);
    }
  }
});

// node_modules/date-fns/quartersToMonths.js
var require_quartersToMonths = __commonJS({
  "node_modules/date-fns/quartersToMonths.js"(exports) {
    "use strict";
    exports.quartersToMonths = quartersToMonths;
    var _index = require_constants();
    function quartersToMonths(quarters) {
      return Math.trunc(quarters * _index.monthsInQuarter);
    }
  }
});

// node_modules/date-fns/quartersToYears.js
var require_quartersToYears = __commonJS({
  "node_modules/date-fns/quartersToYears.js"(exports) {
    "use strict";
    exports.quartersToYears = quartersToYears;
    var _index = require_constants();
    function quartersToYears(quarters) {
      const years = quarters / _index.quartersInYear;
      return Math.trunc(years);
    }
  }
});

// node_modules/date-fns/roundToNearestHours.js
var require_roundToNearestHours = __commonJS({
  "node_modules/date-fns/roundToNearestHours.js"(exports) {
    "use strict";
    exports.roundToNearestHours = roundToNearestHours;
    var _index = require_getRoundingMethod();
    var _index2 = require_constructFrom();
    var _index3 = require_toDate();
    function roundToNearestHours(date, options) {
      const nearestTo = (options == null ? void 0 : options.nearestTo) ?? 1;
      if (nearestTo < 1 || nearestTo > 12)
        return (0, _index2.constructFrom)(date, NaN);
      const _date = (0, _index3.toDate)(date);
      const fractionalMinutes = _date.getMinutes() / 60;
      const fractionalSeconds = _date.getSeconds() / 60 / 60;
      const fractionalMilliseconds = _date.getMilliseconds() / 1e3 / 60 / 60;
      const hours = _date.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds;
      const method = (options == null ? void 0 : options.roundingMethod) ?? "round";
      const roundingMethod = (0, _index.getRoundingMethod)(method);
      const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;
      const result = (0, _index2.constructFrom)(date, _date);
      result.setHours(roundedHours, 0, 0, 0);
      return result;
    }
  }
});

// node_modules/date-fns/roundToNearestMinutes.js
var require_roundToNearestMinutes = __commonJS({
  "node_modules/date-fns/roundToNearestMinutes.js"(exports) {
    "use strict";
    exports.roundToNearestMinutes = roundToNearestMinutes;
    var _index = require_getRoundingMethod();
    var _index2 = require_constructFrom();
    var _index3 = require_toDate();
    function roundToNearestMinutes(date, options) {
      const nearestTo = (options == null ? void 0 : options.nearestTo) ?? 1;
      if (nearestTo < 1 || nearestTo > 30)
        return (0, _index2.constructFrom)(date, NaN);
      const _date = (0, _index3.toDate)(date);
      const fractionalSeconds = _date.getSeconds() / 60;
      const fractionalMilliseconds = _date.getMilliseconds() / 1e3 / 60;
      const minutes = _date.getMinutes() + fractionalSeconds + fractionalMilliseconds;
      const method = (options == null ? void 0 : options.roundingMethod) ?? "round";
      const roundingMethod = (0, _index.getRoundingMethod)(method);
      const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;
      const result = (0, _index2.constructFrom)(date, _date);
      result.setMinutes(roundedMinutes, 0, 0);
      return result;
    }
  }
});

// node_modules/date-fns/secondsToHours.js
var require_secondsToHours = __commonJS({
  "node_modules/date-fns/secondsToHours.js"(exports) {
    "use strict";
    exports.secondsToHours = secondsToHours;
    var _index = require_constants();
    function secondsToHours(seconds) {
      const hours = seconds / _index.secondsInHour;
      return Math.trunc(hours);
    }
  }
});

// node_modules/date-fns/secondsToMilliseconds.js
var require_secondsToMilliseconds = __commonJS({
  "node_modules/date-fns/secondsToMilliseconds.js"(exports) {
    "use strict";
    exports.secondsToMilliseconds = secondsToMilliseconds;
    var _index = require_constants();
    function secondsToMilliseconds(seconds) {
      return seconds * _index.millisecondsInSecond;
    }
  }
});

// node_modules/date-fns/secondsToMinutes.js
var require_secondsToMinutes = __commonJS({
  "node_modules/date-fns/secondsToMinutes.js"(exports) {
    "use strict";
    exports.secondsToMinutes = secondsToMinutes;
    var _index = require_constants();
    function secondsToMinutes(seconds) {
      const minutes = seconds / _index.secondsInMinute;
      return Math.trunc(minutes);
    }
  }
});

// node_modules/date-fns/setMonth.js
var require_setMonth = __commonJS({
  "node_modules/date-fns/setMonth.js"(exports) {
    "use strict";
    exports.setMonth = setMonth;
    var _index = require_constructFrom();
    var _index2 = require_getDaysInMonth();
    var _index3 = require_toDate();
    function setMonth(date, month) {
      const _date = (0, _index3.toDate)(date);
      const year = _date.getFullYear();
      const day = _date.getDate();
      const dateWithDesiredMonth = (0, _index.constructFrom)(date, 0);
      dateWithDesiredMonth.setFullYear(year, month, 15);
      dateWithDesiredMonth.setHours(0, 0, 0, 0);
      const daysInMonth = (0, _index2.getDaysInMonth)(dateWithDesiredMonth);
      _date.setMonth(month, Math.min(day, daysInMonth));
      return _date;
    }
  }
});

// node_modules/date-fns/set.js
var require_set = __commonJS({
  "node_modules/date-fns/set.js"(exports) {
    "use strict";
    exports.set = set;
    var _index = require_constructFrom();
    var _index2 = require_setMonth();
    var _index3 = require_toDate();
    function set(date, values) {
      let _date = (0, _index3.toDate)(date);
      if (isNaN(+_date)) {
        return (0, _index.constructFrom)(date, NaN);
      }
      if (values.year != null) {
        _date.setFullYear(values.year);
      }
      if (values.month != null) {
        _date = (0, _index2.setMonth)(_date, values.month);
      }
      if (values.date != null) {
        _date.setDate(values.date);
      }
      if (values.hours != null) {
        _date.setHours(values.hours);
      }
      if (values.minutes != null) {
        _date.setMinutes(values.minutes);
      }
      if (values.seconds != null) {
        _date.setSeconds(values.seconds);
      }
      if (values.milliseconds != null) {
        _date.setMilliseconds(values.milliseconds);
      }
      return _date;
    }
  }
});

// node_modules/date-fns/setDate.js
var require_setDate = __commonJS({
  "node_modules/date-fns/setDate.js"(exports) {
    "use strict";
    exports.setDate = setDate;
    var _index = require_toDate();
    function setDate(date, dayOfMonth) {
      const _date = (0, _index.toDate)(date);
      _date.setDate(dayOfMonth);
      return _date;
    }
  }
});

// node_modules/date-fns/setDayOfYear.js
var require_setDayOfYear = __commonJS({
  "node_modules/date-fns/setDayOfYear.js"(exports) {
    "use strict";
    exports.setDayOfYear = setDayOfYear;
    var _index = require_toDate();
    function setDayOfYear(date, dayOfYear) {
      const _date = (0, _index.toDate)(date);
      _date.setMonth(0);
      _date.setDate(dayOfYear);
      return _date;
    }
  }
});

// node_modules/date-fns/setDefaultOptions.js
var require_setDefaultOptions = __commonJS({
  "node_modules/date-fns/setDefaultOptions.js"(exports) {
    "use strict";
    exports.setDefaultOptions = setDefaultOptions;
    var _index = require_defaultOptions();
    function setDefaultOptions(options) {
      const result = {};
      const defaultOptions = (0, _index.getDefaultOptions)();
      for (const property in defaultOptions) {
        if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) {
          result[property] = defaultOptions[property];
        }
      }
      for (const property in options) {
        if (Object.prototype.hasOwnProperty.call(options, property)) {
          if (options[property] === void 0) {
            delete result[property];
          } else {
            result[property] = options[property];
          }
        }
      }
      (0, _index.setDefaultOptions)(result);
    }
  }
});

// node_modules/date-fns/setHours.js
var require_setHours = __commonJS({
  "node_modules/date-fns/setHours.js"(exports) {
    "use strict";
    exports.setHours = setHours;
    var _index = require_toDate();
    function setHours(date, hours) {
      const _date = (0, _index.toDate)(date);
      _date.setHours(hours);
      return _date;
    }
  }
});

// node_modules/date-fns/setMilliseconds.js
var require_setMilliseconds = __commonJS({
  "node_modules/date-fns/setMilliseconds.js"(exports) {
    "use strict";
    exports.setMilliseconds = setMilliseconds;
    var _index = require_toDate();
    function setMilliseconds(date, milliseconds) {
      const _date = (0, _index.toDate)(date);
      _date.setMilliseconds(milliseconds);
      return _date;
    }
  }
});

// node_modules/date-fns/setMinutes.js
var require_setMinutes = __commonJS({
  "node_modules/date-fns/setMinutes.js"(exports) {
    "use strict";
    exports.setMinutes = setMinutes;
    var _index = require_toDate();
    function setMinutes(date, minutes) {
      const _date = (0, _index.toDate)(date);
      _date.setMinutes(minutes);
      return _date;
    }
  }
});

// node_modules/date-fns/setQuarter.js
var require_setQuarter = __commonJS({
  "node_modules/date-fns/setQuarter.js"(exports) {
    "use strict";
    exports.setQuarter = setQuarter;
    var _index = require_setMonth();
    var _index2 = require_toDate();
    function setQuarter(date, quarter) {
      const _date = (0, _index2.toDate)(date);
      const oldQuarter = Math.trunc(_date.getMonth() / 3) + 1;
      const diff = quarter - oldQuarter;
      return (0, _index.setMonth)(_date, _date.getMonth() + diff * 3);
    }
  }
});

// node_modules/date-fns/setSeconds.js
var require_setSeconds = __commonJS({
  "node_modules/date-fns/setSeconds.js"(exports) {
    "use strict";
    exports.setSeconds = setSeconds;
    var _index = require_toDate();
    function setSeconds(date, seconds) {
      const _date = (0, _index.toDate)(date);
      _date.setSeconds(seconds);
      return _date;
    }
  }
});

// node_modules/date-fns/setWeekYear.js
var require_setWeekYear = __commonJS({
  "node_modules/date-fns/setWeekYear.js"(exports) {
    "use strict";
    exports.setWeekYear = setWeekYear;
    var _index = require_constructFrom();
    var _index2 = require_differenceInCalendarDays();
    var _index3 = require_startOfWeekYear();
    var _index4 = require_toDate();
    var _index5 = require_defaultOptions();
    function setWeekYear(date, weekYear, options) {
      var _a, _b, _c, _d;
      const defaultOptions = (0, _index5.getDefaultOptions)();
      const firstWeekContainsDate = (options == null ? void 0 : options.firstWeekContainsDate) ?? ((_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) ?? defaultOptions.firstWeekContainsDate ?? ((_d = (_c = defaultOptions.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) ?? 1;
      let _date = (0, _index4.toDate)(date);
      const diff = (0, _index2.differenceInCalendarDays)(
        _date,
        (0, _index3.startOfWeekYear)(_date, options)
      );
      const firstWeek = (0, _index.constructFrom)(date, 0);
      firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);
      firstWeek.setHours(0, 0, 0, 0);
      _date = (0, _index3.startOfWeekYear)(firstWeek, options);
      _date.setDate(_date.getDate() + diff);
      return _date;
    }
  }
});

// node_modules/date-fns/setYear.js
var require_setYear = __commonJS({
  "node_modules/date-fns/setYear.js"(exports) {
    "use strict";
    exports.setYear = setYear;
    var _index = require_constructFrom();
    var _index2 = require_toDate();
    function setYear(date, year) {
      const _date = (0, _index2.toDate)(date);
      if (isNaN(+_date)) {
        return (0, _index.constructFrom)(date, NaN);
      }
      _date.setFullYear(year);
      return _date;
    }
  }
});

// node_modules/date-fns/startOfDecade.js
var require_startOfDecade = __commonJS({
  "node_modules/date-fns/startOfDecade.js"(exports) {
    "use strict";
    exports.startOfDecade = startOfDecade;
    var _index = require_toDate();
    function startOfDecade(date) {
      const _date = (0, _index.toDate)(date);
      const year = _date.getFullYear();
      const decade = Math.floor(year / 10) * 10;
      _date.setFullYear(decade, 0, 1);
      _date.setHours(0, 0, 0, 0);
      return _date;
    }
  }
});

// node_modules/date-fns/startOfToday.js
var require_startOfToday = __commonJS({
  "node_modules/date-fns/startOfToday.js"(exports) {
    "use strict";
    exports.startOfToday = startOfToday;
    var _index = require_startOfDay();
    function startOfToday() {
      return (0, _index.startOfDay)(Date.now());
    }
  }
});

// node_modules/date-fns/startOfTomorrow.js
var require_startOfTomorrow = __commonJS({
  "node_modules/date-fns/startOfTomorrow.js"(exports) {
    "use strict";
    exports.startOfTomorrow = startOfTomorrow;
    function startOfTomorrow() {
      const now = /* @__PURE__ */ new Date();
      const year = now.getFullYear();
      const month = now.getMonth();
      const day = now.getDate();
      const date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day + 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
  }
});

// node_modules/date-fns/startOfYesterday.js
var require_startOfYesterday = __commonJS({
  "node_modules/date-fns/startOfYesterday.js"(exports) {
    "use strict";
    exports.startOfYesterday = startOfYesterday;
    function startOfYesterday() {
      const now = /* @__PURE__ */ new Date();
      const year = now.getFullYear();
      const month = now.getMonth();
      const day = now.getDate();
      const date = /* @__PURE__ */ new Date(0);
      date.setFullYear(year, month, day - 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
  }
});

// node_modules/date-fns/subMonths.js
var require_subMonths = __commonJS({
  "node_modules/date-fns/subMonths.js"(exports) {
    "use strict";
    exports.subMonths = subMonths;
    var _index = require_addMonths();
    function subMonths(date, amount) {
      return (0, _index.addMonths)(date, -amount);
    }
  }
});

// node_modules/date-fns/sub.js
var require_sub = __commonJS({
  "node_modules/date-fns/sub.js"(exports) {
    "use strict";
    exports.sub = sub;
    var _index = require_subDays();
    var _index2 = require_subMonths();
    var _index3 = require_constructFrom();
    function sub(date, duration) {
      const {
        years = 0,
        months = 0,
        weeks = 0,
        days = 0,
        hours = 0,
        minutes = 0,
        seconds = 0
      } = duration;
      const dateWithoutMonths = (0, _index2.subMonths)(date, months + years * 12);
      const dateWithoutDays = (0, _index.subDays)(
        dateWithoutMonths,
        days + weeks * 7
      );
      const minutestoSub = minutes + hours * 60;
      const secondstoSub = seconds + minutestoSub * 60;
      const mstoSub = secondstoSub * 1e3;
      const finalDate = (0, _index3.constructFrom)(
        date,
        dateWithoutDays.getTime() - mstoSub
      );
      return finalDate;
    }
  }
});

// node_modules/date-fns/subBusinessDays.js
var require_subBusinessDays = __commonJS({
  "node_modules/date-fns/subBusinessDays.js"(exports) {
    "use strict";
    exports.subBusinessDays = subBusinessDays;
    var _index = require_addBusinessDays();
    function subBusinessDays(date, amount) {
      return (0, _index.addBusinessDays)(date, -amount);
    }
  }
});

// node_modules/date-fns/subHours.js
var require_subHours = __commonJS({
  "node_modules/date-fns/subHours.js"(exports) {
    "use strict";
    exports.subHours = subHours;
    var _index = require_addHours();
    function subHours(date, amount) {
      return (0, _index.addHours)(date, -amount);
    }
  }
});

// node_modules/date-fns/subMilliseconds.js
var require_subMilliseconds = __commonJS({
  "node_modules/date-fns/subMilliseconds.js"(exports) {
    "use strict";
    exports.subMilliseconds = subMilliseconds;
    var _index = require_addMilliseconds();
    function subMilliseconds(date, amount) {
      return (0, _index.addMilliseconds)(date, -amount);
    }
  }
});

// node_modules/date-fns/subMinutes.js
var require_subMinutes = __commonJS({
  "node_modules/date-fns/subMinutes.js"(exports) {
    "use strict";
    exports.subMinutes = subMinutes;
    var _index = require_addMinutes();
    function subMinutes(date, amount) {
      return (0, _index.addMinutes)(date, -amount);
    }
  }
});

// node_modules/date-fns/subQuarters.js
var require_subQuarters = __commonJS({
  "node_modules/date-fns/subQuarters.js"(exports) {
    "use strict";
    exports.subQuarters = subQuarters;
    var _index = require_addQuarters();
    function subQuarters(date, amount) {
      return (0, _index.addQuarters)(date, -amount);
    }
  }
});

// node_modules/date-fns/subSeconds.js
var require_subSeconds = __commonJS({
  "node_modules/date-fns/subSeconds.js"(exports) {
    "use strict";
    exports.subSeconds = subSeconds;
    var _index = require_addSeconds();
    function subSeconds(date, amount) {
      return (0, _index.addSeconds)(date, -amount);
    }
  }
});

// node_modules/date-fns/subWeeks.js
var require_subWeeks = __commonJS({
  "node_modules/date-fns/subWeeks.js"(exports) {
    "use strict";
    exports.subWeeks = subWeeks;
    var _index = require_addWeeks();
    function subWeeks(date, amount) {
      return (0, _index.addWeeks)(date, -amount);
    }
  }
});

// node_modules/date-fns/subYears.js
var require_subYears = __commonJS({
  "node_modules/date-fns/subYears.js"(exports) {
    "use strict";
    exports.subYears = subYears;
    var _index = require_addYears();
    function subYears(date, amount) {
      return (0, _index.addYears)(date, -amount);
    }
  }
});

// node_modules/date-fns/weeksToDays.js
var require_weeksToDays = __commonJS({
  "node_modules/date-fns/weeksToDays.js"(exports) {
    "use strict";
    exports.weeksToDays = weeksToDays;
    var _index = require_constants();
    function weeksToDays(weeks) {
      return Math.trunc(weeks * _index.daysInWeek);
    }
  }
});

// node_modules/date-fns/yearsToDays.js
var require_yearsToDays = __commonJS({
  "node_modules/date-fns/yearsToDays.js"(exports) {
    "use strict";
    exports.yearsToDays = yearsToDays;
    var _index = require_constants();
    function yearsToDays(years) {
      return Math.trunc(years * _index.daysInYear);
    }
  }
});

// node_modules/date-fns/yearsToMonths.js
var require_yearsToMonths = __commonJS({
  "node_modules/date-fns/yearsToMonths.js"(exports) {
    "use strict";
    exports.yearsToMonths = yearsToMonths;
    var _index = require_constants();
    function yearsToMonths(years) {
      return Math.trunc(years * _index.monthsInYear);
    }
  }
});

// node_modules/date-fns/yearsToQuarters.js
var require_yearsToQuarters = __commonJS({
  "node_modules/date-fns/yearsToQuarters.js"(exports) {
    "use strict";
    exports.yearsToQuarters = yearsToQuarters;
    var _index = require_constants();
    function yearsToQuarters(years) {
      return Math.trunc(years * _index.quartersInYear);
    }
  }
});

// node_modules/date-fns/index.js
var require_date_fns = __commonJS({
  "node_modules/date-fns/index.js"(exports) {
    "use strict";
    var _index = require_add();
    Object.keys(_index).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index[key];
        }
      });
    });
    var _index2 = require_addBusinessDays();
    Object.keys(_index2).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index2[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index2[key];
        }
      });
    });
    var _index3 = require_addDays();
    Object.keys(_index3).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index3[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index3[key];
        }
      });
    });
    var _index4 = require_addHours();
    Object.keys(_index4).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index4[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index4[key];
        }
      });
    });
    var _index5 = require_addISOWeekYears();
    Object.keys(_index5).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index5[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index5[key];
        }
      });
    });
    var _index6 = require_addMilliseconds();
    Object.keys(_index6).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index6[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index6[key];
        }
      });
    });
    var _index7 = require_addMinutes();
    Object.keys(_index7).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index7[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index7[key];
        }
      });
    });
    var _index8 = require_addMonths();
    Object.keys(_index8).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index8[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index8[key];
        }
      });
    });
    var _index9 = require_addQuarters();
    Object.keys(_index9).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index9[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index9[key];
        }
      });
    });
    var _index10 = require_addSeconds();
    Object.keys(_index10).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index10[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index10[key];
        }
      });
    });
    var _index11 = require_addWeeks();
    Object.keys(_index11).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index11[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index11[key];
        }
      });
    });
    var _index12 = require_addYears();
    Object.keys(_index12).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index12[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index12[key];
        }
      });
    });
    var _index13 = require_areIntervalsOverlapping();
    Object.keys(_index13).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index13[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index13[key];
        }
      });
    });
    var _index14 = require_clamp();
    Object.keys(_index14).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index14[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index14[key];
        }
      });
    });
    var _index15 = require_closestIndexTo();
    Object.keys(_index15).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index15[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index15[key];
        }
      });
    });
    var _index16 = require_closestTo();
    Object.keys(_index16).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index16[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index16[key];
        }
      });
    });
    var _index17 = require_compareAsc();
    Object.keys(_index17).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index17[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index17[key];
        }
      });
    });
    var _index18 = require_compareDesc();
    Object.keys(_index18).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index18[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index18[key];
        }
      });
    });
    var _index19 = require_constructFrom();
    Object.keys(_index19).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index19[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index19[key];
        }
      });
    });
    var _index20 = require_constructNow();
    Object.keys(_index20).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index20[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index20[key];
        }
      });
    });
    var _index21 = require_daysToWeeks();
    Object.keys(_index21).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index21[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index21[key];
        }
      });
    });
    var _index22 = require_differenceInBusinessDays();
    Object.keys(_index22).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index22[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index22[key];
        }
      });
    });
    var _index23 = require_differenceInCalendarDays();
    Object.keys(_index23).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index23[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index23[key];
        }
      });
    });
    var _index24 = require_differenceInCalendarISOWeekYears();
    Object.keys(_index24).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index24[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index24[key];
        }
      });
    });
    var _index25 = require_differenceInCalendarISOWeeks();
    Object.keys(_index25).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index25[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index25[key];
        }
      });
    });
    var _index26 = require_differenceInCalendarMonths();
    Object.keys(_index26).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index26[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index26[key];
        }
      });
    });
    var _index27 = require_differenceInCalendarQuarters();
    Object.keys(_index27).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index27[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index27[key];
        }
      });
    });
    var _index28 = require_differenceInCalendarWeeks();
    Object.keys(_index28).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index28[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index28[key];
        }
      });
    });
    var _index29 = require_differenceInCalendarYears();
    Object.keys(_index29).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index29[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index29[key];
        }
      });
    });
    var _index30 = require_differenceInDays();
    Object.keys(_index30).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index30[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index30[key];
        }
      });
    });
    var _index31 = require_differenceInHours();
    Object.keys(_index31).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index31[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index31[key];
        }
      });
    });
    var _index32 = require_differenceInISOWeekYears();
    Object.keys(_index32).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index32[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index32[key];
        }
      });
    });
    var _index33 = require_differenceInMilliseconds();
    Object.keys(_index33).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index33[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index33[key];
        }
      });
    });
    var _index34 = require_differenceInMinutes();
    Object.keys(_index34).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index34[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index34[key];
        }
      });
    });
    var _index35 = require_differenceInMonths();
    Object.keys(_index35).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index35[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index35[key];
        }
      });
    });
    var _index36 = require_differenceInQuarters();
    Object.keys(_index36).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index36[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index36[key];
        }
      });
    });
    var _index37 = require_differenceInSeconds();
    Object.keys(_index37).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index37[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index37[key];
        }
      });
    });
    var _index38 = require_differenceInWeeks();
    Object.keys(_index38).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index38[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index38[key];
        }
      });
    });
    var _index39 = require_differenceInYears();
    Object.keys(_index39).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index39[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index39[key];
        }
      });
    });
    var _index40 = require_eachDayOfInterval();
    Object.keys(_index40).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index40[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index40[key];
        }
      });
    });
    var _index41 = require_eachHourOfInterval();
    Object.keys(_index41).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index41[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index41[key];
        }
      });
    });
    var _index42 = require_eachMinuteOfInterval();
    Object.keys(_index42).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index42[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index42[key];
        }
      });
    });
    var _index43 = require_eachMonthOfInterval();
    Object.keys(_index43).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index43[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index43[key];
        }
      });
    });
    var _index44 = require_eachQuarterOfInterval();
    Object.keys(_index44).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index44[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index44[key];
        }
      });
    });
    var _index45 = require_eachWeekOfInterval();
    Object.keys(_index45).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index45[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index45[key];
        }
      });
    });
    var _index46 = require_eachWeekendOfInterval();
    Object.keys(_index46).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index46[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index46[key];
        }
      });
    });
    var _index47 = require_eachWeekendOfMonth();
    Object.keys(_index47).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index47[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index47[key];
        }
      });
    });
    var _index48 = require_eachWeekendOfYear();
    Object.keys(_index48).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index48[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index48[key];
        }
      });
    });
    var _index49 = require_eachYearOfInterval();
    Object.keys(_index49).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index49[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index49[key];
        }
      });
    });
    var _index50 = require_endOfDay();
    Object.keys(_index50).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index50[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index50[key];
        }
      });
    });
    var _index51 = require_endOfDecade();
    Object.keys(_index51).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index51[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index51[key];
        }
      });
    });
    var _index52 = require_endOfHour();
    Object.keys(_index52).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index52[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index52[key];
        }
      });
    });
    var _index53 = require_endOfISOWeek();
    Object.keys(_index53).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index53[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index53[key];
        }
      });
    });
    var _index54 = require_endOfISOWeekYear();
    Object.keys(_index54).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index54[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index54[key];
        }
      });
    });
    var _index55 = require_endOfMinute();
    Object.keys(_index55).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index55[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index55[key];
        }
      });
    });
    var _index56 = require_endOfMonth();
    Object.keys(_index56).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index56[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index56[key];
        }
      });
    });
    var _index57 = require_endOfQuarter();
    Object.keys(_index57).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index57[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index57[key];
        }
      });
    });
    var _index58 = require_endOfSecond();
    Object.keys(_index58).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index58[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index58[key];
        }
      });
    });
    var _index59 = require_endOfToday();
    Object.keys(_index59).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index59[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index59[key];
        }
      });
    });
    var _index60 = require_endOfTomorrow();
    Object.keys(_index60).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index60[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index60[key];
        }
      });
    });
    var _index61 = require_endOfWeek();
    Object.keys(_index61).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index61[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index61[key];
        }
      });
    });
    var _index62 = require_endOfYear();
    Object.keys(_index62).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index62[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index62[key];
        }
      });
    });
    var _index63 = require_endOfYesterday();
    Object.keys(_index63).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index63[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index63[key];
        }
      });
    });
    var _index64 = require_format();
    Object.keys(_index64).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index64[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index64[key];
        }
      });
    });
    var _index65 = require_formatDistance2();
    Object.keys(_index65).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index65[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index65[key];
        }
      });
    });
    var _index66 = require_formatDistanceStrict();
    Object.keys(_index66).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index66[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index66[key];
        }
      });
    });
    var _index67 = require_formatDistanceToNow();
    Object.keys(_index67).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index67[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index67[key];
        }
      });
    });
    var _index68 = require_formatDistanceToNowStrict();
    Object.keys(_index68).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index68[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index68[key];
        }
      });
    });
    var _index69 = require_formatDuration();
    Object.keys(_index69).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index69[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index69[key];
        }
      });
    });
    var _index70 = require_formatISO();
    Object.keys(_index70).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index70[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index70[key];
        }
      });
    });
    var _index71 = require_formatISO9075();
    Object.keys(_index71).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index71[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index71[key];
        }
      });
    });
    var _index72 = require_formatISODuration();
    Object.keys(_index72).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index72[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index72[key];
        }
      });
    });
    var _index73 = require_formatRFC3339();
    Object.keys(_index73).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index73[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index73[key];
        }
      });
    });
    var _index74 = require_formatRFC7231();
    Object.keys(_index74).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index74[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index74[key];
        }
      });
    });
    var _index75 = require_formatRelative2();
    Object.keys(_index75).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index75[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index75[key];
        }
      });
    });
    var _index76 = require_fromUnixTime();
    Object.keys(_index76).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index76[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index76[key];
        }
      });
    });
    var _index77 = require_getDate();
    Object.keys(_index77).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index77[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index77[key];
        }
      });
    });
    var _index78 = require_getDay();
    Object.keys(_index78).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index78[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index78[key];
        }
      });
    });
    var _index79 = require_getDayOfYear();
    Object.keys(_index79).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index79[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index79[key];
        }
      });
    });
    var _index80 = require_getDaysInMonth();
    Object.keys(_index80).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index80[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index80[key];
        }
      });
    });
    var _index81 = require_getDaysInYear();
    Object.keys(_index81).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index81[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index81[key];
        }
      });
    });
    var _index82 = require_getDecade();
    Object.keys(_index82).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index82[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index82[key];
        }
      });
    });
    var _index83 = require_getDefaultOptions();
    Object.keys(_index83).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index83[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index83[key];
        }
      });
    });
    var _index84 = require_getHours();
    Object.keys(_index84).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index84[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index84[key];
        }
      });
    });
    var _index85 = require_getISODay();
    Object.keys(_index85).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index85[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index85[key];
        }
      });
    });
    var _index86 = require_getISOWeek();
    Object.keys(_index86).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index86[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index86[key];
        }
      });
    });
    var _index87 = require_getISOWeekYear();
    Object.keys(_index87).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index87[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index87[key];
        }
      });
    });
    var _index88 = require_getISOWeeksInYear();
    Object.keys(_index88).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index88[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index88[key];
        }
      });
    });
    var _index89 = require_getMilliseconds();
    Object.keys(_index89).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index89[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index89[key];
        }
      });
    });
    var _index90 = require_getMinutes();
    Object.keys(_index90).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index90[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index90[key];
        }
      });
    });
    var _index91 = require_getMonth();
    Object.keys(_index91).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index91[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index91[key];
        }
      });
    });
    var _index92 = require_getOverlappingDaysInIntervals();
    Object.keys(_index92).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index92[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index92[key];
        }
      });
    });
    var _index93 = require_getQuarter();
    Object.keys(_index93).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index93[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index93[key];
        }
      });
    });
    var _index94 = require_getSeconds();
    Object.keys(_index94).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index94[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index94[key];
        }
      });
    });
    var _index95 = require_getTime();
    Object.keys(_index95).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index95[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index95[key];
        }
      });
    });
    var _index96 = require_getUnixTime();
    Object.keys(_index96).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index96[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index96[key];
        }
      });
    });
    var _index97 = require_getWeek();
    Object.keys(_index97).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index97[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index97[key];
        }
      });
    });
    var _index98 = require_getWeekOfMonth();
    Object.keys(_index98).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index98[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index98[key];
        }
      });
    });
    var _index99 = require_getWeekYear();
    Object.keys(_index99).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index99[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index99[key];
        }
      });
    });
    var _index100 = require_getWeeksInMonth();
    Object.keys(_index100).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index100[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index100[key];
        }
      });
    });
    var _index101 = require_getYear();
    Object.keys(_index101).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index101[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index101[key];
        }
      });
    });
    var _index102 = require_hoursToMilliseconds();
    Object.keys(_index102).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index102[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index102[key];
        }
      });
    });
    var _index103 = require_hoursToMinutes();
    Object.keys(_index103).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index103[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index103[key];
        }
      });
    });
    var _index104 = require_hoursToSeconds();
    Object.keys(_index104).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index104[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index104[key];
        }
      });
    });
    var _index105 = require_interval();
    Object.keys(_index105).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index105[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index105[key];
        }
      });
    });
    var _index106 = require_intervalToDuration();
    Object.keys(_index106).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index106[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index106[key];
        }
      });
    });
    var _index107 = require_intlFormat();
    Object.keys(_index107).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index107[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index107[key];
        }
      });
    });
    var _index108 = require_intlFormatDistance();
    Object.keys(_index108).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index108[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index108[key];
        }
      });
    });
    var _index109 = require_isAfter();
    Object.keys(_index109).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index109[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index109[key];
        }
      });
    });
    var _index110 = require_isBefore();
    Object.keys(_index110).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index110[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index110[key];
        }
      });
    });
    var _index111 = require_isDate();
    Object.keys(_index111).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index111[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index111[key];
        }
      });
    });
    var _index112 = require_isEqual();
    Object.keys(_index112).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index112[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index112[key];
        }
      });
    });
    var _index113 = require_isExists();
    Object.keys(_index113).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index113[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index113[key];
        }
      });
    });
    var _index114 = require_isFirstDayOfMonth();
    Object.keys(_index114).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index114[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index114[key];
        }
      });
    });
    var _index115 = require_isFriday();
    Object.keys(_index115).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index115[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index115[key];
        }
      });
    });
    var _index116 = require_isFuture();
    Object.keys(_index116).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index116[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index116[key];
        }
      });
    });
    var _index117 = require_isLastDayOfMonth();
    Object.keys(_index117).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index117[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index117[key];
        }
      });
    });
    var _index118 = require_isLeapYear();
    Object.keys(_index118).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index118[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index118[key];
        }
      });
    });
    var _index119 = require_isMatch();
    Object.keys(_index119).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index119[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index119[key];
        }
      });
    });
    var _index120 = require_isMonday();
    Object.keys(_index120).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index120[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index120[key];
        }
      });
    });
    var _index121 = require_isPast();
    Object.keys(_index121).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index121[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index121[key];
        }
      });
    });
    var _index122 = require_isSameDay();
    Object.keys(_index122).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index122[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index122[key];
        }
      });
    });
    var _index123 = require_isSameHour();
    Object.keys(_index123).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index123[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index123[key];
        }
      });
    });
    var _index124 = require_isSameISOWeek();
    Object.keys(_index124).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index124[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index124[key];
        }
      });
    });
    var _index125 = require_isSameISOWeekYear();
    Object.keys(_index125).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index125[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index125[key];
        }
      });
    });
    var _index126 = require_isSameMinute();
    Object.keys(_index126).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index126[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index126[key];
        }
      });
    });
    var _index127 = require_isSameMonth();
    Object.keys(_index127).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index127[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index127[key];
        }
      });
    });
    var _index128 = require_isSameQuarter();
    Object.keys(_index128).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index128[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index128[key];
        }
      });
    });
    var _index129 = require_isSameSecond();
    Object.keys(_index129).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index129[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index129[key];
        }
      });
    });
    var _index130 = require_isSameWeek();
    Object.keys(_index130).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index130[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index130[key];
        }
      });
    });
    var _index131 = require_isSameYear();
    Object.keys(_index131).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index131[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index131[key];
        }
      });
    });
    var _index132 = require_isSaturday();
    Object.keys(_index132).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index132[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index132[key];
        }
      });
    });
    var _index133 = require_isSunday();
    Object.keys(_index133).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index133[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index133[key];
        }
      });
    });
    var _index134 = require_isThisHour();
    Object.keys(_index134).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index134[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index134[key];
        }
      });
    });
    var _index135 = require_isThisISOWeek();
    Object.keys(_index135).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index135[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index135[key];
        }
      });
    });
    var _index136 = require_isThisMinute();
    Object.keys(_index136).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index136[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index136[key];
        }
      });
    });
    var _index137 = require_isThisMonth();
    Object.keys(_index137).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index137[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index137[key];
        }
      });
    });
    var _index138 = require_isThisQuarter();
    Object.keys(_index138).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index138[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index138[key];
        }
      });
    });
    var _index139 = require_isThisSecond();
    Object.keys(_index139).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index139[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index139[key];
        }
      });
    });
    var _index140 = require_isThisWeek();
    Object.keys(_index140).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index140[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index140[key];
        }
      });
    });
    var _index141 = require_isThisYear();
    Object.keys(_index141).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index141[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index141[key];
        }
      });
    });
    var _index142 = require_isThursday();
    Object.keys(_index142).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index142[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index142[key];
        }
      });
    });
    var _index143 = require_isToday();
    Object.keys(_index143).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index143[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index143[key];
        }
      });
    });
    var _index144 = require_isTomorrow();
    Object.keys(_index144).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index144[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index144[key];
        }
      });
    });
    var _index145 = require_isTuesday();
    Object.keys(_index145).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index145[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index145[key];
        }
      });
    });
    var _index146 = require_isValid();
    Object.keys(_index146).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index146[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index146[key];
        }
      });
    });
    var _index147 = require_isWednesday();
    Object.keys(_index147).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index147[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index147[key];
        }
      });
    });
    var _index148 = require_isWeekend();
    Object.keys(_index148).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index148[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index148[key];
        }
      });
    });
    var _index149 = require_isWithinInterval();
    Object.keys(_index149).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index149[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index149[key];
        }
      });
    });
    var _index150 = require_isYesterday();
    Object.keys(_index150).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index150[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index150[key];
        }
      });
    });
    var _index151 = require_lastDayOfDecade();
    Object.keys(_index151).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index151[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index151[key];
        }
      });
    });
    var _index152 = require_lastDayOfISOWeek();
    Object.keys(_index152).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index152[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index152[key];
        }
      });
    });
    var _index153 = require_lastDayOfISOWeekYear();
    Object.keys(_index153).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index153[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index153[key];
        }
      });
    });
    var _index154 = require_lastDayOfMonth();
    Object.keys(_index154).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index154[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index154[key];
        }
      });
    });
    var _index155 = require_lastDayOfQuarter();
    Object.keys(_index155).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index155[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index155[key];
        }
      });
    });
    var _index156 = require_lastDayOfWeek();
    Object.keys(_index156).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index156[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index156[key];
        }
      });
    });
    var _index157 = require_lastDayOfYear();
    Object.keys(_index157).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index157[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index157[key];
        }
      });
    });
    var _index158 = require_lightFormat();
    Object.keys(_index158).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index158[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index158[key];
        }
      });
    });
    var _index159 = require_max();
    Object.keys(_index159).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index159[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index159[key];
        }
      });
    });
    var _index160 = require_milliseconds();
    Object.keys(_index160).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index160[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index160[key];
        }
      });
    });
    var _index161 = require_millisecondsToHours();
    Object.keys(_index161).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index161[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index161[key];
        }
      });
    });
    var _index162 = require_millisecondsToMinutes();
    Object.keys(_index162).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index162[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index162[key];
        }
      });
    });
    var _index163 = require_millisecondsToSeconds();
    Object.keys(_index163).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index163[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index163[key];
        }
      });
    });
    var _index164 = require_min();
    Object.keys(_index164).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index164[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index164[key];
        }
      });
    });
    var _index165 = require_minutesToHours();
    Object.keys(_index165).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index165[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index165[key];
        }
      });
    });
    var _index166 = require_minutesToMilliseconds();
    Object.keys(_index166).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index166[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index166[key];
        }
      });
    });
    var _index167 = require_minutesToSeconds();
    Object.keys(_index167).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index167[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index167[key];
        }
      });
    });
    var _index168 = require_monthsToQuarters();
    Object.keys(_index168).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index168[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index168[key];
        }
      });
    });
    var _index169 = require_monthsToYears();
    Object.keys(_index169).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index169[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index169[key];
        }
      });
    });
    var _index170 = require_nextDay();
    Object.keys(_index170).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index170[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index170[key];
        }
      });
    });
    var _index171 = require_nextFriday();
    Object.keys(_index171).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index171[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index171[key];
        }
      });
    });
    var _index172 = require_nextMonday();
    Object.keys(_index172).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index172[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index172[key];
        }
      });
    });
    var _index173 = require_nextSaturday();
    Object.keys(_index173).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index173[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index173[key];
        }
      });
    });
    var _index174 = require_nextSunday();
    Object.keys(_index174).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index174[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index174[key];
        }
      });
    });
    var _index175 = require_nextThursday();
    Object.keys(_index175).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index175[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index175[key];
        }
      });
    });
    var _index176 = require_nextTuesday();
    Object.keys(_index176).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index176[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index176[key];
        }
      });
    });
    var _index177 = require_nextWednesday();
    Object.keys(_index177).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index177[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index177[key];
        }
      });
    });
    var _index178 = require_parse();
    Object.keys(_index178).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index178[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index178[key];
        }
      });
    });
    var _index179 = require_parseISO();
    Object.keys(_index179).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index179[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index179[key];
        }
      });
    });
    var _index180 = require_parseJSON();
    Object.keys(_index180).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index180[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index180[key];
        }
      });
    });
    var _index181 = require_previousDay();
    Object.keys(_index181).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index181[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index181[key];
        }
      });
    });
    var _index182 = require_previousFriday();
    Object.keys(_index182).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index182[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index182[key];
        }
      });
    });
    var _index183 = require_previousMonday();
    Object.keys(_index183).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index183[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index183[key];
        }
      });
    });
    var _index184 = require_previousSaturday();
    Object.keys(_index184).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index184[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index184[key];
        }
      });
    });
    var _index185 = require_previousSunday();
    Object.keys(_index185).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index185[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index185[key];
        }
      });
    });
    var _index186 = require_previousThursday();
    Object.keys(_index186).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index186[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index186[key];
        }
      });
    });
    var _index187 = require_previousTuesday();
    Object.keys(_index187).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index187[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index187[key];
        }
      });
    });
    var _index188 = require_previousWednesday();
    Object.keys(_index188).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index188[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index188[key];
        }
      });
    });
    var _index189 = require_quartersToMonths();
    Object.keys(_index189).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index189[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index189[key];
        }
      });
    });
    var _index190 = require_quartersToYears();
    Object.keys(_index190).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index190[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index190[key];
        }
      });
    });
    var _index191 = require_roundToNearestHours();
    Object.keys(_index191).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index191[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index191[key];
        }
      });
    });
    var _index192 = require_roundToNearestMinutes();
    Object.keys(_index192).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index192[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index192[key];
        }
      });
    });
    var _index193 = require_secondsToHours();
    Object.keys(_index193).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index193[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index193[key];
        }
      });
    });
    var _index194 = require_secondsToMilliseconds();
    Object.keys(_index194).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index194[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index194[key];
        }
      });
    });
    var _index195 = require_secondsToMinutes();
    Object.keys(_index195).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index195[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index195[key];
        }
      });
    });
    var _index196 = require_set();
    Object.keys(_index196).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index196[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index196[key];
        }
      });
    });
    var _index197 = require_setDate();
    Object.keys(_index197).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index197[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index197[key];
        }
      });
    });
    var _index198 = require_setDay();
    Object.keys(_index198).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index198[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index198[key];
        }
      });
    });
    var _index199 = require_setDayOfYear();
    Object.keys(_index199).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index199[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index199[key];
        }
      });
    });
    var _index200 = require_setDefaultOptions();
    Object.keys(_index200).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index200[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index200[key];
        }
      });
    });
    var _index201 = require_setHours();
    Object.keys(_index201).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index201[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index201[key];
        }
      });
    });
    var _index202 = require_setISODay();
    Object.keys(_index202).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index202[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index202[key];
        }
      });
    });
    var _index203 = require_setISOWeek();
    Object.keys(_index203).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index203[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index203[key];
        }
      });
    });
    var _index204 = require_setISOWeekYear();
    Object.keys(_index204).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index204[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index204[key];
        }
      });
    });
    var _index205 = require_setMilliseconds();
    Object.keys(_index205).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index205[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index205[key];
        }
      });
    });
    var _index206 = require_setMinutes();
    Object.keys(_index206).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index206[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index206[key];
        }
      });
    });
    var _index207 = require_setMonth();
    Object.keys(_index207).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index207[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index207[key];
        }
      });
    });
    var _index208 = require_setQuarter();
    Object.keys(_index208).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index208[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index208[key];
        }
      });
    });
    var _index209 = require_setSeconds();
    Object.keys(_index209).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index209[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index209[key];
        }
      });
    });
    var _index210 = require_setWeek();
    Object.keys(_index210).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index210[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index210[key];
        }
      });
    });
    var _index211 = require_setWeekYear();
    Object.keys(_index211).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index211[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index211[key];
        }
      });
    });
    var _index212 = require_setYear();
    Object.keys(_index212).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index212[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index212[key];
        }
      });
    });
    var _index213 = require_startOfDay();
    Object.keys(_index213).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index213[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index213[key];
        }
      });
    });
    var _index214 = require_startOfDecade();
    Object.keys(_index214).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index214[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index214[key];
        }
      });
    });
    var _index215 = require_startOfHour();
    Object.keys(_index215).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index215[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index215[key];
        }
      });
    });
    var _index216 = require_startOfISOWeek();
    Object.keys(_index216).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index216[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index216[key];
        }
      });
    });
    var _index217 = require_startOfISOWeekYear();
    Object.keys(_index217).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index217[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index217[key];
        }
      });
    });
    var _index218 = require_startOfMinute();
    Object.keys(_index218).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index218[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index218[key];
        }
      });
    });
    var _index219 = require_startOfMonth();
    Object.keys(_index219).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index219[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index219[key];
        }
      });
    });
    var _index220 = require_startOfQuarter();
    Object.keys(_index220).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index220[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index220[key];
        }
      });
    });
    var _index221 = require_startOfSecond();
    Object.keys(_index221).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index221[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index221[key];
        }
      });
    });
    var _index222 = require_startOfToday();
    Object.keys(_index222).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index222[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index222[key];
        }
      });
    });
    var _index223 = require_startOfTomorrow();
    Object.keys(_index223).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index223[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index223[key];
        }
      });
    });
    var _index224 = require_startOfWeek();
    Object.keys(_index224).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index224[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index224[key];
        }
      });
    });
    var _index225 = require_startOfWeekYear();
    Object.keys(_index225).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index225[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index225[key];
        }
      });
    });
    var _index226 = require_startOfYear();
    Object.keys(_index226).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index226[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index226[key];
        }
      });
    });
    var _index227 = require_startOfYesterday();
    Object.keys(_index227).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index227[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index227[key];
        }
      });
    });
    var _index228 = require_sub();
    Object.keys(_index228).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index228[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index228[key];
        }
      });
    });
    var _index229 = require_subBusinessDays();
    Object.keys(_index229).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index229[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index229[key];
        }
      });
    });
    var _index230 = require_subDays();
    Object.keys(_index230).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index230[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index230[key];
        }
      });
    });
    var _index231 = require_subHours();
    Object.keys(_index231).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index231[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index231[key];
        }
      });
    });
    var _index232 = require_subISOWeekYears();
    Object.keys(_index232).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index232[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index232[key];
        }
      });
    });
    var _index233 = require_subMilliseconds();
    Object.keys(_index233).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index233[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index233[key];
        }
      });
    });
    var _index234 = require_subMinutes();
    Object.keys(_index234).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index234[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index234[key];
        }
      });
    });
    var _index235 = require_subMonths();
    Object.keys(_index235).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index235[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index235[key];
        }
      });
    });
    var _index236 = require_subQuarters();
    Object.keys(_index236).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index236[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index236[key];
        }
      });
    });
    var _index237 = require_subSeconds();
    Object.keys(_index237).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index237[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index237[key];
        }
      });
    });
    var _index238 = require_subWeeks();
    Object.keys(_index238).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index238[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index238[key];
        }
      });
    });
    var _index239 = require_subYears();
    Object.keys(_index239).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index239[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index239[key];
        }
      });
    });
    var _index240 = require_toDate();
    Object.keys(_index240).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index240[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index240[key];
        }
      });
    });
    var _index241 = require_transpose();
    Object.keys(_index241).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index241[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index241[key];
        }
      });
    });
    var _index242 = require_weeksToDays();
    Object.keys(_index242).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index242[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index242[key];
        }
      });
    });
    var _index243 = require_yearsToDays();
    Object.keys(_index243).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index243[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index243[key];
        }
      });
    });
    var _index244 = require_yearsToMonths();
    Object.keys(_index244).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index244[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index244[key];
        }
      });
    });
    var _index245 = require_yearsToQuarters();
    Object.keys(_index245).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index245[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index245[key];
        }
      });
    });
  }
});

// node_modules/date-fns/locale/af/_lib/formatDistance.js
var require_formatDistance3 = __commonJS({
  "node_modules/date-fns/locale/af/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "minder as 'n sekonde",
        other: "minder as {{count}} sekondes"
      },
      xSeconds: {
        one: "1 sekonde",
        other: "{{count}} sekondes"
      },
      halfAMinute: "'n halwe minuut",
      lessThanXMinutes: {
        one: "minder as 'n minuut",
        other: "minder as {{count}} minute"
      },
      xMinutes: {
        one: "'n minuut",
        other: "{{count}} minute"
      },
      aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} ure"
      },
      xHours: {
        one: "1 uur",
        other: "{{count}} ure"
      },
      xDays: {
        one: "1 dag",
        other: "{{count}} dae"
      },
      aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weke"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weke"
      },
      aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maande"
      },
      xMonths: {
        one: "1 maand",
        other: "{{count}} maande"
      },
      aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
      },
      xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
      },
      overXYears: {
        one: "meer as 1 jaar",
        other: "meer as {{count}} jaar"
      },
      almostXYears: {
        one: "byna 1 jaar",
        other: "byna {{count}} jaar"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "oor " + result;
        } else {
          return result + " gelede";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/af/_lib/formatLong.js
var require_formatLong2 = __commonJS({
  "node_modules/date-fns/locale/af/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "yyyy/MM/dd"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/af/_lib/formatRelative.js
var require_formatRelative3 = __commonJS({
  "node_modules/date-fns/locale/af/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'verlede' eeee 'om' p",
      yesterday: "'gister om' p",
      today: "'vandag om' p",
      tomorrow: "'môre om' p",
      nextWeek: "eeee 'om' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/af/_lib/localize.js
var require_localize2 = __commonJS({
  "node_modules/date-fns/locale/af/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["vC", "nC"],
      abbreviated: ["vC", "nC"],
      wide: ["voor Christus", "na Christus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1ste kwartaal", "2de kwartaal", "3de kwartaal", "4de kwartaal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Jan",
        "Feb",
        "Mrt",
        "Apr",
        "Mei",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Des"
      ],
      wide: [
        "Januarie",
        "Februarie",
        "Maart",
        "April",
        "Mei",
        "Junie",
        "Julie",
        "Augustus",
        "September",
        "Oktober",
        "November",
        "Desember"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "D", "W", "D", "V", "S"],
      short: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"],
      abbreviated: ["Son", "Maa", "Din", "Woe", "Don", "Vry", "Sat"],
      wide: [
        "Sondag",
        "Maandag",
        "Dinsdag",
        "Woensdag",
        "Donderdag",
        "Vrydag",
        "Saterdag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
      },
      abbreviated: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
      },
      wide: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
      },
      abbreviated: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
      },
      wide: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      const number = Number(dirtyNumber);
      const rem100 = number % 100;
      if (rem100 < 20) {
        switch (rem100) {
          case 1:
          case 8:
            return number + "ste";
          default:
            return number + "de";
        }
      }
      return number + "ste";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/af/_lib/match.js
var require_match2 = __commonJS({
  "node_modules/date-fns/locale/af/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(ste|de)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?C\.?)/,
      wide: /^((voor|na) Christus)/
    };
    var parseEraPatterns = {
      any: [/^v/, /^n/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234](st|d)e kwartaal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
      wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^J/i,
        /^F/i,
        /^M/i,
        /^A/i,
        /^M/i,
        /^J/i,
        /^J/i,
        /^A/i,
        /^S/i,
        /^O/i,
        /^N/i,
        /^D/i
      ],
      any: [
        /^Jan/i,
        /^Feb/i,
        /^Mrt/i,
        /^Apr/i,
        /^Mei/i,
        /^Jun/i,
        /^Jul/i,
        /^Aug/i,
        /^Sep/i,
        /^Okt/i,
        /^Nov/i,
        /^Dec/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smdwv]/i,
      short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
      abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
      wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],
      any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^vm/i,
        pm: /^nm/i,
        midnight: /^middernag/i,
        noon: /^middaguur/i,
        morning: /oggend/i,
        afternoon: /middag/i,
        evening: /laat middag/i,
        night: /aand/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/af.js
var require_af = __commonJS({
  "node_modules/date-fns/locale/af.js"(exports) {
    "use strict";
    exports.af = void 0;
    var _index = require_formatDistance3();
    var _index2 = require_formatLong2();
    var _index3 = require_formatRelative3();
    var _index4 = require_localize2();
    var _index5 = require_match2();
    var af = exports.af = {
      code: "af",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ar/_lib/formatDistance.js
var require_formatDistance4 = __commonJS({
  "node_modules/date-fns/locale/ar/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "أقل من ثانية",
        two: "أقل من ثانيتين",
        threeToTen: "أقل من {{count}} ثواني",
        other: "أقل من {{count}} ثانية"
      },
      xSeconds: {
        one: "ثانية واحدة",
        two: "ثانيتان",
        threeToTen: "{{count}} ثواني",
        other: "{{count}} ثانية"
      },
      halfAMinute: "نصف دقيقة",
      lessThanXMinutes: {
        one: "أقل من دقيقة",
        two: "أقل من دقيقتين",
        threeToTen: "أقل من {{count}} دقائق",
        other: "أقل من {{count}} دقيقة"
      },
      xMinutes: {
        one: "دقيقة واحدة",
        two: "دقيقتان",
        threeToTen: "{{count}} دقائق",
        other: "{{count}} دقيقة"
      },
      aboutXHours: {
        one: "ساعة واحدة تقريباً",
        two: "ساعتين تقريبا",
        threeToTen: "{{count}} ساعات تقريباً",
        other: "{{count}} ساعة تقريباً"
      },
      xHours: {
        one: "ساعة واحدة",
        two: "ساعتان",
        threeToTen: "{{count}} ساعات",
        other: "{{count}} ساعة"
      },
      xDays: {
        one: "يوم واحد",
        two: "يومان",
        threeToTen: "{{count}} أيام",
        other: "{{count}} يوم"
      },
      aboutXWeeks: {
        one: "أسبوع واحد تقريبا",
        two: "أسبوعين تقريبا",
        threeToTen: "{{count}} أسابيع تقريبا",
        other: "{{count}} أسبوعا تقريبا"
      },
      xWeeks: {
        one: "أسبوع واحد",
        two: "أسبوعان",
        threeToTen: "{{count}} أسابيع",
        other: "{{count}} أسبوعا"
      },
      aboutXMonths: {
        one: "شهر واحد تقريباً",
        two: "شهرين تقريبا",
        threeToTen: "{{count}} أشهر تقريبا",
        other: "{{count}} شهرا تقريباً"
      },
      xMonths: {
        one: "شهر واحد",
        two: "شهران",
        threeToTen: "{{count}} أشهر",
        other: "{{count}} شهرا"
      },
      aboutXYears: {
        one: "سنة واحدة تقريباً",
        two: "سنتين تقريبا",
        threeToTen: "{{count}} سنوات تقريباً",
        other: "{{count}} سنة تقريباً"
      },
      xYears: {
        one: "سنة واحد",
        two: "سنتان",
        threeToTen: "{{count}} سنوات",
        other: "{{count}} سنة"
      },
      overXYears: {
        one: "أكثر من سنة",
        two: "أكثر من سنتين",
        threeToTen: "أكثر من {{count}} سنوات",
        other: "أكثر من {{count}} سنة"
      },
      almostXYears: {
        one: "ما يقارب سنة واحدة",
        two: "ما يقارب سنتين",
        threeToTen: "ما يقارب {{count}} سنوات",
        other: "ما يقارب {{count}} سنة"
      }
    };
    var formatDistance = (token, count, options) => {
      const usageGroup = formatDistanceLocale[token];
      let result;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else if (count === 2) {
        result = usageGroup.two;
      } else if (count <= 10) {
        result = usageGroup.threeToTen.replace("{{count}}", String(count));
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "خلال " + result;
        } else {
          return "منذ " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ar/_lib/formatLong.js
var require_formatLong3 = __commonJS({
  "node_modules/date-fns/locale/ar/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE، do MMMM y",
      long: "do MMMM y",
      medium: "d MMM y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss",
      long: "HH:mm:ss",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'عند الساعة' {{time}}",
      long: "{{date}} 'عند الساعة' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ar/_lib/formatRelative.js
var require_formatRelative4 = __commonJS({
  "node_modules/date-fns/locale/ar/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'الماضي عند الساعة' p",
      yesterday: "'الأمس عند الساعة' p",
      today: "'اليوم عند الساعة' p",
      tomorrow: "'غدا عند الساعة' p",
      nextWeek: "eeee 'القادم عند الساعة' p",
      other: "P"
    };
    var formatRelative = (token) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ar/_lib/localize.js
var require_localize3 = __commonJS({
  "node_modules/date-fns/locale/ar/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ق", "ب"],
      abbreviated: ["ق.م.", "ب.م."],
      wide: ["قبل الميلاد", "بعد الميلاد"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ر1", "ر2", "ر3", "ر4"],
      wide: ["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"]
    };
    var monthValues = {
      narrow: ["ي", "ف", "م", "أ", "م", "ي", "ي", "أ", "س", "أ", "ن", "د"],
      abbreviated: [
        "يناير",
        "فبراير",
        "مارس",
        "أبريل",
        "مايو",
        "يونيو",
        "يوليو",
        "أغسطس",
        "سبتمبر",
        "أكتوبر",
        "نوفمبر",
        "ديسمبر"
      ],
      wide: [
        "يناير",
        "فبراير",
        "مارس",
        "أبريل",
        "مايو",
        "يونيو",
        "يوليو",
        "أغسطس",
        "سبتمبر",
        "أكتوبر",
        "نوفمبر",
        "ديسمبر"
      ]
    };
    var dayValues = {
      narrow: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
      short: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      abbreviated: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      wide: [
        "الأحد",
        "الاثنين",
        "الثلاثاء",
        "الأربعاء",
        "الخميس",
        "الجمعة",
        "السبت"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        morning: "الصباح",
        noon: "الظهر",
        afternoon: "بعد الظهر",
        evening: "المساء",
        night: "الليل",
        midnight: "منتصف الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        morning: "الصباح",
        noon: "الظهر",
        afternoon: "بعد الظهر",
        evening: "المساء",
        night: "الليل",
        midnight: "منتصف الليل"
      },
      wide: {
        am: "ص",
        pm: "م",
        morning: "الصباح",
        noon: "الظهر",
        afternoon: "بعد الظهر",
        evening: "المساء",
        night: "الليل",
        midnight: "منتصف الليل"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        morning: "في الصباح",
        noon: "الظهر",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل",
        midnight: "منتصف الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        morning: "في الصباح",
        noon: "الظهر",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل",
        midnight: "منتصف الليل"
      },
      wide: {
        am: "ص",
        pm: "م",
        morning: "في الصباح",
        noon: "الظهر",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل",
        midnight: "منتصف الليل"
      }
    };
    var ordinalNumber = (num) => String(num);
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ar/_lib/match.js
var require_match3 = __commonJS({
  "node_modules/date-fns/locale/ar/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchPatternFn();
    var _index2 = require_buildMatchFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /[قب]/,
      abbreviated: /[قب]\.م\./,
      wide: /(قبل|بعد) الميلاد/
    };
    var parseEraPatterns = {
      any: [/قبل/, /بعد/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /ر[1234]/,
      wide: /الربع (الأول|الثاني|الثالث|الرابع)/
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[أيفمسند]/,
      abbreviated: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
      wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
    };
    var parseMonthPatterns = {
      narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ي/i,
        /^ي/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
      ],
      any: [
        /^يناير/i,
        /^فبراير/i,
        /^مارس/i,
        /^أبريل/i,
        /^مايو/i,
        /^يونيو/i,
        /^يوليو/i,
        /^أغسطس/i,
        /^سبتمبر/i,
        /^أكتوبر/i,
        /^نوفمبر/i,
        /^ديسمبر/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
      ],
      any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/,
      any: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ص/,
        pm: /^م/,
        midnight: /منتصف الليل/,
        noon: /الظهر/,
        afternoon: /بعد الظهر/,
        morning: /في الصباح/,
        evening: /في المساء/,
        night: /في الليل/
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ar.js
var require_ar = __commonJS({
  "node_modules/date-fns/locale/ar.js"(exports) {
    "use strict";
    exports.ar = void 0;
    var _index = require_formatDistance4();
    var _index2 = require_formatLong3();
    var _index3 = require_formatRelative4();
    var _index4 = require_localize3();
    var _index5 = require_match3();
    var ar = exports.ar = {
      code: "ar",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 6,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ar-DZ/_lib/formatDistance.js
var require_formatDistance5 = __commonJS({
  "node_modules/date-fns/locale/ar-DZ/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "أقل من ثانية واحدة",
        two: "أقل من ثانتين",
        threeToTen: "أقل من {{count}} ثواني",
        other: "أقل من {{count}} ثانية"
      },
      xSeconds: {
        one: "ثانية واحدة",
        two: "ثانتين",
        threeToTen: "{{count}} ثواني",
        other: "{{count}} ثانية"
      },
      halfAMinute: "نصف دقيقة",
      lessThanXMinutes: {
        one: "أقل من دقيقة",
        two: "أقل من دقيقتين",
        threeToTen: "أقل من {{count}} دقائق",
        other: "أقل من {{count}} دقيقة"
      },
      xMinutes: {
        one: "دقيقة واحدة",
        two: "دقيقتين",
        threeToTen: "{{count}} دقائق",
        other: "{{count}} دقيقة"
      },
      aboutXHours: {
        one: "ساعة واحدة تقريباً",
        two: "ساعتين تقريباً",
        threeToTen: "{{count}} ساعات تقريباً",
        other: "{{count}} ساعة تقريباً"
      },
      xHours: {
        one: "ساعة واحدة",
        two: "ساعتين",
        threeToTen: "{{count}} ساعات",
        other: "{{count}} ساعة"
      },
      xDays: {
        one: "يوم واحد",
        two: "يومين",
        threeToTen: "{{count}} أيام",
        other: "{{count}} يوم"
      },
      aboutXWeeks: {
        one: "أسبوع واحد تقريباً",
        two: "أسبوعين تقريباً",
        threeToTen: "{{count}} أسابيع تقريباً",
        other: "{{count}} أسبوع تقريباً"
      },
      xWeeks: {
        one: "أسبوع واحد",
        two: "أسبوعين",
        threeToTen: "{{count}} أسابيع",
        other: "{{count}} أسبوع"
      },
      aboutXMonths: {
        one: "شهر واحد تقريباً",
        two: "شهرين تقريباً",
        threeToTen: "{{count}} أشهر تقريباً",
        other: "{{count}} شهر تقريباً"
      },
      xMonths: {
        one: "شهر واحد",
        two: "شهرين",
        threeToTen: "{{count}} أشهر",
        other: "{{count}} شهر"
      },
      aboutXYears: {
        one: "عام واحد تقريباً",
        two: "عامين تقريباً",
        threeToTen: "{{count}} أعوام تقريباً",
        other: "{{count}} عام تقريباً"
      },
      xYears: {
        one: "عام واحد",
        two: "عامين",
        threeToTen: "{{count}} أعوام",
        other: "{{count}} عام"
      },
      overXYears: {
        one: "أكثر من عام",
        two: "أكثر من عامين",
        threeToTen: "أكثر من {{count}} أعوام",
        other: "أكثر من {{count}} عام"
      },
      almostXYears: {
        one: "عام واحد تقريباً",
        two: "عامين تقريباً",
        threeToTen: "{{count}} أعوام تقريباً",
        other: "{{count}} عام تقريباً"
      }
    };
    var formatDistance = (token, count, options) => {
      options = options || {};
      const usageGroup = formatDistanceLocale[token];
      let result;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else if (count === 2) {
        result = usageGroup.two;
      } else if (count <= 10) {
        result = usageGroup.threeToTen.replace("{{count}}", String(count));
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "في خلال " + result;
        } else {
          return "منذ " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ar-DZ/_lib/formatLong.js
var require_formatLong4 = __commonJS({
  "node_modules/date-fns/locale/ar-DZ/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'عند' {{time}}",
      long: "{{date}} 'عند' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-DZ/_lib/formatRelative.js
var require_formatRelative5 = __commonJS({
  "node_modules/date-fns/locale/ar-DZ/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'أخر' eeee 'عند' p",
      yesterday: "'أمس عند' p",
      today: "'اليوم عند' p",
      tomorrow: "'غداً عند' p",
      nextWeek: "eeee 'عند' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => {
      return formatRelativeLocale[token];
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ar-DZ/_lib/localize.js
var require_localize4 = __commonJS({
  "node_modules/date-fns/locale/ar-DZ/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ق", "ب"],
      abbreviated: ["ق.م.", "ب.م."],
      wide: ["قبل الميلاد", "بعد الميلاد"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ر1", "ر2", "ر3", "ر4"],
      wide: ["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"]
    };
    var monthValues = {
      narrow: ["ج", "ف", "م", "أ", "م", "ج", "ج", "أ", "س", "أ", "ن", "د"],
      abbreviated: [
        "جانـ",
        "فيفـ",
        "مارس",
        "أفريل",
        "مايـ",
        "جوانـ",
        "جويـ",
        "أوت",
        "سبتـ",
        "أكتـ",
        "نوفـ",
        "ديسـ"
      ],
      wide: [
        "جانفي",
        "فيفري",
        "مارس",
        "أفريل",
        "ماي",
        "جوان",
        "جويلية",
        "أوت",
        "سبتمبر",
        "أكتوبر",
        "نوفمبر",
        "ديسمبر"
      ]
    };
    var dayValues = {
      narrow: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
      short: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      abbreviated: ["أحد", "اثنـ", "ثلا", "أربـ", "خميـ", "جمعة", "سبت"],
      wide: [
        "الأحد",
        "الاثنين",
        "الثلاثاء",
        "الأربعاء",
        "الخميس",
        "الجمعة",
        "السبت"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "في الصباح",
        afternoon: "بعد الظـهر",
        evening: "في المساء",
        night: "في الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "في الصباح",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظـهر",
        evening: "في المساء",
        night: "في الليل"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => Number(quarter) - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-DZ/_lib/match.js
var require_match4 = __commonJS({
  "node_modules/date-fns/locale/ar-DZ/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchPatternFn();
    var _index2 = require_buildMatchFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ر[1234]/i,
      wide: /^الربع [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[جفمأسند]/i,
      abbreviated: /^(جان|فيف|مار|أفر|ماي|جوا|جوي|أوت|سبت|أكت|نوف|ديس)/i,
      wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ج/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ج/i,
        /^ج/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
      ],
      any: [
        /^جان/i,
        /^فيف/i,
        /^مار/i,
        /^أفر/i,
        /^ماي/i,
        /^جوا/i,
        /^جوي/i,
        /^أوت/i,
        /^سبت/i,
        /^أكت/i,
        /^نوف/i,
        /^ديس/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
      wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
      ],
      any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => Number(index) + 1
      }),
      month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-DZ.js
var require_ar_DZ = __commonJS({
  "node_modules/date-fns/locale/ar-DZ.js"(exports) {
    "use strict";
    exports.arDZ = void 0;
    var _index = require_formatDistance5();
    var _index2 = require_formatLong4();
    var _index3 = require_formatRelative5();
    var _index4 = require_localize4();
    var _index5 = require_match4();
    var arDZ = exports.arDZ = {
      code: "ar-DZ",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ar-EG/_lib/formatDistance.js
var require_formatDistance6 = __commonJS({
  "node_modules/date-fns/locale/ar-EG/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "أقل من ثانية",
        two: "أقل من ثانيتين",
        threeToTen: "أقل من {{count}} ثواني",
        other: "أقل من {{count}} ثانية"
      },
      xSeconds: {
        one: "ثانية",
        two: "ثانيتين",
        threeToTen: "{{count}} ثواني",
        other: "{{count}} ثانية"
      },
      halfAMinute: "نص دقيقة",
      lessThanXMinutes: {
        one: "أقل من دقيقة",
        two: "أقل من دقيقتين",
        threeToTen: "أقل من {{count}} دقايق",
        other: "أقل من {{count}} دقيقة"
      },
      xMinutes: {
        one: "دقيقة",
        two: "دقيقتين",
        threeToTen: "{{count}} دقايق",
        other: "{{count}} دقيقة"
      },
      aboutXHours: {
        one: "حوالي ساعة",
        two: "حوالي ساعتين",
        threeToTen: "حوالي {{count}} ساعات",
        other: "حوالي {{count}} ساعة"
      },
      xHours: {
        one: "ساعة",
        two: "ساعتين",
        threeToTen: "{{count}} ساعات",
        other: "{{count}} ساعة"
      },
      xDays: {
        one: "يوم",
        two: "يومين",
        threeToTen: "{{count}} أيام",
        other: "{{count}} يوم"
      },
      aboutXWeeks: {
        one: "حوالي أسبوع",
        two: "حوالي أسبوعين",
        threeToTen: "حوالي {{count}} أسابيع",
        other: "حوالي {{count}} أسبوع"
      },
      xWeeks: {
        one: "أسبوع",
        two: "أسبوعين",
        threeToTen: "{{count}} أسابيع",
        other: "{{count}} أسبوع"
      },
      aboutXMonths: {
        one: "حوالي شهر",
        two: "حوالي شهرين",
        threeToTen: "حوالي {{count}} أشهر",
        other: "حوالي {{count}} شهر"
      },
      xMonths: {
        one: "شهر",
        two: "شهرين",
        threeToTen: "{{count}} أشهر",
        other: "{{count}} شهر"
      },
      aboutXYears: {
        one: "حوالي سنة",
        two: "حوالي سنتين",
        threeToTen: "حوالي {{count}} سنين",
        other: "حوالي {{count}} سنة"
      },
      xYears: {
        one: "عام",
        two: "عامين",
        threeToTen: "{{count}} أعوام",
        other: "{{count}} عام"
      },
      overXYears: {
        one: "أكثر من سنة",
        two: "أكثر من سنتين",
        threeToTen: "أكثر من {{count}} سنين",
        other: "أكثر من {{count}} سنة"
      },
      almostXYears: {
        one: "عام تقريبًا",
        two: "عامين تقريبًا",
        threeToTen: "{{count}} أعوام تقريبًا",
        other: "{{count}} عام تقريبًا"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2) {
        result = tokenValue.two;
      } else if (count <= 10) {
        result = tokenValue.threeToTen.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return `في خلال ${result}`;
        } else {
          return `منذ ${result}`;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ar-EG/_lib/formatLong.js
var require_formatLong5 = __commonJS({
  "node_modules/date-fns/locale/ar-EG/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE، do MMMM y",
      long: "do MMMM y",
      medium: "dd/MMM/y",
      short: "d/MM/y"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'الساعة' {{time}}",
      long: "{{date}} 'الساعة' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-EG/_lib/formatRelative.js
var require_formatRelative6 = __commonJS({
  "node_modules/date-fns/locale/ar-EG/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'اللي جاي الساعة' p",
      yesterday: "'إمبارح الساعة' p",
      today: "'النهاردة الساعة' p",
      tomorrow: "'بكرة الساعة' p",
      nextWeek: "eeee 'الساعة' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ar-EG/_lib/localize.js
var require_localize5 = __commonJS({
  "node_modules/date-fns/locale/ar-EG/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ق", "ب"],
      abbreviated: ["ق.م", "ب.م"],
      wide: ["قبل الميلاد", "بعد الميلاد"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ر1", "ر2", "ر3", "ر4"],
      wide: ["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"]
    };
    var monthValues = {
      narrow: ["ي", "ف", "م", "أ", "م", "ي", "ي", "أ", "س", "أ", "ن", "د"],
      abbreviated: [
        "ينا",
        "فبر",
        "مارس",
        "أبريل",
        "مايو",
        "يونـ",
        "يولـ",
        "أغسـ",
        "سبتـ",
        "أكتـ",
        "نوفـ",
        "ديسـ"
      ],
      wide: [
        "يناير",
        "فبراير",
        "مارس",
        "أبريل",
        "مايو",
        "يونيو",
        "يوليو",
        "أغسطس",
        "سبتمبر",
        "أكتوبر",
        "نوفمبر",
        "ديسمبر"
      ]
    };
    var dayValues = {
      narrow: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
      short: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      abbreviated: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      wide: [
        "الأحد",
        "الاثنين",
        "الثلاثاء",
        "الأربعاء",
        "الخميس",
        "الجمعة",
        "السبت"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءً",
        night: "ليلاً"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهراً",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءً",
        night: "ليلاً"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهراً",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءً",
        night: "ليلاً"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "في الصباح",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهراً",
        morning: "في الصباح",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        morning: "في الصباح",
        noon: "ظهراً",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-EG/_lib/match.js
var require_match5 = __commonJS({
  "node_modules/date-fns/locale/ar-EG/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)/;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/g,
      abbreviated: /^(ق.م|ب.م)/g,
      wide: /^(قبل الميلاد|بعد الميلاد)/g
    };
    var parseEraPatterns = {
      any: [/^ق/g, /^ب/g]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/,
      abbreviated: /^ر[1234]/,
      wide: /^الربع (الأول|الثاني|الثالث|الرابع)/
    };
    var parseQuarterPatterns = {
      wide: [/الربع الأول/, /الربع الثاني/, /الربع الثالث/, /الربع الرابع/],
      any: [/1/, /2/, /3/, /4/]
    };
    var matchMonthPatterns = {
      narrow: /^(ي|ف|م|أ|س|ن|د)/,
      abbreviated: /^(ينا|فبر|مارس|أبريل|مايو|يونـ|يولـ|أغسـ|سبتـ|أكتـ|نوفـ|ديسـ)/,
      wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
    };
    var parseMonthPatterns = {
      narrow: [
        /^ي/,
        /^ف/,
        /^م/,
        /^أ/,
        /^م/,
        /^ي/,
        /^ي/,
        /^أ/,
        /^س/,
        /^أ/,
        /^ن/,
        /^د/
      ],
      any: [
        /^ينا/,
        /^فبر/,
        /^مارس/,
        /^أبريل/,
        /^مايو/,
        /^يون/,
        /^يول/,
        /^أغس/,
        /^سبت/,
        /^أكت/,
        /^نوف/,
        /^ديس/
      ]
    };
    var matchDayPatterns = {
      narrow: /^(ح|ن|ث|ر|خ|ج|س)/,
      short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
      abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
      wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/
    };
    var parseDayPatterns = {
      narrow: [/^ح/, /^ن/, /^ث/, /^ر/, /^خ/, /^ج/, /^س/],
      any: [/أحد/, /اثنين/, /ثلاثاء/, /أربعاء/, /خميس/, /جمعة/, /سبت/]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ص|م|ن|ظ|في الصباح|بعد الظهر|في المساء|في الليل)/,
      abbreviated: /^(ص|م|نصف الليل|ظهراً|في الصباح|بعد الظهر|في المساء|في الليل)/,
      wide: /^(ص|م|نصف الليل|في الصباح|ظهراً|بعد الظهر|في المساء|في الليل)/,
      any: /^(ص|م|صباح|ظهر|مساء|ليل)/
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ص/,
        pm: /^م/,
        midnight: /^ن/,
        noon: /^ظ/,
        morning: /^ص/,
        afternoon: /^بعد/,
        evening: /^م/,
        night: /^ل/
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-EG.js
var require_ar_EG = __commonJS({
  "node_modules/date-fns/locale/ar-EG.js"(exports) {
    "use strict";
    exports.arEG = void 0;
    var _index = require_formatDistance6();
    var _index2 = require_formatLong5();
    var _index3 = require_formatRelative6();
    var _index4 = require_localize5();
    var _index5 = require_match5();
    var arEG = exports.arEG = {
      code: "ar-EG",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ar-MA/_lib/formatDistance.js
var require_formatDistance7 = __commonJS({
  "node_modules/date-fns/locale/ar-MA/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "أقل من ثانية واحدة",
        two: "أقل من ثانتين",
        threeToTen: "أقل من {{count}} ثواني",
        other: "أقل من {{count}} ثانية"
      },
      xSeconds: {
        one: "ثانية واحدة",
        two: "ثانتين",
        threeToTen: "{{count}} ثواني",
        other: "{{count}} ثانية"
      },
      halfAMinute: "نصف دقيقة",
      lessThanXMinutes: {
        one: "أقل من دقيقة",
        two: "أقل من دقيقتين",
        threeToTen: "أقل من {{count}} دقائق",
        other: "أقل من {{count}} دقيقة"
      },
      xMinutes: {
        one: "دقيقة واحدة",
        two: "دقيقتين",
        threeToTen: "{{count}} دقائق",
        other: "{{count}} دقيقة"
      },
      aboutXHours: {
        one: "ساعة واحدة تقريباً",
        two: "ساعتين تقريباً",
        threeToTen: "{{count}} ساعات تقريباً",
        other: "{{count}} ساعة تقريباً"
      },
      xHours: {
        one: "ساعة واحدة",
        two: "ساعتين",
        threeToTen: "{{count}} ساعات",
        other: "{{count}} ساعة"
      },
      xDays: {
        one: "يوم واحد",
        two: "يومين",
        threeToTen: "{{count}} أيام",
        other: "{{count}} يوم"
      },
      aboutXWeeks: {
        one: "أسبوع واحد تقريباً",
        two: "أسبوعين تقريباً",
        threeToTen: "{{count}} أسابيع تقريباً",
        other: "{{count}} أسبوع تقريباً"
      },
      xWeeks: {
        one: "أسبوع واحد",
        two: "أسبوعين",
        threeToTen: "{{count}} أسابيع",
        other: "{{count}} أسبوع"
      },
      aboutXMonths: {
        one: "شهر واحد تقريباً",
        two: "شهرين تقريباً",
        threeToTen: "{{count}} أشهر تقريباً",
        other: "{{count}} شهر تقريباً"
      },
      xMonths: {
        one: "شهر واحد",
        two: "شهرين",
        threeToTen: "{{count}} أشهر",
        other: "{{count}} شهر"
      },
      aboutXYears: {
        one: "عام واحد تقريباً",
        two: "عامين تقريباً",
        threeToTen: "{{count}} أعوام تقريباً",
        other: "{{count}} عام تقريباً"
      },
      xYears: {
        one: "عام واحد",
        two: "عامين",
        threeToTen: "{{count}} أعوام",
        other: "{{count}} عام"
      },
      overXYears: {
        one: "أكثر من عام",
        two: "أكثر من عامين",
        threeToTen: "أكثر من {{count}} أعوام",
        other: "أكثر من {{count}} عام"
      },
      almostXYears: {
        one: "عام واحد تقريباً",
        two: "عامين تقريباً",
        threeToTen: "{{count}} أعوام تقريباً",
        other: "{{count}} عام تقريباً"
      }
    };
    var formatDistance = (token, count, options) => {
      options = options || {};
      const usageGroup = formatDistanceLocale[token];
      let result;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else if (count === 2) {
        result = usageGroup.two;
      } else if (count <= 10) {
        result = usageGroup.threeToTen.replace("{{count}}", String(count));
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "في خلال " + result;
        } else {
          return "منذ " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ar-MA/_lib/formatLong.js
var require_formatLong6 = __commonJS({
  "node_modules/date-fns/locale/ar-MA/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'عند' {{time}}",
      long: "{{date}} 'عند' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-MA/_lib/formatRelative.js
var require_formatRelative7 = __commonJS({
  "node_modules/date-fns/locale/ar-MA/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'أخر' eeee 'عند' p",
      yesterday: "'أمس عند' p",
      today: "'اليوم عند' p",
      tomorrow: "'غداً عند' p",
      nextWeek: "eeee 'عند' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => {
      return formatRelativeLocale[token];
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ar-MA/_lib/localize.js
var require_localize6 = __commonJS({
  "node_modules/date-fns/locale/ar-MA/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ق", "ب"],
      abbreviated: ["ق.م.", "ب.م."],
      wide: ["قبل الميلاد", "بعد الميلاد"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ر1", "ر2", "ر3", "ر4"],
      wide: ["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"]
    };
    var monthValues = {
      narrow: ["ي", "ف", "م", "أ", "م", "ي", "ي", "غ", "ش", "أ", "ن", "د"],
      abbreviated: [
        "ينا",
        "فبر",
        "مارس",
        "أبريل",
        "ماي",
        "يونـ",
        "يولـ",
        "غشت",
        "شتنـ",
        "أكتـ",
        "نونـ",
        "دجنـ"
      ],
      wide: [
        "يناير",
        "فبراير",
        "مارس",
        "أبريل",
        "ماي",
        "يونيو",
        "يوليوز",
        "غشت",
        "شتنبر",
        "أكتوبر",
        "نونبر",
        "دجنبر"
      ]
    };
    var dayValues = {
      narrow: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
      short: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      abbreviated: ["أحد", "اثنـ", "ثلا", "أربـ", "خميـ", "جمعة", "سبت"],
      wide: [
        "الأحد",
        "الإثنين",
        "الثلاثاء",
        "الأربعاء",
        "الخميس",
        "الجمعة",
        "السبت"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "في الصباح",
        afternoon: "بعد الظـهر",
        evening: "في المساء",
        night: "في الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "في الصباح",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظـهر",
        evening: "في المساء",
        night: "في الليل"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => Number(quarter) - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-MA/_lib/match.js
var require_match6 = __commonJS({
  "node_modules/date-fns/locale/ar-MA/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchPatternFn();
    var _index2 = require_buildMatchFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ر[1234]/i,
      wide: /^الربع [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[يفمأمسند]/i,
      abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i,
      wide: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ي/i,
        /^ي/i,
        /^غ/i,
        /^ش/i,
        /^أ/i,
        /^ن/i,
        /^د/i
      ],
      any: [
        /^ين/i,
        /^فب/i,
        /^مار/i,
        /^أب/i,
        /^ماي/i,
        /^يون/i,
        /^يول/i,
        /^غشت/i,
        /^ش/i,
        /^أك/i,
        /^ن/i,
        /^د/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|إثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|إثن|ثلا|أرب|خمي|جمعة|سبت)/i,
      wide: /^(الأحد|الإثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [
        /^الأحد/i,
        /^الإثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
      ],
      any: [/^أح/i, /^إث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => Number(index) + 1
      }),
      month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-MA.js
var require_ar_MA = __commonJS({
  "node_modules/date-fns/locale/ar-MA.js"(exports) {
    "use strict";
    exports.arMA = void 0;
    var _index = require_formatDistance7();
    var _index2 = require_formatLong6();
    var _index3 = require_formatRelative7();
    var _index4 = require_localize6();
    var _index5 = require_match6();
    var arMA = exports.arMA = {
      code: "ar-MA",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        // Monday is 1
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ar-SA/_lib/formatDistance.js
var require_formatDistance8 = __commonJS({
  "node_modules/date-fns/locale/ar-SA/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "أقل من ثانية واحدة",
        two: "أقل من ثانتين",
        threeToTen: "أقل من {{count}} ثواني",
        other: "أقل من {{count}} ثانية"
      },
      xSeconds: {
        one: "ثانية واحدة",
        two: "ثانتين",
        threeToTen: "{{count}} ثواني",
        other: "{{count}} ثانية"
      },
      halfAMinute: "نصف دقيقة",
      lessThanXMinutes: {
        one: "أقل من دقيقة",
        two: "أقل من دقيقتين",
        threeToTen: "أقل من {{count}} دقائق",
        other: "أقل من {{count}} دقيقة"
      },
      xMinutes: {
        one: "دقيقة واحدة",
        two: "دقيقتين",
        threeToTen: "{{count}} دقائق",
        other: "{{count}} دقيقة"
      },
      aboutXHours: {
        one: "ساعة واحدة تقريباً",
        two: "ساعتين تقريباً",
        threeToTen: "{{count}} ساعات تقريباً",
        other: "{{count}} ساعة تقريباً"
      },
      xHours: {
        one: "ساعة واحدة",
        two: "ساعتين",
        threeToTen: "{{count}} ساعات",
        other: "{{count}} ساعة"
      },
      xDays: {
        one: "يوم واحد",
        two: "يومين",
        threeToTen: "{{count}} أيام",
        other: "{{count}} يوم"
      },
      aboutXWeeks: {
        one: "أسبوع واحد تقريباً",
        two: "أسبوعين تقريباً",
        threeToTen: "{{count}} أسابيع تقريباً",
        other: "{{count}} أسبوع تقريباً"
      },
      xWeeks: {
        one: "أسبوع واحد",
        two: "أسبوعين",
        threeToTen: "{{count}} أسابيع",
        other: "{{count}} أسبوع"
      },
      aboutXMonths: {
        one: "شهر واحد تقريباً",
        two: "شهرين تقريباً",
        threeToTen: "{{count}} أشهر تقريباً",
        other: "{{count}} شهر تقريباً"
      },
      xMonths: {
        one: "شهر واحد",
        two: "شهرين",
        threeToTen: "{{count}} أشهر",
        other: "{{count}} شهر"
      },
      aboutXYears: {
        one: "عام واحد تقريباً",
        two: "عامين تقريباً",
        threeToTen: "{{count}} أعوام تقريباً",
        other: "{{count}} عام تقريباً"
      },
      xYears: {
        one: "عام واحد",
        two: "عامين",
        threeToTen: "{{count}} أعوام",
        other: "{{count}} عام"
      },
      overXYears: {
        one: "أكثر من عام",
        two: "أكثر من عامين",
        threeToTen: "أكثر من {{count}} أعوام",
        other: "أكثر من {{count}} عام"
      },
      almostXYears: {
        one: "عام واحد تقريباً",
        two: "عامين تقريباً",
        threeToTen: "{{count}} أعوام تقريباً",
        other: "{{count}} عام تقريباً"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2) {
        result = tokenValue.two;
      } else if (count <= 10) {
        result = tokenValue.threeToTen.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "في خلال " + result;
        } else {
          return "منذ " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ar-SA/_lib/formatLong.js
var require_formatLong7 = __commonJS({
  "node_modules/date-fns/locale/ar-SA/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'عند' {{time}}",
      long: "{{date}} 'عند' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-SA/_lib/formatRelative.js
var require_formatRelative8 = __commonJS({
  "node_modules/date-fns/locale/ar-SA/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'أخر' eeee 'عند' p",
      yesterday: "'أمس عند' p",
      today: "'اليوم عند' p",
      tomorrow: "'غداً عند' p",
      nextWeek: "eeee 'عند' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ar-SA/_lib/localize.js
var require_localize7 = __commonJS({
  "node_modules/date-fns/locale/ar-SA/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ق", "ب"],
      abbreviated: ["ق.م.", "ب.م."],
      wide: ["قبل الميلاد", "بعد الميلاد"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ر1", "ر2", "ر3", "ر4"],
      wide: ["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"]
    };
    var monthValues = {
      narrow: ["ي", "ف", "م", "أ", "م", "ي", "ي", "أ", "س", "أ", "ن", "د"],
      abbreviated: [
        "ينا",
        "فبر",
        "مارس",
        "أبريل",
        "مايو",
        "يونـ",
        "يولـ",
        "أغسـ",
        "سبتـ",
        "أكتـ",
        "نوفـ",
        "ديسـ"
      ],
      wide: [
        "يناير",
        "فبراير",
        "مارس",
        "أبريل",
        "مايو",
        "يونيو",
        "يوليو",
        "أغسطس",
        "سبتمبر",
        "أكتوبر",
        "نوفمبر",
        "ديسمبر"
      ]
    };
    var dayValues = {
      narrow: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
      short: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      abbreviated: ["أحد", "اثنـ", "ثلا", "أربـ", "خميـ", "جمعة", "سبت"],
      wide: [
        "الأحد",
        "الاثنين",
        "الثلاثاء",
        "الأربعاء",
        "الخميس",
        "الجمعة",
        "السبت"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظهر",
        evening: "مساءاً",
        night: "ليلاً"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "م",
        midnight: "ن",
        noon: "ظ",
        morning: "في الصباح",
        afternoon: "بعد الظـهر",
        evening: "في المساء",
        night: "في الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "في الصباح",
        afternoon: "بعد الظهر",
        evening: "في المساء",
        night: "في الليل"
      },
      wide: {
        am: "ص",
        pm: "م",
        midnight: "نصف الليل",
        noon: "ظهر",
        morning: "صباحاً",
        afternoon: "بعد الظـهر",
        evening: "في المساء",
        night: "في الليل"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-SA/_lib/match.js
var require_match7 = __commonJS({
  "node_modules/date-fns/locale/ar-SA/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
      wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ر[1234]/i,
      wide: /^الربع [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[يفمأمسند]/i,
      abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,
      wide: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ي/i,
        /^ي/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
      ],
      any: [
        /^ين/i,
        /^ف/i,
        /^مار/i,
        /^أب/i,
        /^ماي/i,
        /^يون/i,
        /^يول/i,
        /^أغ/i,
        /^س/i,
        /^أك/i,
        /^ن/i,
        /^د/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
      wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
      ],
      any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-SA.js
var require_ar_SA = __commonJS({
  "node_modules/date-fns/locale/ar-SA.js"(exports) {
    "use strict";
    exports.arSA = void 0;
    var _index = require_formatDistance8();
    var _index2 = require_formatLong7();
    var _index3 = require_formatRelative8();
    var _index4 = require_localize7();
    var _index5 = require_match7();
    var arSA = exports.arSA = {
      code: "ar-SA",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ar-TN/_lib/formatDistance.js
var require_formatDistance9 = __commonJS({
  "node_modules/date-fns/locale/ar-TN/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "أقل من ثانية",
        two: "أقل من زوز ثواني",
        threeToTen: "أقل من {{count}} ثواني",
        other: "أقل من {{count}} ثانية"
      },
      xSeconds: {
        one: "ثانية",
        two: "زوز ثواني",
        threeToTen: "{{count}} ثواني",
        other: "{{count}} ثانية"
      },
      halfAMinute: "نص دقيقة",
      lessThanXMinutes: {
        one: "أقل من دقيقة",
        two: "أقل من دقيقتين",
        threeToTen: "أقل من {{count}} دقايق",
        other: "أقل من {{count}} دقيقة"
      },
      xMinutes: {
        one: "دقيقة",
        two: "دقيقتين",
        threeToTen: "{{count}} دقايق",
        other: "{{count}} دقيقة"
      },
      aboutXHours: {
        one: "ساعة تقريب",
        two: "ساعتين تقريب",
        threeToTen: "{{count}} سوايع تقريب",
        other: "{{count}} ساعة تقريب"
      },
      xHours: {
        one: "ساعة",
        two: "ساعتين",
        threeToTen: "{{count}} سوايع",
        other: "{{count}} ساعة"
      },
      xDays: {
        one: "نهار",
        two: "نهارين",
        threeToTen: "{{count}} أيام",
        other: "{{count}} يوم"
      },
      aboutXWeeks: {
        one: "جمعة تقريب",
        two: "جمعتين تقريب",
        threeToTen: "{{count}} جماع تقريب",
        other: "{{count}} جمعة تقريب"
      },
      xWeeks: {
        one: "جمعة",
        two: "جمعتين",
        threeToTen: "{{count}} جماع",
        other: "{{count}} جمعة"
      },
      aboutXMonths: {
        one: "شهر تقريب",
        two: "شهرين تقريب",
        threeToTen: "{{count}} أشهرة تقريب",
        other: "{{count}} شهر تقريب"
      },
      xMonths: {
        one: "شهر",
        two: "شهرين",
        threeToTen: "{{count}} أشهرة",
        other: "{{count}} شهر"
      },
      aboutXYears: {
        one: "عام تقريب",
        two: "عامين تقريب",
        threeToTen: "{{count}} أعوام تقريب",
        other: "{{count}} عام تقريب"
      },
      xYears: {
        one: "عام",
        two: "عامين",
        threeToTen: "{{count}} أعوام",
        other: "{{count}} عام"
      },
      overXYears: {
        one: "أكثر من عام",
        two: "أكثر من عامين",
        threeToTen: "أكثر من {{count}} أعوام",
        other: "أكثر من {{count}} عام"
      },
      almostXYears: {
        one: "عام تقريب",
        two: "عامين تقريب",
        threeToTen: "{{count}} أعوام تقريب",
        other: "{{count}} عام تقريب"
      }
    };
    var formatDistance = (token, count, options) => {
      const usageGroup = formatDistanceLocale[token];
      let result;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else if (count === 2) {
        result = usageGroup.two;
      } else if (count <= 10) {
        result = usageGroup.threeToTen.replace("{{count}}", String(count));
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "في " + result;
        } else {
          return "عندو " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ar-TN/_lib/formatLong.js
var require_formatLong8 = __commonJS({
  "node_modules/date-fns/locale/ar-TN/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE، do MMMM y",
      long: "do MMMM y",
      medium: "d MMM y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss",
      long: "HH:mm:ss",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'مع' {{time}}",
      long: "{{date}} 'مع' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-TN/_lib/formatRelative.js
var require_formatRelative9 = __commonJS({
  "node_modules/date-fns/locale/ar-TN/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'إلي فات مع' p",
      yesterday: "'البارح مع' p",
      today: "'اليوم مع' p",
      tomorrow: "'غدوة مع' p",
      nextWeek: "eeee 'الجمعة الجاية مع' p 'نهار'",
      other: "P"
    };
    var formatRelative = (token) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ar-TN/_lib/localize.js
var require_localize8 = __commonJS({
  "node_modules/date-fns/locale/ar-TN/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ق", "ب"],
      abbreviated: ["ق.م.", "ب.م."],
      wide: ["قبل الميلاد", "بعد الميلاد"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ر1", "ر2", "ر3", "ر4"],
      wide: ["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"]
    };
    var monthValues = {
      narrow: ["د", "ن", "أ", "س", "أ", "ج", "ج", "م", "أ", "م", "ف", "ج"],
      abbreviated: [
        "جانفي",
        "فيفري",
        "مارس",
        "أفريل",
        "ماي",
        "جوان",
        "جويلية",
        "أوت",
        "سبتمبر",
        "أكتوبر",
        "نوفمبر",
        "ديسمبر"
      ],
      wide: [
        "جانفي",
        "فيفري",
        "مارس",
        "أفريل",
        "ماي",
        "جوان",
        "جويلية",
        "أوت",
        "سبتمبر",
        "أكتوبر",
        "نوفمبر",
        "ديسمبر"
      ]
    };
    var dayValues = {
      narrow: ["ح", "ن", "ث", "ر", "خ", "ج", "س"],
      short: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      abbreviated: ["أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"],
      wide: [
        "الأحد",
        "الاثنين",
        "الثلاثاء",
        "الأربعاء",
        "الخميس",
        "الجمعة",
        "السبت"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "ع",
        morning: "الصباح",
        noon: "القايلة",
        afternoon: "بعد القايلة",
        evening: "العشية",
        night: "الليل",
        midnight: "نص الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "ع",
        morning: "الصباح",
        noon: "القايلة",
        afternoon: "بعد القايلة",
        evening: "العشية",
        night: "الليل",
        midnight: "نص الليل"
      },
      wide: {
        am: "ص",
        pm: "ع",
        morning: "الصباح",
        noon: "القايلة",
        afternoon: "بعد القايلة",
        evening: "العشية",
        night: "الليل",
        midnight: "نص الليل"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ص",
        pm: "ع",
        morning: "في الصباح",
        noon: "في القايلة",
        afternoon: "بعد القايلة",
        evening: "في العشية",
        night: "في الليل",
        midnight: "نص الليل"
      },
      abbreviated: {
        am: "ص",
        pm: "ع",
        morning: "في الصباح",
        noon: "في القايلة",
        afternoon: "بعد القايلة",
        evening: "في العشية",
        night: "في الليل",
        midnight: "نص الليل"
      },
      wide: {
        am: "ص",
        pm: "ع",
        morning: "في الصباح",
        noon: "في القايلة",
        afternoon: "بعد القايلة",
        evening: "في العشية",
        night: "في الليل",
        midnight: "نص الليل"
      }
    };
    var ordinalNumber = (num) => String(num);
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-TN/_lib/match.js
var require_match8 = __commonJS({
  "node_modules/date-fns/locale/ar-TN/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchPatternFn();
    var _index2 = require_buildMatchFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /[قب]/,
      abbreviated: /[قب]\.م\./,
      wide: /(قبل|بعد) الميلاد/
    };
    var parseEraPatterns = {
      any: [/قبل/, /بعد/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /ر[1234]/,
      wide: /الربع (الأول|الثاني|الثالث|الرابع)/
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[جفمأسند]/,
      abbreviated: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
      wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
    };
    var parseMonthPatterns = {
      narrow: [
        /^ج/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ج/i,
        /^ج/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
      ],
      any: [
        /^جانفي/i,
        /^فيفري/i,
        /^مارس/i,
        /^أفريل/i,
        /^ماي/i,
        /^جوان/i,
        /^جويلية/i,
        /^أوت/i,
        /^سبتمبر/i,
        /^أكتوبر/i,
        /^نوفمبر/i,
        /^ديسمبر/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[حنثرخجس]/i,
      short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
      wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
    };
    var parseDayPatterns = {
      narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
      wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
      ],
      any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ص|ع|ن ل|ل|(في|مع) (صباح|قايلة|عشية|ليل))/,
      any: /^([صع]|نص الليل|قايلة|(في|مع) (صباح|قايلة|عشية|ليل))/
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ص/,
        pm: /^ع/,
        midnight: /نص الليل/,
        noon: /قايلة/,
        afternoon: /بعد القايلة/,
        morning: /صباح/,
        evening: /عشية/,
        night: /ليل/
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ar-TN.js
var require_ar_TN = __commonJS({
  "node_modules/date-fns/locale/ar-TN.js"(exports) {
    "use strict";
    exports.arTN = void 0;
    var _index = require_formatDistance9();
    var _index2 = require_formatLong8();
    var _index3 = require_formatRelative9();
    var _index4 = require_localize8();
    var _index5 = require_match8();
    var arTN = exports.arTN = {
      code: "ar-TN",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/az/_lib/formatDistance.js
var require_formatDistance10 = __commonJS({
  "node_modules/date-fns/locale/az/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "bir saniyədən az",
        other: "{{count}} bir saniyədən az"
      },
      xSeconds: {
        one: "1 saniyə",
        other: "{{count}} saniyə"
      },
      halfAMinute: "yarım dəqiqə",
      lessThanXMinutes: {
        one: "bir dəqiqədən az",
        other: "{{count}} bir dəqiqədən az"
      },
      xMinutes: {
        one: "bir dəqiqə",
        other: "{{count}} dəqiqə"
      },
      aboutXHours: {
        one: "təxminən 1 saat",
        other: "təxminən {{count}} saat"
      },
      xHours: {
        one: "1 saat",
        other: "{{count}} saat"
      },
      xDays: {
        one: "1 gün",
        other: "{{count}} gün"
      },
      aboutXWeeks: {
        one: "təxminən 1 həftə",
        other: "təxminən {{count}} həftə"
      },
      xWeeks: {
        one: "1 həftə",
        other: "{{count}} həftə"
      },
      aboutXMonths: {
        one: "təxminən 1 ay",
        other: "təxminən {{count}} ay"
      },
      xMonths: {
        one: "1 ay",
        other: "{{count}} ay"
      },
      aboutXYears: {
        one: "təxminən 1 il",
        other: "təxminən {{count}} il"
      },
      xYears: {
        one: "1 il",
        other: "{{count}} il"
      },
      overXYears: {
        one: "1 ildən çox",
        other: "{{count}} ildən çox"
      },
      almostXYears: {
        one: "demək olar ki 1 il",
        other: "demək olar ki {{count}} il"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " sonra";
        } else {
          return result + " əvvəl";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/az/_lib/formatLong.js
var require_formatLong9 = __commonJS({
  "node_modules/date-fns/locale/az/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM y 'il'",
      long: "do MMMM y 'il'",
      medium: "d MMM y 'il'",
      short: "dd.MM.yyyy"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}} - 'də'",
      long: "{{date}} {{time}} - 'də'",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/az/_lib/formatRelative.js
var require_formatRelative10 = __commonJS({
  "node_modules/date-fns/locale/az/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'sonuncu' eeee p -'də'",
      yesterday: "'dünən' p -'də'",
      today: "'bugün' p -'də'",
      tomorrow: "'sabah' p -'də'",
      nextWeek: "eeee p -'də'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/az/_lib/localize.js
var require_localize9 = __commonJS({
  "node_modules/date-fns/locale/az/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["e.ə", "b.e"],
      abbreviated: ["e.ə", "b.e"],
      wide: ["eramızdan əvvəl", "bizim era"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1ci kvartal", "2ci kvartal", "3cü kvartal", "4cü kvartal"]
    };
    var monthValues = {
      narrow: ["Y", "F", "M", "A", "M", "İ", "İ", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Yan",
        "Fev",
        "Mar",
        "Apr",
        "May",
        "İyun",
        "İyul",
        "Avq",
        "Sen",
        "Okt",
        "Noy",
        "Dek"
      ],
      wide: [
        "Yanvar",
        "Fevral",
        "Mart",
        "Aprel",
        "May",
        "İyun",
        "İyul",
        "Avqust",
        "Sentyabr",
        "Oktyabr",
        "Noyabr",
        "Dekabr"
      ]
    };
    var dayValues = {
      narrow: ["B.", "B.e", "Ç.a", "Ç.", "C.a", "C.", "Ş."],
      short: ["B.", "B.e", "Ç.a", "Ç.", "C.a", "C.", "Ş."],
      abbreviated: ["Baz", "Baz.e", "Çər.a", "Çər", "Cüm.a", "Cüm", "Şə"],
      wide: [
        "Bazar",
        "Bazar ertəsi",
        "Çərşənbə axşamı",
        "Çərşənbə",
        "Cümə axşamı",
        "Cümə",
        "Şənbə"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "gecəyarı",
        noon: "gün",
        morning: "səhər",
        afternoon: "gündüz",
        evening: "axşam",
        night: "gecə"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gecəyarı",
        noon: "gün",
        morning: "səhər",
        afternoon: "gündüz",
        evening: "axşam",
        night: "gecə"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gecəyarı",
        noon: "gün",
        morning: "səhər",
        afternoon: "gündüz",
        evening: "axşam",
        night: "gecə"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "gecəyarı",
        noon: "gün",
        morning: "səhər",
        afternoon: "gündüz",
        evening: "axşam",
        night: "gecə"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gecəyarı",
        noon: "gün",
        morning: "səhər",
        afternoon: "gündüz",
        evening: "axşam",
        night: "gecə"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gecəyarı",
        noon: "gün",
        morning: "səhər",
        afternoon: "gündüz",
        evening: "axşam",
        night: "gecə"
      }
    };
    var suffixes = {
      1: "-inci",
      5: "-inci",
      8: "-inci",
      70: "-inci",
      80: "-inci",
      2: "-nci",
      7: "-nci",
      20: "-nci",
      50: "-nci",
      3: "-üncü",
      4: "-üncü",
      100: "-üncü",
      6: "-ncı",
      9: "-uncu",
      10: "-uncu",
      30: "-uncu",
      60: "-ıncı",
      90: "-ıncı"
    };
    var getSuffix = (number) => {
      if (number === 0) {
        return number + "-ıncı";
      }
      const a = number % 10;
      const b = number % 100 - a;
      const c = number >= 100 ? 100 : null;
      if (suffixes[a]) {
        return suffixes[a];
      } else if (suffixes[b]) {
        return suffixes[b];
      } else if (c !== null) {
        return suffixes[c];
      }
      return "";
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      const suffix = getSuffix(number);
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/az/_lib/match.js
var require_match9 = __commonJS({
  "node_modules/date-fns/locale/az/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?(ci|inci|nci|uncu|üncü|ncı))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)$/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
      wide: /^(bizim eradan əvvəl|bizim era)$/i
    };
    var parseEraPatterns = {
      any: [/^b$/i, /^(a|c)$/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]$/i,
      abbreviated: /^K[1234]$/i,
      wide: /^[1234](ci)? kvartal$/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[(?-i)yfmaisond]$/i,
      abbreviated: /^(Yan|Fev|Mar|Apr|May|İyun|İyul|Avq|Sen|Okt|Noy|Dek)$/i,
      wide: /^(Yanvar|Fevral|Mart|Aprel|May|İyun|İyul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^[(?-i)y]$/i,
        /^[(?-i)f]$/i,
        /^[(?-i)m]$/i,
        /^[(?-i)a]$/i,
        /^[(?-i)m]$/i,
        /^[(?-i)i]$/i,
        /^[(?-i)i]$/i,
        /^[(?-i)a]$/i,
        /^[(?-i)s]$/i,
        /^[(?-i)o]$/i,
        /^[(?-i)n]$/i,
        /^[(?-i)d]$/i
      ],
      abbreviated: [
        /^Yan$/i,
        /^Fev$/i,
        /^Mar$/i,
        /^Apr$/i,
        /^May$/i,
        /^İyun$/i,
        /^İyul$/i,
        /^Avg$/i,
        /^Sen$/i,
        /^Okt$/i,
        /^Noy$/i,
        /^Dek$/i
      ],
      wide: [
        /^Yanvar$/i,
        /^Fevral$/i,
        /^Mart$/i,
        /^Aprel$/i,
        /^May$/i,
        /^İyun$/i,
        /^İyul$/i,
        /^Avgust$/i,
        /^Sentyabr$/i,
        /^Oktyabr$/i,
        /^Noyabr$/i,
        /^Dekabr$/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
      short: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
      abbreviated: /^(Baz\.e|Çər|Çər\.a|Cüm|Cüm\.a|Şə)$/i,
      wide: /^(Bazar|Bazar ertəsi|Çərşənbə axşamı|Çərşənbə|Cümə axşamı|Cümə|Şənbə)$/i
    };
    var parseDayPatterns = {
      narrow: [
        /^B\.$/i,
        /^B\.e$/i,
        /^Ç\.a$/i,
        /^Ç\.$/i,
        /^C\.a$/i,
        /^C\.$/i,
        /^Ş\.$/i
      ],
      abbreviated: [
        /^Baz$/i,
        /^Baz\.e$/i,
        /^Çər\.a$/i,
        /^Çər$/i,
        /^Cüm\.a$/i,
        /^Cüm$/i,
        /^Şə$/i
      ],
      wide: [
        /^Bazar$/i,
        /^Bazar ertəsi$/i,
        /^Çərşənbə axşamı$/i,
        /^Çərşənbə$/i,
        /^Cümə axşamı$/i,
        /^Cümə$/i,
        /^Şənbə$/i
      ],
      any: [
        /^B\.$/i,
        /^B\.e$/i,
        /^Ç\.a$/i,
        /^Ç\.$/i,
        /^C\.a$/i,
        /^C\.$/i,
        /^Ş\.$/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,
      any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a$/i,
        pm: /^p$/i,
        midnight: /^gecəyarı$/i,
        noon: /^gün$/i,
        morning: /səhər$/i,
        afternoon: /gündüz$/i,
        evening: /axşam$/i,
        night: /gecə$/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "narrow"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/az.js
var require_az = __commonJS({
  "node_modules/date-fns/locale/az.js"(exports) {
    "use strict";
    exports.az = void 0;
    var _index = require_formatDistance10();
    var _index2 = require_formatLong9();
    var _index3 = require_formatRelative10();
    var _index4 = require_localize9();
    var _index5 = require_match9();
    var az = exports.az = {
      code: "az",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/be/_lib/formatDistance.js
var require_formatDistance11 = __commonJS({
  "node_modules/date-fns/locale/be/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function declension(scheme, count) {
      if (scheme.one !== void 0 && count === 1) {
        return scheme.one;
      }
      const rem10 = count % 10;
      const rem100 = count % 100;
      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace("{{count}}", String(count));
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace("{{count}}", String(count));
      } else {
        return scheme.pluralGenitive.replace("{{count}}", String(count));
      }
    }
    function buildLocalizeTokenFn(scheme) {
      return (count, options) => {
        if (options && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return "праз " + declension(scheme.regular, count);
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + " таму";
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }
    var halfAMinute = (_, options) => {
      if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "праз паўхвіліны";
        } else {
          return "паўхвіліны таму";
        }
      }
      return "паўхвіліны";
    };
    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: "менш за секунду",
          singularNominative: "менш за {{count}} секунду",
          singularGenitive: "менш за {{count}} секунды",
          pluralGenitive: "менш за {{count}} секунд"
        },
        future: {
          one: "менш, чым праз секунду",
          singularNominative: "менш, чым праз {{count}} секунду",
          singularGenitive: "менш, чым праз {{count}} секунды",
          pluralGenitive: "менш, чым праз {{count}} секунд"
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} секунда",
          singularGenitive: "{{count}} секунды",
          pluralGenitive: "{{count}} секунд"
        },
        past: {
          singularNominative: "{{count}} секунду таму",
          singularGenitive: "{{count}} секунды таму",
          pluralGenitive: "{{count}} секунд таму"
        },
        future: {
          singularNominative: "праз {{count}} секунду",
          singularGenitive: "праз {{count}} секунды",
          pluralGenitive: "праз {{count}} секунд"
        }
      }),
      halfAMinute,
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: "менш за хвіліну",
          singularNominative: "менш за {{count}} хвіліну",
          singularGenitive: "менш за {{count}} хвіліны",
          pluralGenitive: "менш за {{count}} хвілін"
        },
        future: {
          one: "менш, чым праз хвіліну",
          singularNominative: "менш, чым праз {{count}} хвіліну",
          singularGenitive: "менш, чым праз {{count}} хвіліны",
          pluralGenitive: "менш, чым праз {{count}} хвілін"
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} хвіліна",
          singularGenitive: "{{count}} хвіліны",
          pluralGenitive: "{{count}} хвілін"
        },
        past: {
          singularNominative: "{{count}} хвіліну таму",
          singularGenitive: "{{count}} хвіліны таму",
          pluralGenitive: "{{count}} хвілін таму"
        },
        future: {
          singularNominative: "праз {{count}} хвіліну",
          singularGenitive: "праз {{count}} хвіліны",
          pluralGenitive: "праз {{count}} хвілін"
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} гадзіны",
          singularGenitive: "каля {{count}} гадзін",
          pluralGenitive: "каля {{count}} гадзін"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} гадзіну",
          singularGenitive: "прыблізна праз {{count}} гадзіны",
          pluralGenitive: "прыблізна праз {{count}} гадзін"
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} гадзіна",
          singularGenitive: "{{count}} гадзіны",
          pluralGenitive: "{{count}} гадзін"
        },
        past: {
          singularNominative: "{{count}} гадзіну таму",
          singularGenitive: "{{count}} гадзіны таму",
          pluralGenitive: "{{count}} гадзін таму"
        },
        future: {
          singularNominative: "праз {{count}} гадзіну",
          singularGenitive: "праз {{count}} гадзіны",
          pluralGenitive: "праз {{count}} гадзін"
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} дзень",
          singularGenitive: "{{count}} дні",
          pluralGenitive: "{{count}} дзён"
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} тыдні",
          singularGenitive: "каля {{count}} тыдняў",
          pluralGenitive: "каля {{count}} тыдняў"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} тыдзень",
          singularGenitive: "прыблізна праз {{count}} тыдні",
          pluralGenitive: "прыблізна праз {{count}} тыдняў"
        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} тыдзень",
          singularGenitive: "{{count}} тыдні",
          pluralGenitive: "{{count}} тыдняў"
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} месяца",
          singularGenitive: "каля {{count}} месяцаў",
          pluralGenitive: "каля {{count}} месяцаў"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} месяц",
          singularGenitive: "прыблізна праз {{count}} месяцы",
          pluralGenitive: "прыблізна праз {{count}} месяцаў"
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} месяц",
          singularGenitive: "{{count}} месяцы",
          pluralGenitive: "{{count}} месяцаў"
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} года",
          singularGenitive: "каля {{count}} гадоў",
          pluralGenitive: "каля {{count}} гадоў"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} год",
          singularGenitive: "прыблізна праз {{count}} гады",
          pluralGenitive: "прыблізна праз {{count}} гадоў"
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} год",
          singularGenitive: "{{count}} гады",
          pluralGenitive: "{{count}} гадоў"
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "больш за {{count}} год",
          singularGenitive: "больш за {{count}} гады",
          pluralGenitive: "больш за {{count}} гадоў"
        },
        future: {
          singularNominative: "больш, чым праз {{count}} год",
          singularGenitive: "больш, чым праз {{count}} гады",
          pluralGenitive: "больш, чым праз {{count}} гадоў"
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "амаль {{count}} год",
          singularGenitive: "амаль {{count}} гады",
          pluralGenitive: "амаль {{count}} гадоў"
        },
        future: {
          singularNominative: "амаль праз {{count}} год",
          singularGenitive: "амаль праз {{count}} гады",
          pluralGenitive: "амаль праз {{count}} гадоў"
        }
      })
    };
    var formatDistance = (token, count, options) => {
      options = options || {};
      return formatDistanceLocale[token](count, options);
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/be/_lib/formatLong.js
var require_formatLong10 = __commonJS({
  "node_modules/date-fns/locale/be/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM y 'г.'",
      long: "d MMMM y 'г.'",
      medium: "d MMM y 'г.'",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      any: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/be/_lib/formatRelative.js
var require_formatRelative11 = __commonJS({
  "node_modules/date-fns/locale/be/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var _index2 = require_toDate();
    var accusativeWeekdays = [
      "нядзелю",
      "панядзелак",
      "аўторак",
      "сераду",
      "чацвер",
      "пятніцу",
      "суботу"
    ];
    function lastWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у мінулую " + weekday + " а' p";
        case 1:
        case 2:
        case 4:
          return "'у мінулы " + weekday + " а' p";
      }
    }
    function thisWeek(day) {
      const weekday = accusativeWeekdays[day];
      return "'у " + weekday + " а' p";
    }
    function nextWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у наступную " + weekday + " а' p";
        case 1:
        case 2:
        case 4:
          return "'у наступны " + weekday + " а' p";
      }
    }
    var lastWeekFormat = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return lastWeek(day);
      }
    };
    var nextWeekFormat = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return nextWeek(day);
      }
    };
    var formatRelativeLocale = {
      lastWeek: lastWeekFormat,
      yesterday: "'учора а' p",
      today: "'сёння а' p",
      tomorrow: "'заўтра а' p",
      nextWeek: nextWeekFormat,
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/be/_lib/localize.js
var require_localize10 = __commonJS({
  "node_modules/date-fns/locale/be/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["да н.э.", "н.э."],
      abbreviated: ["да н. э.", "н. э."],
      wide: ["да нашай эры", "нашай эры"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-ы кв.", "2-і кв.", "3-і кв.", "4-ы кв."],
      wide: ["1-ы квартал", "2-і квартал", "3-і квартал", "4-ы квартал"]
    };
    var monthValues = {
      narrow: ["С", "Л", "С", "К", "М", "Ч", "Л", "Ж", "В", "К", "Л", "С"],
      abbreviated: [
        "студз.",
        "лют.",
        "сак.",
        "крас.",
        "май",
        "чэрв.",
        "ліп.",
        "жн.",
        "вер.",
        "кастр.",
        "ліст.",
        "снеж."
      ],
      wide: [
        "студзень",
        "люты",
        "сакавік",
        "красавік",
        "май",
        "чэрвень",
        "ліпень",
        "жнівень",
        "верасень",
        "кастрычнік",
        "лістапад",
        "снежань"
      ]
    };
    var formattingMonthValues = {
      narrow: ["С", "Л", "С", "К", "М", "Ч", "Л", "Ж", "В", "К", "Л", "С"],
      abbreviated: [
        "студз.",
        "лют.",
        "сак.",
        "крас.",
        "мая",
        "чэрв.",
        "ліп.",
        "жн.",
        "вер.",
        "кастр.",
        "ліст.",
        "снеж."
      ],
      wide: [
        "студзеня",
        "лютага",
        "сакавіка",
        "красавіка",
        "мая",
        "чэрвеня",
        "ліпеня",
        "жніўня",
        "верасня",
        "кастрычніка",
        "лістапада",
        "снежня"
      ]
    };
    var dayValues = {
      narrow: ["Н", "П", "А", "С", "Ч", "П", "С"],
      short: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
      abbreviated: ["нядз", "пан", "аўт", "сер", "чац", "пят", "суб"],
      wide: [
        "нядзеля",
        "панядзелак",
        "аўторак",
        "серада",
        "чацвер",
        "пятніца",
        "субота"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дзень",
        evening: "веч.",
        night: "ноч"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дзень",
        evening: "веч.",
        night: "ноч"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўнач",
        noon: "поўдзень",
        morning: "раніца",
        afternoon: "дзень",
        evening: "вечар",
        night: "ноч"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дня",
        evening: "веч.",
        night: "ночы"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дня",
        evening: "веч.",
        night: "ночы"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўнач",
        noon: "поўдзень",
        morning: "раніцы",
        afternoon: "дня",
        evening: "вечара",
        night: "ночы"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const unit = String(options == null ? void 0 : options.unit);
      const number = Number(dirtyNumber);
      let suffix;
      if (unit === "date") {
        suffix = "-га";
      } else if (unit === "hour" || unit === "minute" || unit === "second") {
        suffix = "-я";
      } else {
        suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? "-і" : "-ы";
      }
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/be/_lib/match.js
var require_match10 = __commonJS({
  "node_modules/date-fns/locale/be/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((да )?н\.?\s?э\.?)/i,
      abbreviated: /^((да )?н\.?\s?э\.?)/i,
      wide: /^(да нашай эры|нашай эры|наша эра)/i
    };
    var parseEraPatterns = {
      any: [/^д/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
      wide: /^[1234](-?[ыі]?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[слкмчжв]/i,
      abbreviated: /^(студз|лют|сак|крас|ма[йя]|чэрв|ліп|жн|вер|кастр|ліст|снеж)\.?/i,
      wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|ма[йя]|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|снеж(ань|ня))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^с/i,
        /^л/i,
        /^с/i,
        /^к/i,
        /^м/i,
        /^ч/i,
        /^л/i,
        /^ж/i,
        /^в/i,
        /^к/i,
        /^л/i,
        /^с/i
      ],
      any: [
        /^ст/i,
        /^лю/i,
        /^са/i,
        /^кр/i,
        /^ма/i,
        /^ч/i,
        /^ліп/i,
        /^ж/i,
        /^в/i,
        /^ка/i,
        /^ліс/i,
        /^сн/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[нпасч]/i,
      short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
      abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцв|чац|птн|пят|суб).?/i,
      wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацв(ер|ярга)|пятніц[аы]|субот[аы])/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
      abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
      wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^поўн/i,
        noon: /^поўд/i,
        morning: /^р/i,
        afternoon: /^д[зн]/i,
        evening: /^в/i,
        night: /^н/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/be.js
var require_be = __commonJS({
  "node_modules/date-fns/locale/be.js"(exports) {
    "use strict";
    exports.be = void 0;
    var _index = require_formatDistance11();
    var _index2 = require_formatLong10();
    var _index3 = require_formatRelative11();
    var _index4 = require_localize10();
    var _index5 = require_match10();
    var be = exports.be = {
      code: "be",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/be-tarask/_lib/formatDistance.js
var require_formatDistance12 = __commonJS({
  "node_modules/date-fns/locale/be-tarask/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function declension(scheme, count) {
      if (scheme.one !== void 0 && count === 1) {
        return scheme.one;
      }
      const rem10 = count % 10;
      const rem100 = count % 100;
      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace("{{count}}", String(count));
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace("{{count}}", String(count));
      } else {
        return scheme.pluralGenitive.replace("{{count}}", String(count));
      }
    }
    function buildLocalizeTokenFn(scheme) {
      return (count, options) => {
        if (options && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return "праз " + declension(scheme.regular, count);
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + " таму";
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }
    var halfAMinute = (_, options) => {
      if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "праз паўхвіліны";
        } else {
          return "паўхвіліны таму";
        }
      }
      return "паўхвіліны";
    };
    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: "менш за секунду",
          singularNominative: "менш за {{count}} секунду",
          singularGenitive: "менш за {{count}} секунды",
          pluralGenitive: "менш за {{count}} секунд"
        },
        future: {
          one: "менш, чым праз секунду",
          singularNominative: "менш, чым праз {{count}} секунду",
          singularGenitive: "менш, чым праз {{count}} секунды",
          pluralGenitive: "менш, чым праз {{count}} секунд"
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} секунда",
          singularGenitive: "{{count}} секунды",
          pluralGenitive: "{{count}} секунд"
        },
        past: {
          singularNominative: "{{count}} секунду таму",
          singularGenitive: "{{count}} секунды таму",
          pluralGenitive: "{{count}} секунд таму"
        },
        future: {
          singularNominative: "праз {{count}} секунду",
          singularGenitive: "праз {{count}} секунды",
          pluralGenitive: "праз {{count}} секунд"
        }
      }),
      halfAMinute,
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: "менш за хвіліну",
          singularNominative: "менш за {{count}} хвіліну",
          singularGenitive: "менш за {{count}} хвіліны",
          pluralGenitive: "менш за {{count}} хвілін"
        },
        future: {
          one: "менш, чым праз хвіліну",
          singularNominative: "менш, чым праз {{count}} хвіліну",
          singularGenitive: "менш, чым праз {{count}} хвіліны",
          pluralGenitive: "менш, чым праз {{count}} хвілін"
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} хвіліна",
          singularGenitive: "{{count}} хвіліны",
          pluralGenitive: "{{count}} хвілін"
        },
        past: {
          singularNominative: "{{count}} хвіліну таму",
          singularGenitive: "{{count}} хвіліны таму",
          pluralGenitive: "{{count}} хвілін таму"
        },
        future: {
          singularNominative: "праз {{count}} хвіліну",
          singularGenitive: "праз {{count}} хвіліны",
          pluralGenitive: "праз {{count}} хвілін"
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} гадзіны",
          singularGenitive: "каля {{count}} гадзін",
          pluralGenitive: "каля {{count}} гадзін"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} гадзіну",
          singularGenitive: "прыблізна праз {{count}} гадзіны",
          pluralGenitive: "прыблізна праз {{count}} гадзін"
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} гадзіна",
          singularGenitive: "{{count}} гадзіны",
          pluralGenitive: "{{count}} гадзін"
        },
        past: {
          singularNominative: "{{count}} гадзіну таму",
          singularGenitive: "{{count}} гадзіны таму",
          pluralGenitive: "{{count}} гадзін таму"
        },
        future: {
          singularNominative: "праз {{count}} гадзіну",
          singularGenitive: "праз {{count}} гадзіны",
          pluralGenitive: "праз {{count}} гадзін"
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} дзень",
          singularGenitive: "{{count}} дні",
          pluralGenitive: "{{count}} дзён"
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} тыдні",
          singularGenitive: "каля {{count}} тыдняў",
          pluralGenitive: "каля {{count}} тыдняў"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} тыдзень",
          singularGenitive: "прыблізна праз {{count}} тыдні",
          pluralGenitive: "прыблізна праз {{count}} тыдняў"
        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} тыдзень",
          singularGenitive: "{{count}} тыдні",
          pluralGenitive: "{{count}} тыдняў"
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} месяца",
          singularGenitive: "каля {{count}} месяцаў",
          pluralGenitive: "каля {{count}} месяцаў"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} месяц",
          singularGenitive: "прыблізна праз {{count}} месяцы",
          pluralGenitive: "прыблізна праз {{count}} месяцаў"
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} месяц",
          singularGenitive: "{{count}} месяцы",
          pluralGenitive: "{{count}} месяцаў"
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "каля {{count}} года",
          singularGenitive: "каля {{count}} гадоў",
          pluralGenitive: "каля {{count}} гадоў"
        },
        future: {
          singularNominative: "прыблізна праз {{count}} год",
          singularGenitive: "прыблізна праз {{count}} гады",
          pluralGenitive: "прыблізна праз {{count}} гадоў"
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} год",
          singularGenitive: "{{count}} гады",
          pluralGenitive: "{{count}} гадоў"
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "больш за {{count}} год",
          singularGenitive: "больш за {{count}} гады",
          pluralGenitive: "больш за {{count}} гадоў"
        },
        future: {
          singularNominative: "больш, чым праз {{count}} год",
          singularGenitive: "больш, чым праз {{count}} гады",
          pluralGenitive: "больш, чым праз {{count}} гадоў"
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "амаль {{count}} год",
          singularGenitive: "амаль {{count}} гады",
          pluralGenitive: "амаль {{count}} гадоў"
        },
        future: {
          singularNominative: "амаль праз {{count}} год",
          singularGenitive: "амаль праз {{count}} гады",
          pluralGenitive: "амаль праз {{count}} гадоў"
        }
      })
    };
    var formatDistance = (token, count, options) => {
      options = options || {};
      return formatDistanceLocale[token](count, options);
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/be-tarask/_lib/formatLong.js
var require_formatLong11 = __commonJS({
  "node_modules/date-fns/locale/be-tarask/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM y 'г.'",
      long: "d MMMM y 'г.'",
      medium: "d MMM y 'г.'",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      any: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/be-tarask/_lib/formatRelative.js
var require_formatRelative12 = __commonJS({
  "node_modules/date-fns/locale/be-tarask/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var _index2 = require_toDate();
    var accusativeWeekdays = [
      "нядзелю",
      "панядзелак",
      "аўторак",
      "сераду",
      "чацьвер",
      "пятніцу",
      "суботу"
    ];
    function lastWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у мінулую " + weekday + " а' p";
        case 1:
        case 2:
        case 4:
          return "'у мінулы " + weekday + " а' p";
      }
    }
    function thisWeek(day) {
      const weekday = accusativeWeekdays[day];
      return "'у " + weekday + " а' p";
    }
    function nextWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у наступную " + weekday + " а' p";
        case 1:
        case 2:
        case 4:
          return "'у наступны " + weekday + " а' p";
      }
    }
    var lastWeekFormat = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return lastWeek(day);
      }
    };
    var nextWeekFormat = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return nextWeek(day);
      }
    };
    var formatRelativeLocale = {
      lastWeek: lastWeekFormat,
      yesterday: "'учора а' p",
      today: "'сёньня а' p",
      tomorrow: "'заўтра а' p",
      nextWeek: nextWeekFormat,
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/be-tarask/_lib/localize.js
var require_localize11 = __commonJS({
  "node_modules/date-fns/locale/be-tarask/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["да н.э.", "н.э."],
      abbreviated: ["да н. э.", "н. э."],
      wide: ["да нашай эры", "нашай эры"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-ы кв.", "2-і кв.", "3-і кв.", "4-ы кв."],
      wide: ["1-ы квартал", "2-і квартал", "3-і квартал", "4-ы квартал"]
    };
    var monthValues = {
      narrow: ["С", "Л", "С", "К", "Т", "Ч", "Л", "Ж", "В", "К", "Л", "С"],
      abbreviated: [
        "студз.",
        "лют.",
        "сак.",
        "крас.",
        "трав.",
        "чэрв.",
        "ліп.",
        "жн.",
        "вер.",
        "кастр.",
        "ліст.",
        "сьнеж."
      ],
      wide: [
        "студзень",
        "люты",
        "сакавік",
        "красавік",
        "травень",
        "чэрвень",
        "ліпень",
        "жнівень",
        "верасень",
        "кастрычнік",
        "лістапад",
        "сьнежань"
      ]
    };
    var formattingMonthValues = {
      narrow: ["С", "Л", "С", "К", "Т", "Ч", "Л", "Ж", "В", "К", "Л", "С"],
      abbreviated: [
        "студз.",
        "лют.",
        "сак.",
        "крас.",
        "трав.",
        "чэрв.",
        "ліп.",
        "жн.",
        "вер.",
        "кастр.",
        "ліст.",
        "сьнеж."
      ],
      wide: [
        "студзеня",
        "лютага",
        "сакавіка",
        "красавіка",
        "траўня",
        "чэрвеня",
        "ліпеня",
        "жніўня",
        "верасня",
        "кастрычніка",
        "лістапада",
        "сьнежня"
      ]
    };
    var dayValues = {
      narrow: ["Н", "П", "А", "С", "Ч", "П", "С"],
      short: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
      abbreviated: ["нядз", "пан", "аўт", "сер", "чаць", "пят", "суб"],
      wide: [
        "нядзеля",
        "панядзелак",
        "аўторак",
        "серада",
        "чацьвер",
        "пятніца",
        "субота"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дзень",
        evening: "веч.",
        night: "ноч"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дзень",
        evening: "веч.",
        night: "ноч"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўнач",
        noon: "поўдзень",
        morning: "раніца",
        afternoon: "дзень",
        evening: "вечар",
        night: "ноч"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дня",
        evening: "веч.",
        night: "ночы"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўн.",
        noon: "поўд.",
        morning: "ран.",
        afternoon: "дня",
        evening: "веч.",
        night: "ночы"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "поўнач",
        noon: "поўдзень",
        morning: "раніцы",
        afternoon: "дня",
        evening: "вечара",
        night: "ночы"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const unit = String(options == null ? void 0 : options.unit);
      const number = Number(dirtyNumber);
      let suffix;
      if (unit === "date") {
        suffix = "-га";
      } else if (unit === "hour" || unit === "minute" || unit === "second") {
        suffix = "-я";
      } else {
        suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? "-і" : "-ы";
      }
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/be-tarask/_lib/match.js
var require_match11 = __commonJS({
  "node_modules/date-fns/locale/be-tarask/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((да )?н\.?\s?э\.?)/i,
      abbreviated: /^((да )?н\.?\s?э\.?)/i,
      wide: /^(да нашай эры|нашай эры|наша эра)/i
    };
    var parseEraPatterns = {
      any: [/^д/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
      wide: /^[1234](-?[ыі]?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[слкмчжв]/i,
      abbreviated: /^(студз|лют|сак|крас|тр(ав)?|чэрв|ліп|жн|вер|кастр|ліст|сьнеж)\.?/i,
      wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|тра(вень|ўня)|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|сьнеж(ань|ня))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^с/i,
        /^л/i,
        /^с/i,
        /^к/i,
        /^т/i,
        /^ч/i,
        /^л/i,
        /^ж/i,
        /^в/i,
        /^к/i,
        /^л/i,
        /^с/i
      ],
      any: [
        /^ст/i,
        /^лю/i,
        /^са/i,
        /^кр/i,
        /^тр/i,
        /^ч/i,
        /^ліп/i,
        /^ж/i,
        /^в/i,
        /^ка/i,
        /^ліс/i,
        /^сн/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[нпасч]/i,
      short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
      abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцьв|чаць|птн|пят|суб).?/i,
      wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацьв(ер|ярга)|пятніц[аы]|субот[аы])/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
      abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
      wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^поўн/i,
        noon: /^поўд/i,
        morning: /^р/i,
        afternoon: /^д[зн]/i,
        evening: /^в/i,
        night: /^н/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/be-tarask.js
var require_be_tarask = __commonJS({
  "node_modules/date-fns/locale/be-tarask.js"(exports) {
    "use strict";
    exports.beTarask = void 0;
    var _index = require_formatDistance12();
    var _index2 = require_formatLong11();
    var _index3 = require_formatRelative12();
    var _index4 = require_localize11();
    var _index5 = require_match11();
    var beTarask = exports.beTarask = {
      code: "be-tarask",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/bg/_lib/formatDistance.js
var require_formatDistance13 = __commonJS({
  "node_modules/date-fns/locale/bg/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "по-малко от секунда",
        other: "по-малко от {{count}} секунди"
      },
      xSeconds: {
        one: "1 секунда",
        other: "{{count}} секунди"
      },
      halfAMinute: "половин минута",
      lessThanXMinutes: {
        one: "по-малко от минута",
        other: "по-малко от {{count}} минути"
      },
      xMinutes: {
        one: "1 минута",
        other: "{{count}} минути"
      },
      aboutXHours: {
        one: "около час",
        other: "около {{count}} часа"
      },
      xHours: {
        one: "1 час",
        other: "{{count}} часа"
      },
      xDays: {
        one: "1 ден",
        other: "{{count}} дни"
      },
      aboutXWeeks: {
        one: "около седмица",
        other: "около {{count}} седмици"
      },
      xWeeks: {
        one: "1 седмица",
        other: "{{count}} седмици"
      },
      aboutXMonths: {
        one: "около месец",
        other: "около {{count}} месеца"
      },
      xMonths: {
        one: "1 месец",
        other: "{{count}} месеца"
      },
      aboutXYears: {
        one: "около година",
        other: "около {{count}} години"
      },
      xYears: {
        one: "1 година",
        other: "{{count}} години"
      },
      overXYears: {
        one: "над година",
        other: "над {{count}} години"
      },
      almostXYears: {
        one: "почти година",
        other: "почти {{count}} години"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "след " + result;
        } else {
          return "преди " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/bg/_lib/formatLong.js
var require_formatLong12 = __commonJS({
  "node_modules/date-fns/locale/bg/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, dd MMMM yyyy",
      long: "dd MMMM yyyy",
      medium: "dd MMM yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      any: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/bg/_lib/formatRelative.js
var require_formatRelative13 = __commonJS({
  "node_modules/date-fns/locale/bg/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var _index2 = require_toDate();
    var weekdays = [
      "неделя",
      "понеделник",
      "вторник",
      "сряда",
      "четвъртък",
      "петък",
      "събота"
    ];
    function lastWeek(day) {
      const weekday = weekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'миналата " + weekday + " в' p";
        case 1:
        case 2:
        case 4:
        case 5:
          return "'миналия " + weekday + " в' p";
      }
    }
    function thisWeek(day) {
      const weekday = weekdays[day];
      if (day === 2) {
        return "'във " + weekday + " в' p";
      } else {
        return "'в " + weekday + " в' p";
      }
    }
    function nextWeek(day) {
      const weekday = weekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'следващата " + weekday + " в' p";
        case 1:
        case 2:
        case 4:
        case 5:
          return "'следващия " + weekday + " в' p";
      }
    }
    var lastWeekFormatToken = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return lastWeek(day);
      }
    };
    var nextWeekFormatToken = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return nextWeek(day);
      }
    };
    var formatRelativeLocale = {
      lastWeek: lastWeekFormatToken,
      yesterday: "'вчера в' p",
      today: "'днес в' p",
      tomorrow: "'утре в' p",
      nextWeek: nextWeekFormatToken,
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/bg/_lib/localize.js
var require_localize12 = __commonJS({
  "node_modules/date-fns/locale/bg/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["пр.н.е.", "н.е."],
      abbreviated: ["преди н. е.", "н. е."],
      wide: ["преди новата ера", "новата ера"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-во тримес.", "2-ро тримес.", "3-то тримес.", "4-то тримес."],
      wide: [
        "1-во тримесечие",
        "2-ро тримесечие",
        "3-то тримесечие",
        "4-то тримесечие"
      ]
    };
    var monthValues = {
      abbreviated: [
        "яну",
        "фев",
        "мар",
        "апр",
        "май",
        "юни",
        "юли",
        "авг",
        "сеп",
        "окт",
        "ное",
        "дек"
      ],
      wide: [
        "януари",
        "февруари",
        "март",
        "април",
        "май",
        "юни",
        "юли",
        "август",
        "септември",
        "октомври",
        "ноември",
        "декември"
      ]
    };
    var dayValues = {
      narrow: ["Н", "П", "В", "С", "Ч", "П", "С"],
      short: ["нд", "пн", "вт", "ср", "чт", "пт", "сб"],
      abbreviated: ["нед", "пон", "вто", "сря", "чет", "пет", "съб"],
      wide: [
        "неделя",
        "понеделник",
        "вторник",
        "сряда",
        "четвъртък",
        "петък",
        "събота"
      ]
    };
    var dayPeriodValues = {
      wide: {
        am: "преди обяд",
        pm: "след обяд",
        midnight: "в полунощ",
        noon: "на обяд",
        morning: "сутринта",
        afternoon: "следобед",
        evening: "вечерта",
        night: "през нощта"
      }
    };
    function isFeminine(unit) {
      return unit === "year" || unit === "week" || unit === "minute" || unit === "second";
    }
    function isNeuter(unit) {
      return unit === "quarter";
    }
    function numberWithSuffix(number, unit, masculine, feminine, neuter) {
      const suffix = isNeuter(unit) ? neuter : isFeminine(unit) ? feminine : masculine;
      return number + "-" + suffix;
    }
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = options == null ? void 0 : options.unit;
      if (number === 0) {
        return numberWithSuffix(0, unit, "ев", "ева", "ево");
      } else if (number % 1e3 === 0) {
        return numberWithSuffix(number, unit, "ен", "на", "но");
      } else if (number % 100 === 0) {
        return numberWithSuffix(number, unit, "тен", "тна", "тно");
      }
      const rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return numberWithSuffix(number, unit, "ви", "ва", "во");
          case 2:
            return numberWithSuffix(number, unit, "ри", "ра", "ро");
          case 7:
          case 8:
            return numberWithSuffix(number, unit, "ми", "ма", "мо");
        }
      }
      return numberWithSuffix(number, unit, "ти", "та", "то");
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/bg/_lib/match.js
var require_match12 = __commonJS({
  "node_modules/date-fns/locale/bg/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?[врмт][аи]|-?т?(ен|на)|-?(ев|ева))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((пр)?н\.?\s?е\.?)/i,
      abbreviated: /^((пр)?н\.?\s?е\.?)/i,
      wide: /^(преди новата ера|новата ера|нова ера)/i
    };
    var parseEraPatterns = {
      any: [/^п/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[врт]?o?)? тримес.?/i,
      wide: /^[1234](-?[врт]?о?)? тримесечие/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchDayPatterns = {
      narrow: /^[нпвсч]/i,
      short: /^(нд|пн|вт|ср|чт|пт|сб)/i,
      abbreviated: /^(нед|пон|вто|сря|чет|пет|съб)/i,
      wide: /^(неделя|понеделник|вторник|сряда|четвъртък|петък|събота)/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[ъб]/i]
    };
    var matchMonthPatterns = {
      abbreviated: /^(яну|фев|мар|апр|май|юни|юли|авг|сеп|окт|ное|дек)/i,
      wide: /^(януари|февруари|март|април|май|юни|юли|август|септември|октомври|ноември|декември)/i
    };
    var parseMonthPatterns = {
      any: [
        /^я/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^май/i,
        /^юн/i,
        /^юл/i,
        /^ав/i,
        /^се/i,
        /^окт/i,
        /^но/i,
        /^де/i
      ]
    };
    var matchDayPeriodPatterns = {
      any: /^(преди о|след о|в по|на о|през|веч|сут|следо)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^преди о/i,
        pm: /^след о/i,
        midnight: /^в пол/i,
        noon: /^на об/i,
        morning: /^сут/i,
        afternoon: /^следо/i,
        evening: /^веч/i,
        night: /^през н/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/bg.js
var require_bg = __commonJS({
  "node_modules/date-fns/locale/bg.js"(exports) {
    "use strict";
    exports.bg = void 0;
    var _index = require_formatDistance13();
    var _index2 = require_formatLong12();
    var _index3 = require_formatRelative13();
    var _index4 = require_localize12();
    var _index5 = require_match12();
    var bg = exports.bg = {
      code: "bg",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/bn/_lib/localize.js
var require_localize13 = __commonJS({
  "node_modules/date-fns/locale/bn/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    exports.numberToLocale = numberToLocale;
    var _index = require_buildLocalizeFn();
    var numberValues = {
      locale: {
        1: "১",
        2: "২",
        3: "৩",
        4: "৪",
        5: "৫",
        6: "৬",
        7: "৭",
        8: "৮",
        9: "৯",
        0: "০"
      },
      number: {
        "১": "1",
        "২": "2",
        "৩": "3",
        "৪": "4",
        "৫": "5",
        "৬": "6",
        "৭": "7",
        "৮": "8",
        "৯": "9",
        "০": "0"
      }
    };
    var eraValues = {
      narrow: ["খ্রিঃপূঃ", "খ্রিঃ"],
      abbreviated: ["খ্রিঃপূর্ব", "খ্রিঃ"],
      wide: ["খ্রিস্টপূর্ব", "খ্রিস্টাব্দ"]
    };
    var quarterValues = {
      narrow: ["১", "২", "৩", "৪"],
      abbreviated: ["১ত্রৈ", "২ত্রৈ", "৩ত্রৈ", "৪ত্রৈ"],
      wide: ["১ম ত্রৈমাসিক", "২য় ত্রৈমাসিক", "৩য় ত্রৈমাসিক", "৪র্থ ত্রৈমাসিক"]
    };
    var monthValues = {
      narrow: [
        "জানু",
        "ফেব্রু",
        "মার্চ",
        "এপ্রিল",
        "মে",
        "জুন",
        "জুলাই",
        "আগস্ট",
        "সেপ্ট",
        "অক্টো",
        "নভে",
        "ডিসে"
      ],
      abbreviated: [
        "জানু",
        "ফেব্রু",
        "মার্চ",
        "এপ্রিল",
        "মে",
        "জুন",
        "জুলাই",
        "আগস্ট",
        "সেপ্ট",
        "অক্টো",
        "নভে",
        "ডিসে"
      ],
      wide: [
        "জানুয়ারি",
        "ফেব্রুয়ারি",
        "মার্চ",
        "এপ্রিল",
        "মে",
        "জুন",
        "জুলাই",
        "আগস্ট",
        "সেপ্টেম্বর",
        "অক্টোবর",
        "নভেম্বর",
        "ডিসেম্বর"
      ]
    };
    var dayValues = {
      narrow: ["র", "সো", "ম", "বু", "বৃ", "শু", "শ"],
      short: ["রবি", "সোম", "মঙ্গল", "বুধ", "বৃহ", "শুক্র", "শনি"],
      abbreviated: ["রবি", "সোম", "মঙ্গল", "বুধ", "বৃহ", "শুক্র", "শনি"],
      wide: [
        "রবিবার",
        "সোমবার",
        "মঙ্গলবার",
        "বুধবার",
        "বৃহস্পতিবার ",
        "শুক্রবার",
        "শনিবার"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "পূ",
        pm: "অপ",
        midnight: "মধ্যরাত",
        noon: "মধ্যাহ্ন",
        morning: "সকাল",
        afternoon: "বিকাল",
        evening: "সন্ধ্যা",
        night: "রাত"
      },
      abbreviated: {
        am: "পূর্বাহ্ন",
        pm: "অপরাহ্ন",
        midnight: "মধ্যরাত",
        noon: "মধ্যাহ্ন",
        morning: "সকাল",
        afternoon: "বিকাল",
        evening: "সন্ধ্যা",
        night: "রাত"
      },
      wide: {
        am: "পূর্বাহ্ন",
        pm: "অপরাহ্ন",
        midnight: "মধ্যরাত",
        noon: "মধ্যাহ্ন",
        morning: "সকাল",
        afternoon: "বিকাল",
        evening: "সন্ধ্যা",
        night: "রাত"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "পূ",
        pm: "অপ",
        midnight: "মধ্যরাত",
        noon: "মধ্যাহ্ন",
        morning: "সকাল",
        afternoon: "বিকাল",
        evening: "সন্ধ্যা",
        night: "রাত"
      },
      abbreviated: {
        am: "পূর্বাহ্ন",
        pm: "অপরাহ্ন",
        midnight: "মধ্যরাত",
        noon: "মধ্যাহ্ন",
        morning: "সকাল",
        afternoon: "বিকাল",
        evening: "সন্ধ্যা",
        night: "রাত"
      },
      wide: {
        am: "পূর্বাহ্ন",
        pm: "অপরাহ্ন",
        midnight: "মধ্যরাত",
        noon: "মধ্যাহ্ন",
        morning: "সকাল",
        afternoon: "বিকাল",
        evening: "সন্ধ্যা",
        night: "রাত"
      }
    };
    function dateOrdinalNumber(number, localeNumber) {
      if (number > 18 && number <= 31) {
        return localeNumber + "শে";
      } else {
        switch (number) {
          case 1:
            return localeNumber + "লা";
          case 2:
          case 3:
            return localeNumber + "রা";
          case 4:
            return localeNumber + "ঠা";
          default:
            return localeNumber + "ই";
        }
      }
    }
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const localeNumber = numberToLocale(number);
      const unit = options == null ? void 0 : options.unit;
      if (unit === "date") {
        return dateOrdinalNumber(number, localeNumber);
      }
      if (number > 10 || number === 0)
        return localeNumber + "তম";
      const rem10 = number % 10;
      switch (rem10) {
        case 2:
        case 3:
          return localeNumber + "য়";
        case 4:
          return localeNumber + "র্থ";
        case 6:
          return localeNumber + "ষ্ঠ";
        default:
          return localeNumber + "ম";
      }
    };
    function numberToLocale(enNumber) {
      return enNumber.toString().replace(/\d/g, function(match) {
        return numberValues.locale[match];
      });
    }
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/bn/_lib/formatDistance.js
var require_formatDistance14 = __commonJS({
  "node_modules/date-fns/locale/bn/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var _index = require_localize13();
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "প্রায় ১ সেকেন্ড",
        other: "প্রায় {{count}} সেকেন্ড"
      },
      xSeconds: {
        one: "১ সেকেন্ড",
        other: "{{count}} সেকেন্ড"
      },
      halfAMinute: "আধ মিনিট",
      lessThanXMinutes: {
        one: "প্রায় ১ মিনিট",
        other: "প্রায় {{count}} মিনিট"
      },
      xMinutes: {
        one: "১ মিনিট",
        other: "{{count}} মিনিট"
      },
      aboutXHours: {
        one: "প্রায় ১ ঘন্টা",
        other: "প্রায় {{count}} ঘন্টা"
      },
      xHours: {
        one: "১ ঘন্টা",
        other: "{{count}} ঘন্টা"
      },
      xDays: {
        one: "১ দিন",
        other: "{{count}} দিন"
      },
      aboutXWeeks: {
        one: "প্রায় ১ সপ্তাহ",
        other: "প্রায় {{count}} সপ্তাহ"
      },
      xWeeks: {
        one: "১ সপ্তাহ",
        other: "{{count}} সপ্তাহ"
      },
      aboutXMonths: {
        one: "প্রায় ১ মাস",
        other: "প্রায় {{count}} মাস"
      },
      xMonths: {
        one: "১ মাস",
        other: "{{count}} মাস"
      },
      aboutXYears: {
        one: "প্রায় ১ বছর",
        other: "প্রায় {{count}} বছর"
      },
      xYears: {
        one: "১ বছর",
        other: "{{count}} বছর"
      },
      overXYears: {
        one: "১ বছরের বেশি",
        other: "{{count}} বছরের বেশি"
      },
      almostXYears: {
        one: "প্রায় ১ বছর",
        other: "প্রায় {{count}} বছর"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace(
          "{{count}}",
          (0, _index.numberToLocale)(count)
        );
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " এর মধ্যে";
        } else {
          return result + " আগে";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/bn/_lib/formatLong.js
var require_formatLong13 = __commonJS({
  "node_modules/date-fns/locale/bn/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}} 'সময়'",
      long: "{{date}} {{time}} 'সময়'",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/bn/_lib/formatRelative.js
var require_formatRelative14 = __commonJS({
  "node_modules/date-fns/locale/bn/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'গত' eeee 'সময়' p",
      yesterday: "'গতকাল' 'সময়' p",
      today: "'আজ' 'সময়' p",
      tomorrow: "'আগামীকাল' 'সময়' p",
      nextWeek: "eeee 'সময়' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/bn/_lib/match.js
var require_match13 = __commonJS({
  "node_modules/date-fns/locale/bn/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(ম|য়|র্থ|ষ্ঠ|শে|ই|তম)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(খ্রিঃপূঃ|খ্রিঃ)/i,
      abbreviated: /^(খ্রিঃপূর্ব|খ্রিঃ)/i,
      wide: /^(খ্রিস্টপূর্ব|খ্রিস্টাব্দ)/i
    };
    var parseEraPatterns = {
      narrow: [/^খ্রিঃপূঃ/i, /^খ্রিঃ/i],
      abbreviated: [/^খ্রিঃপূর্ব/i, /^খ্রিঃ/i],
      wide: [/^খ্রিস্টপূর্ব/i, /^খ্রিস্টাব্দ/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[১২৩৪]/i,
      abbreviated: /^[১২৩৪]ত্রৈ/i,
      wide: /^[১২৩৪](ম|য়|র্থ)? ত্রৈমাসিক/i
    };
    var parseQuarterPatterns = {
      any: [/১/i, /২/i, /৩/i, /৪/i]
    };
    var matchMonthPatterns = {
      narrow: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
      abbreviated: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
      wide: /^(জানুয়ারি|ফেব্রুয়ারি|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্টেম্বর|অক্টোবর|নভেম্বর|ডিসেম্বর)/i
    };
    var parseMonthPatterns = {
      any: [
        /^জানু/i,
        /^ফেব্রু/i,
        /^মার্চ/i,
        /^এপ্রিল/i,
        /^মে/i,
        /^জুন/i,
        /^জুলাই/i,
        /^আগস্ট/i,
        /^সেপ্ট/i,
        /^অক্টো/i,
        /^নভে/i,
        /^ডিসে/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(র|সো|ম|বু|বৃ|শু|শ)+/i,
      short: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
      abbreviated: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
      wide: /^(রবিবার|সোমবার|মঙ্গলবার|বুধবার|বৃহস্পতিবার |শুক্রবার|শনিবার)+/i
    };
    var parseDayPatterns = {
      narrow: [/^র/i, /^সো/i, /^ম/i, /^বু/i, /^বৃ/i, /^শু/i, /^শ/i],
      short: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],
      abbreviated: [
        /^রবি/i,
        /^সোম/i,
        /^মঙ্গল/i,
        /^বুধ/i,
        /^বৃহ/i,
        /^শুক্র/i,
        /^শনি/i
      ],
      wide: [
        /^রবিবার/i,
        /^সোমবার/i,
        /^মঙ্গলবার/i,
        /^বুধবার/i,
        /^বৃহস্পতিবার /i,
        /^শুক্রবার/i,
        /^শনিবার/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(পূ|অপ|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
      abbreviated: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
      wide: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^পূ/i,
        pm: /^অপ/i,
        midnight: /^মধ্যরাত/i,
        noon: /^মধ্যাহ্ন/i,
        morning: /সকাল/i,
        afternoon: /বিকাল/i,
        evening: /সন্ধ্যা/i,
        night: /রাত/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "wide"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/bn.js
var require_bn = __commonJS({
  "node_modules/date-fns/locale/bn.js"(exports) {
    "use strict";
    exports.bn = void 0;
    var _index = require_formatDistance14();
    var _index2 = require_formatLong13();
    var _index3 = require_formatRelative14();
    var _index4 = require_localize13();
    var _index5 = require_match13();
    var bn = exports.bn = {
      code: "bn",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/bs/_lib/formatDistance.js
var require_formatDistance15 = __commonJS({
  "node_modules/date-fns/locale/bs/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          standalone: "manje od 1 sekunde",
          withPrepositionAgo: "manje od 1 sekunde",
          withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
      },
      xSeconds: {
        one: {
          standalone: "1 sekunda",
          withPrepositionAgo: "1 sekunde",
          withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
      },
      halfAMinute: "pola minute",
      lessThanXMinutes: {
        one: {
          standalone: "manje od 1 minute",
          withPrepositionAgo: "manje od 1 minute",
          withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
      },
      xMinutes: {
        one: {
          standalone: "1 minuta",
          withPrepositionAgo: "1 minute",
          withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
      },
      aboutXHours: {
        one: {
          standalone: "oko 1 sat",
          withPrepositionAgo: "oko 1 sat",
          withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
      },
      xHours: {
        one: {
          standalone: "1 sat",
          withPrepositionAgo: "1 sat",
          withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
      },
      xDays: {
        one: {
          standalone: "1 dan",
          withPrepositionAgo: "1 dan",
          withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
      },
      aboutXWeeks: {
        one: {
          standalone: "oko 1 sedmicu",
          withPrepositionAgo: "oko 1 sedmicu",
          withPrepositionIn: "oko 1 sedmicu"
        },
        dual: "oko {{count}} sedmice",
        other: "oko {{count}} sedmice"
      },
      xWeeks: {
        one: {
          standalone: "1 sedmicu",
          withPrepositionAgo: "1 sedmicu",
          withPrepositionIn: "1 sedmicu"
        },
        dual: "{{count}} sedmice",
        other: "{{count}} sedmice"
      },
      aboutXMonths: {
        one: {
          standalone: "oko 1 mjesec",
          withPrepositionAgo: "oko 1 mjesec",
          withPrepositionIn: "oko 1 mjesec"
        },
        dual: "oko {{count}} mjeseca",
        other: "oko {{count}} mjeseci"
      },
      xMonths: {
        one: {
          standalone: "1 mjesec",
          withPrepositionAgo: "1 mjesec",
          withPrepositionIn: "1 mjesec"
        },
        dual: "{{count}} mjeseca",
        other: "{{count}} mjeseci"
      },
      aboutXYears: {
        one: {
          standalone: "oko 1 godinu",
          withPrepositionAgo: "oko 1 godinu",
          withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
      },
      xYears: {
        one: {
          standalone: "1 godina",
          withPrepositionAgo: "1 godine",
          withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
      },
      overXYears: {
        one: {
          standalone: "preko 1 godinu",
          withPrepositionAgo: "preko 1 godinu",
          withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
      },
      almostXYears: {
        one: {
          standalone: "gotovo 1 godinu",
          withPrepositionAgo: "gotovo 1 godinu",
          withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options == null ? void 0 : options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            result = tokenValue.one.withPrepositionIn;
          } else {
            result = tokenValue.one.withPrepositionAgo;
          }
        } else {
          result = tokenValue.one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== "1") {
        result = tokenValue.dual.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "za " + result;
        } else {
          return "prije " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/bs/_lib/formatLong.js
var require_formatLong14 = __commonJS({
  "node_modules/date-fns/locale/bs/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d. MMMM yyyy.",
      long: "d. MMMM yyyy.",
      medium: "d. MMM yy.",
      short: "dd. MM. yy."
    };
    var timeFormats = {
      full: "HH:mm:ss (zzzz)",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'u' {{time}}",
      long: "{{date}} 'u' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/bs/_lib/formatRelative.js
var require_formatRelative15 = __commonJS({
  "node_modules/date-fns/locale/bs/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        switch (date.getDay()) {
          case 0:
            return "'prošle nedjelje u' p";
          case 3:
            return "'prošle srijede u' p";
          case 6:
            return "'prošle subote u' p";
          default:
            return "'prošli' EEEE 'u' p";
        }
      },
      yesterday: "'juče u' p",
      today: "'danas u' p",
      tomorrow: "'sutra u' p",
      nextWeek: (date) => {
        switch (date.getDay()) {
          case 0:
            return "'sljedeće nedjelje u' p";
          case 3:
            return "'sljedeću srijedu u' p";
          case 6:
            return "'sljedeću subotu u' p";
          default:
            return "'sljedeći' EEEE 'u' p";
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/bs/_lib/localize.js
var require_localize14 = __commonJS({
  "node_modules/date-fns/locale/bs/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["pr.n.e.", "AD"],
      abbreviated: ["pr. Hr.", "po. Hr."],
      wide: ["Prije Hrista", "Poslije Hrista"]
    };
    var quarterValues = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    var monthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
      ],
      wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "juni",
        "juli",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
      ]
    };
    var formattingMonthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
      ],
      wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "juni",
        "juli",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
      ]
    };
    var dayValues = {
      narrow: ["N", "P", "U", "S", "Č", "P", "S"],
      short: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
      abbreviated: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
      wide: [
        "nedjelja",
        "ponedjeljak",
        "utorak",
        "srijeda",
        "četvrtak",
        "petak",
        "subota"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "poslije podne",
        evening: "uveče",
        night: "noću"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "poslije podne",
        evening: "uveče",
        night: "noću"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return String(number) + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/bs/_lib/match.js
var require_match14 = __commonJS({
  "node_modules/date-fns/locale/bs/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(pr\.n\.e\.|AD)/i,
      abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
      wide: /^(Prije Hrista|prije nove ere|Poslije Hrista|nova era)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|nova)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?kv\.?/i,
      wide: /^[1234]\. kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
      wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(juni|juna)|(juli|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^avg/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[npusčc]/i,
      short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
      abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
      wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|poslije podne|ujutru)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(poslije\s|po)+podne/i,
        evening: /(uvece|uveče)/i,
        night: /(nocu|noću)/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/bs.js
var require_bs = __commonJS({
  "node_modules/date-fns/locale/bs.js"(exports) {
    "use strict";
    exports.bs = void 0;
    var _index = require_formatDistance15();
    var _index2 = require_formatLong14();
    var _index3 = require_formatRelative15();
    var _index4 = require_localize14();
    var _index5 = require_match14();
    var bs = exports.bs = {
      code: "bs",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/ca/_lib/formatDistance.js
var require_formatDistance16 = __commonJS({
  "node_modules/date-fns/locale/ca/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "menys d'un segon",
        eleven: "menys d'onze segons",
        other: "menys de {{count}} segons"
      },
      xSeconds: {
        one: "1 segon",
        other: "{{count}} segons"
      },
      halfAMinute: "mig minut",
      lessThanXMinutes: {
        one: "menys d'un minut",
        eleven: "menys d'onze minuts",
        other: "menys de {{count}} minuts"
      },
      xMinutes: {
        one: "1 minut",
        other: "{{count}} minuts"
      },
      aboutXHours: {
        one: "aproximadament una hora",
        other: "aproximadament {{count}} hores"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} hores"
      },
      xDays: {
        one: "1 dia",
        other: "{{count}} dies"
      },
      aboutXWeeks: {
        one: "aproximadament una setmana",
        other: "aproximadament {{count}} setmanes"
      },
      xWeeks: {
        one: "1 setmana",
        other: "{{count}} setmanes"
      },
      aboutXMonths: {
        one: "aproximadament un mes",
        other: "aproximadament {{count}} mesos"
      },
      xMonths: {
        one: "1 mes",
        other: "{{count}} mesos"
      },
      aboutXYears: {
        one: "aproximadament un any",
        other: "aproximadament {{count}} anys"
      },
      xYears: {
        one: "1 any",
        other: "{{count}} anys"
      },
      overXYears: {
        one: "més d'un any",
        eleven: "més d'onze anys",
        other: "més de {{count}} anys"
      },
      almostXYears: {
        one: "gairebé un any",
        other: "gairebé {{count}} anys"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 11 && tokenValue.eleven) {
        result = tokenValue.eleven;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "en " + result;
        } else {
          return "fa " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ca/_lib/formatLong.js
var require_formatLong15 = __commonJS({
  "node_modules/date-fns/locale/ca/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d 'de' MMMM y",
      long: "d 'de' MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'a les' {{time}}",
      long: "{{date}} 'a les' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ca/_lib/formatRelative.js
var require_formatRelative16 = __commonJS({
  "node_modules/date-fns/locale/ca/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'el' eeee 'passat a la' LT",
      yesterday: "'ahir a la' p",
      today: "'avui a la' p",
      tomorrow: "'demà a la' p",
      nextWeek: "eeee 'a la' p",
      other: "P"
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'el' eeee 'passat a les' p",
      yesterday: "'ahir a les' p",
      today: "'avui a les' p",
      tomorrow: "'demà a les' p",
      nextWeek: "eeee 'a les' p",
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      if (date.getHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }
      return formatRelativeLocale[token];
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ca/_lib/localize.js
var require_localize15 = __commonJS({
  "node_modules/date-fns/locale/ca/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["aC", "dC"],
      abbreviated: ["a. de C.", "d. de C."],
      wide: ["abans de Crist", "després de Crist"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1r trimestre", "2n trimestre", "3r trimestre", "4t trimestre"]
    };
    var monthValues = {
      narrow: [
        "GN",
        "FB",
        "MÇ",
        "AB",
        "MG",
        "JN",
        "JL",
        "AG",
        "ST",
        "OC",
        "NV",
        "DS"
      ],
      /**
       * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formació d'abreviatures.
       * S'escriu la primera síl·laba i les consonants de la síl·laba següent anteriors a la primera vocal.
       * Els mesos de març, maig i juny no s'abreugen perquè són paraules d'una sola síl·laba.
       */
      abbreviated: [
        "gen.",
        "febr.",
        "març",
        "abr.",
        "maig",
        "juny",
        "jul.",
        "ag.",
        "set.",
        "oct.",
        "nov.",
        "des."
      ],
      wide: [
        "gener",
        "febrer",
        "març",
        "abril",
        "maig",
        "juny",
        "juliol",
        "agost",
        "setembre",
        "octubre",
        "novembre",
        "desembre"
      ]
    };
    var dayValues = {
      narrow: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
      short: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
      abbreviated: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
      wide: [
        "diumenge",
        "dilluns",
        "dimarts",
        "dimecres",
        "dijous",
        "divendres",
        "dissabte"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "matí",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "matí",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
      },
      wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "matí",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del matí",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del matí",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
      },
      wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del matí",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      const rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + "r";
          case 2:
            return number + "n";
          case 3:
            return number + "r";
          case 4:
            return number + "t";
        }
      }
      return number + "è";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ca/_lib/match.js
var require_match15 = __commonJS({
  "node_modules/date-fns/locale/ca/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(è|r|n|r|t)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(aC|dC)/i,
      abbreviated: /^(a. de C.|d. de C.)/i,
      wide: /^(abans de Crist|despr[eé]s de Crist)/i
    };
    var parseEraPatterns = {
      narrow: [/^aC/i, /^dC/i],
      abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],
      wide: [/^(abans de Crist)/i, /^(despr[eé]s de Crist)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](è|r|n|r|t)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(GN|FB|MÇ|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
      abbreviated: /^(gen.|febr.|març|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
      wide: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^GN/i,
        /^FB/i,
        /^MÇ/i,
        /^AB/i,
        /^MG/i,
        /^JN/i,
        /^JL/i,
        /^AG/i,
        /^ST/i,
        /^OC/i,
        /^NV/i,
        /^DS/i
      ],
      abbreviated: [
        /^gen./i,
        /^febr./i,
        /^març/i,
        /^abr./i,
        /^maig/i,
        /^juny/i,
        /^jul./i,
        /^ag./i,
        /^set./i,
        /^oct./i,
        /^nov./i,
        /^des./i
      ],
      wide: [
        /^gener/i,
        /^febrer/i,
        /^març/i,
        /^abril/i,
        /^maig/i,
        /^juny/i,
        /^juliol/i,
        /^agost/i,
        /^setembre/i,
        /^octubre/i,
        /^novembre/i,
        /^desembre/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
      wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i
    };
    var parseDayPatterns = {
      narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
      abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
      wide: [
        /^diumenge/i,
        /^dilluns/i,
        /^dimarts/i,
        /^dimecres/i,
        /^dijous/i,
        /^divendres/i,
        /^disssabte/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(del|de la) (matí|tarda|vespre|nit))/i,
      abbreviated: /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i,
      wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mitjanit/i,
        noon: /^migdia/i,
        morning: /matí/i,
        afternoon: /tarda/i,
        evening: /vespre/i,
        night: /nit/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "wide"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ca.js
var require_ca = __commonJS({
  "node_modules/date-fns/locale/ca.js"(exports) {
    "use strict";
    exports.ca = void 0;
    var _index = require_formatDistance16();
    var _index2 = require_formatLong15();
    var _index3 = require_formatRelative16();
    var _index4 = require_localize15();
    var _index5 = require_match15();
    var ca = exports.ca = {
      code: "ca",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/ckb/_lib/formatDistance.js
var require_formatDistance17 = __commonJS({
  "node_modules/date-fns/locale/ckb/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "کەمتر لە یەک چرکە",
        other: "کەمتر لە {{count}} چرکە"
      },
      xSeconds: {
        one: "1 چرکە",
        other: "{{count}} چرکە"
      },
      halfAMinute: "نیو کاتژمێر",
      lessThanXMinutes: {
        one: "کەمتر لە یەک خولەک",
        other: "کەمتر لە {{count}} خولەک"
      },
      xMinutes: {
        one: "1 خولەک",
        other: "{{count}} خولەک"
      },
      aboutXHours: {
        one: "دەوروبەری 1 کاتژمێر",
        other: "دەوروبەری {{count}} کاتژمێر"
      },
      xHours: {
        one: "1 کاتژمێر",
        other: "{{count}} کاتژمێر"
      },
      xDays: {
        one: "1 ڕۆژ",
        other: "{{count}} ژۆژ"
      },
      aboutXWeeks: {
        one: "دەوروبەری 1 هەفتە",
        other: "دوروبەری {{count}} هەفتە"
      },
      xWeeks: {
        one: "1 هەفتە",
        other: "{{count}} هەفتە"
      },
      aboutXMonths: {
        one: "داوروبەری 1 مانگ",
        other: "دەوروبەری {{count}} مانگ"
      },
      xMonths: {
        one: "1 مانگ",
        other: "{{count}} مانگ"
      },
      aboutXYears: {
        one: "دەوروبەری  1 ساڵ",
        other: "دەوروبەری {{count}} ساڵ"
      },
      xYears: {
        one: "1 ساڵ",
        other: "{{count}} ساڵ"
      },
      overXYears: {
        one: "زیاتر لە ساڵێک",
        other: "زیاتر لە {{count}} ساڵ"
      },
      almostXYears: {
        one: "بەنزیکەیی ساڵێک  ",
        other: "بەنزیکەیی {{count}} ساڵ"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "لە ماوەی " + result + "دا";
        } else {
          return result + "پێش ئێستا";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ckb/_lib/formatLong.js
var require_formatLong16 = __commonJS({
  "node_modules/date-fns/locale/ckb/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'کاتژمێر' {{time}}",
      long: "{{date}} 'کاتژمێر' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ckb/_lib/formatRelative.js
var require_formatRelative17 = __commonJS({
  "node_modules/date-fns/locale/ckb/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'هەفتەی ڕابردوو' eeee 'کاتژمێر' p",
      yesterday: "'دوێنێ کاتژمێر' p",
      today: "'ئەمڕۆ کاتژمێر' p",
      tomorrow: "'بەیانی کاتژمێر' p",
      nextWeek: "eeee 'کاتژمێر' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ckb/_lib/localize.js
var require_localize16 = __commonJS({
  "node_modules/date-fns/locale/ckb/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["پ", "د"],
      abbreviated: ["پ-ز", "د-ز"],
      wide: ["پێش زاین", "دوای زاین"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["چ1م", "چ2م", "چ3م", "چ4م"],
      wide: ["چارەگی یەکەم", "چارەگی دووەم", "چارەگی سێیەم", "چارەگی چوارەم"]
    };
    var monthValues = {
      narrow: [
        "ک-د",
        "ش",
        "ئا",
        "ن",
        "م",
        "ح",
        "ت",
        "ئا",
        "ئە",
        "تش-ی",
        "تش-د",
        "ک-ی"
      ],
      abbreviated: [
        "کان-دوو",
        "شوب",
        "ئاد",
        "نیس",
        "مایس",
        "حوز",
        "تەم",
        "ئاب",
        "ئەل",
        "تش-یەک",
        "تش-دوو",
        "کان-یەک"
      ],
      wide: [
        "کانوونی دووەم",
        "شوبات",
        "ئادار",
        "نیسان",
        "مایس",
        "حوزەیران",
        "تەمموز",
        "ئاب",
        "ئەیلول",
        "تشرینی یەکەم",
        "تشرینی دووەم",
        "کانوونی یەکەم"
      ]
    };
    var dayValues = {
      narrow: ["ی-ش", "د-ش", "س-ش", "چ-ش", "پ-ش", "هە", "ش"],
      short: ["یە-شە", "دوو-شە", "سێ-شە", "چو-شە", "پێ-شە", "هەی", "شە"],
      abbreviated: [
        "یەک-شەم",
        "دوو-شەم",
        "سێ-شەم",
        "چوار-شەم",
        "پێنج-شەم",
        "هەینی",
        "شەمە"
      ],
      wide: [
        "یەک شەمە",
        "دوو شەمە",
        "سێ شەمە",
        "چوار شەمە",
        "پێنج شەمە",
        "هەینی",
        "شەمە"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "پ",
        pm: "د",
        midnight: "ن-ش",
        noon: "ن",
        morning: "بەیانی",
        afternoon: "دوای نیوەڕۆ",
        evening: "ئێوارە",
        night: "شەو"
      },
      abbreviated: {
        am: "پ-ن",
        pm: "د-ن",
        midnight: "نیوە شەو",
        noon: "نیوەڕۆ",
        morning: "بەیانی",
        afternoon: "دوای نیوەڕۆ",
        evening: "ئێوارە",
        night: "شەو"
      },
      wide: {
        am: "پێش نیوەڕۆ",
        pm: "دوای نیوەڕۆ",
        midnight: "نیوە شەو",
        noon: "نیوەڕۆ",
        morning: "بەیانی",
        afternoon: "دوای نیوەڕۆ",
        evening: "ئێوارە",
        night: "شەو"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "پ",
        pm: "د",
        midnight: "ن-ش",
        noon: "ن",
        morning: "لە بەیانیدا",
        afternoon: "لە دوای نیوەڕۆدا",
        evening: "لە ئێوارەدا",
        night: "لە شەودا"
      },
      abbreviated: {
        am: "پ-ن",
        pm: "د-ن",
        midnight: "نیوە شەو",
        noon: "نیوەڕۆ",
        morning: "لە بەیانیدا",
        afternoon: "لە دوای نیوەڕۆدا",
        evening: "لە ئێوارەدا",
        night: "لە شەودا"
      },
      wide: {
        am: "پێش نیوەڕۆ",
        pm: "دوای نیوەڕۆ",
        midnight: "نیوە شەو",
        noon: "نیوەڕۆ",
        morning: "لە بەیانیدا",
        afternoon: "لە دوای نیوەڕۆدا",
        evening: "لە ئێوارەدا",
        night: "لە شەودا"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ckb/_lib/match.js
var require_match16 = __commonJS({
  "node_modules/date-fns/locale/ckb/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(پ|د)/i,
      abbreviated: /^(پ-ز|د.ز)/i,
      wide: /^(پێش زاین| دوای زاین)/i
    };
    var parseEraPatterns = {
      any: [/^د/g, /^پ/g]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^م[1234]چ/i,
      wide: /^(یەکەم|دووەم|سێیەم| چوارەم) (چارەگی)? quarter/i
    };
    var parseQuarterPatterns = {
      wide: [/چارەگی یەکەم/, /چارەگی دووەم/, /چارەگی سيیەم/, /چارەگی چوارەم/],
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(ک-د|ش|ئا|ن|م|ح|ت|ئە|تش-ی|تش-د|ک-ی)/i,
      abbreviated: /^(کان-دوو|شوب|ئاد|نیس|مایس|حوز|تەم|ئاب|ئەل|تش-یەک|تش-دوو|کان-یەک)/i,
      wide: /^(کانوونی دووەم|شوبات|ئادار|نیسان|مایس|حوزەیران|تەمموز|ئاب|ئەیلول|تشرینی یەکەم|تشرینی دووەم|کانوونی یەکەم)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ک-د/i,
        /^ش/i,
        /^ئا/i,
        /^ن/i,
        /^م/i,
        /^ح/i,
        /^ت/i,
        /^ئا/i,
        /^ئە/i,
        /^تش-ی/i,
        /^تش-د/i,
        /^ک-ی/i
      ],
      any: [
        /^کان-دوو/i,
        /^شوب/i,
        /^ئاد/i,
        /^نیس/i,
        /^مایس/i,
        /^حوز/i,
        /^تەم/i,
        /^ئاب/i,
        /^ئەل/i,
        /^تش-یەک/i,
        /^تش-دوو/i,
        /^|کان-یەک/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(ش|ی|د|س|چ|پ|هە)/i,
      short: /^(یە-شە|دوو-شە|سێ-شە|چو-شە|پێ-شە|هە|شە)/i,
      abbreviated: /^(یەک-شەم|دوو-شەم|سێ-شەم|چوار-شەم|پێنخ-شەم|هەینی|شەمە)/i,
      wide: /^(یەک شەمە|دوو شەمە|سێ شەمە|چوار شەمە|پێنج شەمە|هەینی|شەمە)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(پ|د|ن-ش|ن| (بەیانی|دوای نیوەڕۆ|ئێوارە|شەو))/i,
      abbreviated: /^(پ-ن|د-ن|نیوە شەو|نیوەڕۆ|بەیانی|دوای نیوەڕۆ|ئێوارە|شەو)/,
      wide: /^(پێش نیوەڕۆ|دوای نیوەڕۆ|نیوەڕۆ|نیوە شەو|لەبەیانیدا|لەدواینیوەڕۆدا|لە ئێوارەدا|لە شەودا)/,
      any: /^(پ|د|بەیانی|نیوەڕۆ|ئێوارە|شەو)/
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^د/i,
        pm: /^پ/i,
        midnight: /^ن-ش/i,
        noon: /^ن/i,
        morning: /بەیانی/i,
        afternoon: /دواینیوەڕۆ/i,
        evening: /ئێوارە/i,
        night: /شەو/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ckb.js
var require_ckb = __commonJS({
  "node_modules/date-fns/locale/ckb.js"(exports) {
    "use strict";
    exports.ckb = void 0;
    var _index = require_formatDistance17();
    var _index2 = require_formatLong16();
    var _index3 = require_formatRelative17();
    var _index4 = require_localize16();
    var _index5 = require_match16();
    var ckb = exports.ckb = {
      code: "ckb",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/cs/_lib/formatDistance.js
var require_formatDistance18 = __commonJS({
  "node_modules/date-fns/locale/cs/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          regular: "méně než 1 sekunda",
          past: "před méně než 1 sekundou",
          future: "za méně než 1 sekundu"
        },
        few: {
          regular: "méně než {{count}} sekundy",
          past: "před méně než {{count}} sekundami",
          future: "za méně než {{count}} sekundy"
        },
        many: {
          regular: "méně než {{count}} sekund",
          past: "před méně než {{count}} sekundami",
          future: "za méně než {{count}} sekund"
        }
      },
      xSeconds: {
        one: {
          regular: "1 sekunda",
          past: "před 1 sekundou",
          future: "za 1 sekundu"
        },
        few: {
          regular: "{{count}} sekundy",
          past: "před {{count}} sekundami",
          future: "za {{count}} sekundy"
        },
        many: {
          regular: "{{count}} sekund",
          past: "před {{count}} sekundami",
          future: "za {{count}} sekund"
        }
      },
      halfAMinute: {
        type: "other",
        other: {
          regular: "půl minuty",
          past: "před půl minutou",
          future: "za půl minuty"
        }
      },
      lessThanXMinutes: {
        one: {
          regular: "méně než 1 minuta",
          past: "před méně než 1 minutou",
          future: "za méně než 1 minutu"
        },
        few: {
          regular: "méně než {{count}} minuty",
          past: "před méně než {{count}} minutami",
          future: "za méně než {{count}} minuty"
        },
        many: {
          regular: "méně než {{count}} minut",
          past: "před méně než {{count}} minutami",
          future: "za méně než {{count}} minut"
        }
      },
      xMinutes: {
        one: {
          regular: "1 minuta",
          past: "před 1 minutou",
          future: "za 1 minutu"
        },
        few: {
          regular: "{{count}} minuty",
          past: "před {{count}} minutami",
          future: "za {{count}} minuty"
        },
        many: {
          regular: "{{count}} minut",
          past: "před {{count}} minutami",
          future: "za {{count}} minut"
        }
      },
      aboutXHours: {
        one: {
          regular: "přibližně 1 hodina",
          past: "přibližně před 1 hodinou",
          future: "přibližně za 1 hodinu"
        },
        few: {
          regular: "přibližně {{count}} hodiny",
          past: "přibližně před {{count}} hodinami",
          future: "přibližně za {{count}} hodiny"
        },
        many: {
          regular: "přibližně {{count}} hodin",
          past: "přibližně před {{count}} hodinami",
          future: "přibližně za {{count}} hodin"
        }
      },
      xHours: {
        one: {
          regular: "1 hodina",
          past: "před 1 hodinou",
          future: "za 1 hodinu"
        },
        few: {
          regular: "{{count}} hodiny",
          past: "před {{count}} hodinami",
          future: "za {{count}} hodiny"
        },
        many: {
          regular: "{{count}} hodin",
          past: "před {{count}} hodinami",
          future: "za {{count}} hodin"
        }
      },
      xDays: {
        one: {
          regular: "1 den",
          past: "před 1 dnem",
          future: "za 1 den"
        },
        few: {
          regular: "{{count}} dny",
          past: "před {{count}} dny",
          future: "za {{count}} dny"
        },
        many: {
          regular: "{{count}} dní",
          past: "před {{count}} dny",
          future: "za {{count}} dní"
        }
      },
      aboutXWeeks: {
        one: {
          regular: "přibližně 1 týden",
          past: "přibližně před 1 týdnem",
          future: "přibližně za 1 týden"
        },
        few: {
          regular: "přibližně {{count}} týdny",
          past: "přibližně před {{count}} týdny",
          future: "přibližně za {{count}} týdny"
        },
        many: {
          regular: "přibližně {{count}} týdnů",
          past: "přibližně před {{count}} týdny",
          future: "přibližně za {{count}} týdnů"
        }
      },
      xWeeks: {
        one: {
          regular: "1 týden",
          past: "před 1 týdnem",
          future: "za 1 týden"
        },
        few: {
          regular: "{{count}} týdny",
          past: "před {{count}} týdny",
          future: "za {{count}} týdny"
        },
        many: {
          regular: "{{count}} týdnů",
          past: "před {{count}} týdny",
          future: "za {{count}} týdnů"
        }
      },
      aboutXMonths: {
        one: {
          regular: "přibližně 1 měsíc",
          past: "přibližně před 1 měsícem",
          future: "přibližně za 1 měsíc"
        },
        few: {
          regular: "přibližně {{count}} měsíce",
          past: "přibližně před {{count}} měsíci",
          future: "přibližně za {{count}} měsíce"
        },
        many: {
          regular: "přibližně {{count}} měsíců",
          past: "přibližně před {{count}} měsíci",
          future: "přibližně za {{count}} měsíců"
        }
      },
      xMonths: {
        one: {
          regular: "1 měsíc",
          past: "před 1 měsícem",
          future: "za 1 měsíc"
        },
        few: {
          regular: "{{count}} měsíce",
          past: "před {{count}} měsíci",
          future: "za {{count}} měsíce"
        },
        many: {
          regular: "{{count}} měsíců",
          past: "před {{count}} měsíci",
          future: "za {{count}} měsíců"
        }
      },
      aboutXYears: {
        one: {
          regular: "přibližně 1 rok",
          past: "přibližně před 1 rokem",
          future: "přibližně za 1 rok"
        },
        few: {
          regular: "přibližně {{count}} roky",
          past: "přibližně před {{count}} roky",
          future: "přibližně za {{count}} roky"
        },
        many: {
          regular: "přibližně {{count}} roků",
          past: "přibližně před {{count}} roky",
          future: "přibližně za {{count}} roků"
        }
      },
      xYears: {
        one: {
          regular: "1 rok",
          past: "před 1 rokem",
          future: "za 1 rok"
        },
        few: {
          regular: "{{count}} roky",
          past: "před {{count}} roky",
          future: "za {{count}} roky"
        },
        many: {
          regular: "{{count}} roků",
          past: "před {{count}} roky",
          future: "za {{count}} roků"
        }
      },
      overXYears: {
        one: {
          regular: "více než 1 rok",
          past: "před více než 1 rokem",
          future: "za více než 1 rok"
        },
        few: {
          regular: "více než {{count}} roky",
          past: "před více než {{count}} roky",
          future: "za více než {{count}} roky"
        },
        many: {
          regular: "více než {{count}} roků",
          past: "před více než {{count}} roky",
          future: "za více než {{count}} roků"
        }
      },
      almostXYears: {
        one: {
          regular: "skoro 1 rok",
          past: "skoro před 1 rokem",
          future: "skoro za 1 rok"
        },
        few: {
          regular: "skoro {{count}} roky",
          past: "skoro před {{count}} roky",
          future: "skoro za {{count}} roky"
        },
        many: {
          regular: "skoro {{count}} roků",
          past: "skoro před {{count}} roky",
          future: "skoro za {{count}} roků"
        }
      }
    };
    var formatDistance = (token, count, options) => {
      let pluralResult;
      const tokenValue = formatDistanceLocale[token];
      if (tokenValue.type === "other") {
        pluralResult = tokenValue.other;
      } else if (count === 1) {
        pluralResult = tokenValue.one;
      } else if (count > 1 && count < 5) {
        pluralResult = tokenValue.few;
      } else {
        pluralResult = tokenValue.many;
      }
      const suffixExist = (options == null ? void 0 : options.addSuffix) === true;
      const comparison = options == null ? void 0 : options.comparison;
      let timeResult;
      if (suffixExist && comparison === -1) {
        timeResult = pluralResult.past;
      } else if (suffixExist && comparison === 1) {
        timeResult = pluralResult.future;
      } else {
        timeResult = pluralResult.regular;
      }
      return timeResult.replace("{{count}}", String(count));
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/cs/_lib/formatLong.js
var require_formatLong17 = __commonJS({
  "node_modules/date-fns/locale/cs/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d. MMMM yyyy",
      long: "d. MMMM yyyy",
      medium: "d. M. yyyy",
      short: "dd.MM.yyyy"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'v' {{time}}",
      long: "{{date}} 'v' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/cs/_lib/formatRelative.js
var require_formatRelative18 = __commonJS({
  "node_modules/date-fns/locale/cs/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var accusativeWeekdays = [
      "neděli",
      "pondělí",
      "úterý",
      "středu",
      "čtvrtek",
      "pátek",
      "sobotu"
    ];
    var formatRelativeLocale = {
      lastWeek: "'poslední' eeee 've' p",
      yesterday: "'včera v' p",
      today: "'dnes v' p",
      tomorrow: "'zítra v' p",
      nextWeek: (date) => {
        const day = date.getDay();
        return "'v " + accusativeWeekdays[day] + " o' p";
      },
      other: "P"
    };
    var formatRelative = (token, date) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/cs/_lib/localize.js
var require_localize17 = __commonJS({
  "node_modules/date-fns/locale/cs/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["př. n. l.", "n. l."],
      abbreviated: ["př. n. l.", "n. l."],
      wide: ["před naším letopočtem", "našeho letopočtu"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. čtvrtletí", "2. čtvrtletí", "3. čtvrtletí", "4. čtvrtletí"],
      wide: ["1. čtvrtletí", "2. čtvrtletí", "3. čtvrtletí", "4. čtvrtletí"]
    };
    var monthValues = {
      narrow: ["L", "Ú", "B", "D", "K", "Č", "Č", "S", "Z", "Ř", "L", "P"],
      abbreviated: [
        "led",
        "úno",
        "bře",
        "dub",
        "kvě",
        "čvn",
        "čvc",
        "srp",
        "zář",
        "říj",
        "lis",
        "pro"
      ],
      wide: [
        "leden",
        "únor",
        "březen",
        "duben",
        "květen",
        "červen",
        "červenec",
        "srpen",
        "září",
        "říjen",
        "listopad",
        "prosinec"
      ]
    };
    var formattingMonthValues = {
      narrow: ["L", "Ú", "B", "D", "K", "Č", "Č", "S", "Z", "Ř", "L", "P"],
      abbreviated: [
        "led",
        "úno",
        "bře",
        "dub",
        "kvě",
        "čvn",
        "čvc",
        "srp",
        "zář",
        "říj",
        "lis",
        "pro"
      ],
      wide: [
        "ledna",
        "února",
        "března",
        "dubna",
        "května",
        "června",
        "července",
        "srpna",
        "září",
        "října",
        "listopadu",
        "prosince"
      ]
    };
    var dayValues = {
      narrow: ["ne", "po", "út", "st", "čt", "pá", "so"],
      short: ["ne", "po", "út", "st", "čt", "pá", "so"],
      abbreviated: ["ned", "pon", "úte", "stř", "čtv", "pát", "sob"],
      wide: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "dop.",
        pm: "odp.",
        midnight: "půlnoc",
        noon: "poledne",
        morning: "ráno",
        afternoon: "odpoledne",
        evening: "večer",
        night: "noc"
      },
      abbreviated: {
        am: "dop.",
        pm: "odp.",
        midnight: "půlnoc",
        noon: "poledne",
        morning: "ráno",
        afternoon: "odpoledne",
        evening: "večer",
        night: "noc"
      },
      wide: {
        am: "dopoledne",
        pm: "odpoledne",
        midnight: "půlnoc",
        noon: "poledne",
        morning: "ráno",
        afternoon: "odpoledne",
        evening: "večer",
        night: "noc"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "dop.",
        pm: "odp.",
        midnight: "půlnoc",
        noon: "poledne",
        morning: "ráno",
        afternoon: "odpoledne",
        evening: "večer",
        night: "noc"
      },
      abbreviated: {
        am: "dop.",
        pm: "odp.",
        midnight: "půlnoc",
        noon: "poledne",
        morning: "ráno",
        afternoon: "odpoledne",
        evening: "večer",
        night: "noc"
      },
      wide: {
        am: "dopoledne",
        pm: "odpoledne",
        midnight: "půlnoc",
        noon: "poledne",
        morning: "ráno",
        afternoon: "odpoledne",
        evening: "večer",
        night: "noc"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/cs/_lib/match.js
var require_match17 = __commonJS({
  "node_modules/date-fns/locale/cs/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
      abbreviated: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
      wide: /^(p[řr](\.|ed) Kristem|p[řr](\.|ed) na[šs][íi]m letopo[čc]tem|po Kristu|na[šs]eho letopo[čc]tu)/i
    };
    var parseEraPatterns = {
      any: [/^p[řr]/i, /^(po|n)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\. [čc]tvrtlet[íi]/i,
      wide: /^[1234]\. [čc]tvrtlet[íi]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[lúubdkčcszřrlp]/i,
      abbreviated: /^(led|[úu]no|b[řr]e|dub|kv[ěe]|[čc]vn|[čc]vc|srp|z[áa][řr]|[řr][íi]j|lis|pro)/i,
      wide: /^(leden|ledna|[úu]nora?|b[řr]ezen|b[řr]ezna|duben|dubna|kv[ěe]ten|kv[ěe]tna|[čc]erven(ec|ce)?|[čc]ervna|srpen|srpna|z[áa][řr][íi]|[řr][íi]jen|[řr][íi]jna|listopad(a|u)?|prosinec|prosince)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^l/i,
        /^[úu]/i,
        /^b/i,
        /^d/i,
        /^k/i,
        /^[čc]/i,
        /^[čc]/i,
        /^s/i,
        /^z/i,
        /^[řr]/i,
        /^l/i,
        /^p/i
      ],
      any: [
        /^led/i,
        /^[úu]n/i,
        /^b[řr]e/i,
        /^dub/i,
        /^kv[ěe]/i,
        /^[čc]vn|[čc]erven(?!\w)|[čc]ervna/i,
        /^[čc]vc|[čc]erven(ec|ce)/i,
        /^srp/i,
        /^z[áa][řr]/i,
        /^[řr][íi]j/i,
        /^lis/i,
        /^pro/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[npuúsčps]/i,
      short: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
      abbreviated: /^(ned|pon|[úu]te|st[rř]|[čc]tv|p[áa]t|sob)/i,
      wide: /^(ned[ěe]le|pond[ěe]l[íi]|[úu]ter[ýy]|st[řr]eda|[čc]tvrtek|p[áa]tek|sobota)/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^[úu]/i, /^s/i, /^[čc]/i, /^p/i, /^s/i],
      any: [/^ne/i, /^po/i, /^[úu]t/i, /^st/i, /^[čc]t/i, /^p[áa]/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      any: /^dopoledne|dop\.?|odpoledne|odp\.?|p[ůu]lnoc|poledne|r[áa]no|odpoledne|ve[čc]er|(v )?noci?/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^dop/i,
        pm: /^odp/i,
        midnight: /^p[ůu]lnoc/i,
        noon: /^poledne/i,
        morning: /r[áa]no/i,
        afternoon: /odpoledne/i,
        evening: /ve[čc]er/i,
        night: /noc/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/cs.js
var require_cs = __commonJS({
  "node_modules/date-fns/locale/cs.js"(exports) {
    "use strict";
    exports.cs = void 0;
    var _index = require_formatDistance18();
    var _index2 = require_formatLong17();
    var _index3 = require_formatRelative18();
    var _index4 = require_localize17();
    var _index5 = require_match17();
    var cs = exports.cs = {
      code: "cs",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/cy/_lib/formatDistance.js
var require_formatDistance19 = __commonJS({
  "node_modules/date-fns/locale/cy/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "llai na eiliad",
        other: "llai na {{count}} eiliad"
      },
      xSeconds: {
        one: "1 eiliad",
        other: "{{count}} eiliad"
      },
      halfAMinute: "hanner munud",
      lessThanXMinutes: {
        one: "llai na munud",
        two: "llai na 2 funud",
        other: "llai na {{count}} munud"
      },
      xMinutes: {
        one: "1 munud",
        two: "2 funud",
        other: "{{count}} munud"
      },
      aboutXHours: {
        one: "tua 1 awr",
        other: "tua {{count}} awr"
      },
      xHours: {
        one: "1 awr",
        other: "{{count}} awr"
      },
      xDays: {
        one: "1 diwrnod",
        two: "2 ddiwrnod",
        other: "{{count}} diwrnod"
      },
      aboutXWeeks: {
        one: "tua 1 wythnos",
        two: "tua pythefnos",
        other: "tua {{count}} wythnos"
      },
      xWeeks: {
        one: "1 wythnos",
        two: "pythefnos",
        other: "{{count}} wythnos"
      },
      aboutXMonths: {
        one: "tua 1 mis",
        two: "tua 2 fis",
        other: "tua {{count}} mis"
      },
      xMonths: {
        one: "1 mis",
        two: "2 fis",
        other: "{{count}} mis"
      },
      aboutXYears: {
        one: "tua 1 flwyddyn",
        two: "tua 2 flynedd",
        other: "tua {{count}} mlynedd"
      },
      xYears: {
        one: "1 flwyddyn",
        two: "2 flynedd",
        other: "{{count}} mlynedd"
      },
      overXYears: {
        one: "dros 1 flwyddyn",
        two: "dros 2 flynedd",
        other: "dros {{count}} mlynedd"
      },
      almostXYears: {
        one: "bron 1 flwyddyn",
        two: "bron 2 flynedd",
        other: "bron {{count}} mlynedd"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2 && !!tokenValue.two) {
        result = tokenValue.two;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "mewn " + result;
        } else {
          return result + " yn ôl";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/cy/_lib/formatLong.js
var require_formatLong18 = __commonJS({
  "node_modules/date-fns/locale/cy/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'am' {{time}}",
      long: "{{date}} 'am' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/cy/_lib/formatRelative.js
var require_formatRelative19 = __commonJS({
  "node_modules/date-fns/locale/cy/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'diwethaf am' p",
      yesterday: "'ddoe am' p",
      today: "'heddiw am' p",
      tomorrow: "'yfory am' p",
      nextWeek: "eeee 'am' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/cy/_lib/localize.js
var require_localize18 = __commonJS({
  "node_modules/date-fns/locale/cy/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["C", "O"],
      abbreviated: ["CC", "OC"],
      wide: ["Cyn Crist", "Ar ôl Crist"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Ch1", "Ch2", "Ch3", "Ch4"],
      wide: ["Chwarter 1af", "2ail chwarter", "3ydd chwarter", "4ydd chwarter"]
    };
    var monthValues = {
      narrow: ["I", "Ch", "Ma", "E", "Mi", "Me", "G", "A", "Md", "H", "T", "Rh"],
      abbreviated: [
        "Ion",
        "Chwe",
        "Maw",
        "Ebr",
        "Mai",
        "Meh",
        "Gor",
        "Aws",
        "Med",
        "Hyd",
        "Tach",
        "Rhag"
      ],
      wide: [
        "Ionawr",
        "Chwefror",
        "Mawrth",
        "Ebrill",
        "Mai",
        "Mehefin",
        "Gorffennaf",
        "Awst",
        "Medi",
        "Hydref",
        "Tachwedd",
        "Rhagfyr"
      ]
    };
    var dayValues = {
      narrow: ["S", "Ll", "M", "M", "I", "G", "S"],
      short: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"],
      abbreviated: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
      wide: [
        "dydd Sul",
        "dydd Llun",
        "dydd Mawrth",
        "dydd Mercher",
        "dydd Iau",
        "dydd Gwener",
        "dydd Sadwrn"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "b",
        pm: "h",
        midnight: "hn",
        noon: "hd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
      },
      abbreviated: {
        am: "yb",
        pm: "yh",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
      },
      wide: {
        am: "y.b.",
        pm: "y.h.",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "b",
        pm: "h",
        midnight: "hn",
        noon: "hd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
      },
      abbreviated: {
        am: "yb",
        pm: "yh",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
      },
      wide: {
        am: "y.b.",
        pm: "y.h.",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      if (number < 20) {
        switch (number) {
          case 0:
            return number + "fed";
          case 1:
            return number + "af";
          case 2:
            return number + "ail";
          case 3:
          case 4:
            return number + "ydd";
          case 5:
          case 6:
            return number + "ed";
          case 7:
          case 8:
          case 9:
          case 10:
          case 12:
          case 15:
          case 18:
            return number + "fed";
          case 11:
          case 13:
          case 14:
          case 16:
          case 17:
          case 19:
            return number + "eg";
        }
      } else if (number >= 50 && number <= 60 || number === 80 || number >= 100) {
        return number + "fed";
      }
      return number + "ain";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/cy/_lib/match.js
var require_match18 = __commonJS({
  "node_modules/date-fns/locale/cy/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(c|o)/i,
      abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
      wide: /^(cyn christ|ar ôl crist|ar ol crist)/i
    };
    var parseEraPatterns = {
      wide: [/^c/i, /^(ar ôl crist|ar ol crist)/i],
      any: [/^c/i, /^o/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ch[1234]/i,
      wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
      abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
      wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^i/i,
        /^ch/i,
        /^m/i,
        /^e/i,
        /^m/i,
        /^m/i,
        /^g/i,
        /^a/i,
        /^m/i,
        /^h/i,
        /^t/i,
        /^rh/i
      ],
      any: [
        /^io/i,
        /^ch/i,
        /^maw/i,
        /^e/i,
        /^mai/i,
        /^meh/i,
        /^g/i,
        /^a/i,
        /^med/i,
        /^h/i,
        /^t/i,
        /^rh/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(s|ll|m|i|g)/i,
      short: /^(su|ll|ma|me|ia|gw|sa)/i,
      abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
      wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
      wide: [
        /^dydd su/i,
        /^dydd ll/i,
        /^dydd ma/i,
        /^dydd me/i,
        /^dydd i/i,
        /^dydd g/i,
        /^dydd sa/i
      ],
      any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
      any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^b|(y\.?\s?b\.?)/i,
        pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
        midnight: /^hn|hanner nos/i,
        noon: /^hd|hanner dydd/i,
        morning: /bore/i,
        afternoon: /prynhawn/i,
        evening: /^gyda'r nos$/i,
        night: /blah/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/cy.js
var require_cy = __commonJS({
  "node_modules/date-fns/locale/cy.js"(exports) {
    "use strict";
    exports.cy = void 0;
    var _index = require_formatDistance19();
    var _index2 = require_formatLong18();
    var _index3 = require_formatRelative19();
    var _index4 = require_localize18();
    var _index5 = require_match18();
    var cy = exports.cy = {
      code: "cy",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/da/_lib/formatDistance.js
var require_formatDistance20 = __commonJS({
  "node_modules/date-fns/locale/da/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "mindre end ét sekund",
        other: "mindre end {{count}} sekunder"
      },
      xSeconds: {
        one: "1 sekund",
        other: "{{count}} sekunder"
      },
      halfAMinute: "ét halvt minut",
      lessThanXMinutes: {
        one: "mindre end ét minut",
        other: "mindre end {{count}} minutter"
      },
      xMinutes: {
        one: "1 minut",
        other: "{{count}} minutter"
      },
      aboutXHours: {
        one: "cirka 1 time",
        other: "cirka {{count}} timer"
      },
      xHours: {
        one: "1 time",
        other: "{{count}} timer"
      },
      xDays: {
        one: "1 dag",
        other: "{{count}} dage"
      },
      aboutXWeeks: {
        one: "cirka 1 uge",
        other: "cirka {{count}} uger"
      },
      xWeeks: {
        one: "1 uge",
        other: "{{count}} uger"
      },
      aboutXMonths: {
        one: "cirka 1 måned",
        other: "cirka {{count}} måneder"
      },
      xMonths: {
        one: "1 måned",
        other: "{{count}} måneder"
      },
      aboutXYears: {
        one: "cirka 1 år",
        other: "cirka {{count}} år"
      },
      xYears: {
        one: "1 år",
        other: "{{count}} år"
      },
      overXYears: {
        one: "over 1 år",
        other: "over {{count}} år"
      },
      almostXYears: {
        one: "næsten 1 år",
        other: "næsten {{count}} år"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " siden";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/da/_lib/formatLong.js
var require_formatLong19 = __commonJS({
  "node_modules/date-fns/locale/da/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE 'den' d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl'. {{time}}",
      long: "{{date}} 'kl'. {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/da/_lib/formatRelative.js
var require_formatRelative20 = __commonJS({
  "node_modules/date-fns/locale/da/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'sidste' eeee 'kl.' p",
      yesterday: "'i går kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgen kl.' p",
      nextWeek: "'på' eeee 'kl.' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/da/_lib/localize.js
var require_localize19 = __commonJS({
  "node_modules/date-fns/locale/da/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["fvt", "vt"],
      abbreviated: ["f.v.t.", "v.t."],
      wide: ["før vesterlandsk tidsregning", "vesterlandsk tidsregning"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. kvt.", "2. kvt.", "3. kvt.", "4. kvt."],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jan.",
        "feb.",
        "mar.",
        "apr.",
        "maj",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "januar",
        "februar",
        "marts",
        "april",
        "maj",
        "juni",
        "juli",
        "august",
        "september",
        "oktober",
        "november",
        "december"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
      abbreviated: ["søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."],
      wide: [
        "søndag",
        "mandag",
        "tirsdag",
        "onsdag",
        "torsdag",
        "fredag",
        "lørdag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/da/_lib/match.js
var require_match19 = __commonJS({
  "node_modules/date-fns/locale/da/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(fKr|fvt|eKr|vt)/i,
      abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
      wide: /^(f.Kr.|før vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^(v|e)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]. kvt\./i,
      wide: /^[1234]\.? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(søn.|man.|tir.|ons.|tor.|fre.|lør.)/i,
      abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
      wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
      any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /midnat/i,
        noon: /middag/i,
        morning: /morgen/i,
        afternoon: /eftermiddag/i,
        evening: /aften/i,
        night: /nat/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/da.js
var require_da = __commonJS({
  "node_modules/date-fns/locale/da.js"(exports) {
    "use strict";
    exports.da = void 0;
    var _index = require_formatDistance20();
    var _index2 = require_formatLong19();
    var _index3 = require_formatRelative20();
    var _index4 = require_localize19();
    var _index5 = require_match19();
    var da = exports.da = {
      code: "da",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/de/_lib/formatDistance.js
var require_formatDistance21 = __commonJS({
  "node_modules/date-fns/locale/de/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: "weniger als 1 Sekunde",
          other: "weniger als {{count}} Sekunden"
        },
        withPreposition: {
          one: "weniger als 1 Sekunde",
          other: "weniger als {{count}} Sekunden"
        }
      },
      xSeconds: {
        standalone: {
          one: "1 Sekunde",
          other: "{{count}} Sekunden"
        },
        withPreposition: {
          one: "1 Sekunde",
          other: "{{count}} Sekunden"
        }
      },
      halfAMinute: {
        standalone: "eine halbe Minute",
        withPreposition: "einer halben Minute"
      },
      lessThanXMinutes: {
        standalone: {
          one: "weniger als 1 Minute",
          other: "weniger als {{count}} Minuten"
        },
        withPreposition: {
          one: "weniger als 1 Minute",
          other: "weniger als {{count}} Minuten"
        }
      },
      xMinutes: {
        standalone: {
          one: "1 Minute",
          other: "{{count}} Minuten"
        },
        withPreposition: {
          one: "1 Minute",
          other: "{{count}} Minuten"
        }
      },
      aboutXHours: {
        standalone: {
          one: "etwa 1 Stunde",
          other: "etwa {{count}} Stunden"
        },
        withPreposition: {
          one: "etwa 1 Stunde",
          other: "etwa {{count}} Stunden"
        }
      },
      xHours: {
        standalone: {
          one: "1 Stunde",
          other: "{{count}} Stunden"
        },
        withPreposition: {
          one: "1 Stunde",
          other: "{{count}} Stunden"
        }
      },
      xDays: {
        standalone: {
          one: "1 Tag",
          other: "{{count}} Tage"
        },
        withPreposition: {
          one: "1 Tag",
          other: "{{count}} Tagen"
        }
      },
      aboutXWeeks: {
        standalone: {
          one: "etwa 1 Woche",
          other: "etwa {{count}} Wochen"
        },
        withPreposition: {
          one: "etwa 1 Woche",
          other: "etwa {{count}} Wochen"
        }
      },
      xWeeks: {
        standalone: {
          one: "1 Woche",
          other: "{{count}} Wochen"
        },
        withPreposition: {
          one: "1 Woche",
          other: "{{count}} Wochen"
        }
      },
      aboutXMonths: {
        standalone: {
          one: "etwa 1 Monat",
          other: "etwa {{count}} Monate"
        },
        withPreposition: {
          one: "etwa 1 Monat",
          other: "etwa {{count}} Monaten"
        }
      },
      xMonths: {
        standalone: {
          one: "1 Monat",
          other: "{{count}} Monate"
        },
        withPreposition: {
          one: "1 Monat",
          other: "{{count}} Monaten"
        }
      },
      aboutXYears: {
        standalone: {
          one: "etwa 1 Jahr",
          other: "etwa {{count}} Jahre"
        },
        withPreposition: {
          one: "etwa 1 Jahr",
          other: "etwa {{count}} Jahren"
        }
      },
      xYears: {
        standalone: {
          one: "1 Jahr",
          other: "{{count}} Jahre"
        },
        withPreposition: {
          one: "1 Jahr",
          other: "{{count}} Jahren"
        }
      },
      overXYears: {
        standalone: {
          one: "mehr als 1 Jahr",
          other: "mehr als {{count}} Jahre"
        },
        withPreposition: {
          one: "mehr als 1 Jahr",
          other: "mehr als {{count}} Jahren"
        }
      },
      almostXYears: {
        standalone: {
          one: "fast 1 Jahr",
          other: "fast {{count}} Jahre"
        },
        withPreposition: {
          one: "fast 1 Jahr",
          other: "fast {{count}} Jahren"
        }
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = (options == null ? void 0 : options.addSuffix) ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "in " + result;
        } else {
          return "vor " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/de/_lib/formatLong.js
var require_formatLong20 = __commonJS({
  "node_modules/date-fns/locale/de/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM y",
      // Montag, 7. Januar 2018
      long: "do MMMM y",
      // 7. Januar 2018
      medium: "do MMM y",
      // 7. Jan. 2018
      short: "dd.MM.y"
      // 07.01.2018
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'um' {{time}}",
      long: "{{date}} 'um' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/de/_lib/formatRelative.js
var require_formatRelative21 = __commonJS({
  "node_modules/date-fns/locale/de/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'letzten' eeee 'um' p",
      yesterday: "'gestern um' p",
      today: "'heute um' p",
      tomorrow: "'morgen um' p",
      nextWeek: "eeee 'um' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/de/_lib/localize.js
var require_localize20 = __commonJS({
  "node_modules/date-fns/locale/de/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["v.Chr.", "n.Chr."],
      abbreviated: ["v.Chr.", "n.Chr."],
      wide: ["vor Christus", "nach Christus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Jan",
        "Feb",
        "Mär",
        "Apr",
        "Mai",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Dez"
      ],
      wide: [
        "Januar",
        "Februar",
        "März",
        "April",
        "Mai",
        "Juni",
        "Juli",
        "August",
        "September",
        "Oktober",
        "November",
        "Dezember"
      ]
    };
    var formattingMonthValues = {
      narrow: monthValues.narrow,
      abbreviated: [
        "Jan.",
        "Feb.",
        "März",
        "Apr.",
        "Mai",
        "Juni",
        "Juli",
        "Aug.",
        "Sep.",
        "Okt.",
        "Nov.",
        "Dez."
      ],
      wide: monthValues.wide
    };
    var dayValues = {
      narrow: ["S", "M", "D", "M", "D", "F", "S"],
      short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
      abbreviated: ["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."],
      wide: [
        "Sonntag",
        "Montag",
        "Dienstag",
        "Mittwoch",
        "Donnerstag",
        "Freitag",
        "Samstag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachm.",
        evening: "Abend",
        night: "Nacht"
      },
      abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
      },
      wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachm.",
        evening: "abends",
        night: "nachts"
      },
      abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
      },
      wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        formattingValues: formattingMonthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/de/_lib/match.js
var require_match20 = __commonJS({
  "node_modules/date-fns/locale/de/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
    };
    var parseEraPatterns = {
      any: [/^v/i, /^n/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? Quartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(j[aä]n|feb|mär[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
      wide: /^(januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^j[aä]/i,
        /^f/i,
        /^mär/i,
        /^ap/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smdmf]/i,
      short: /^(so|mo|di|mi|do|fr|sa)/i,
      abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
      wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
    };
    var parseDayPatterns = {
      any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
      abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
      wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^v/i,
        pm: /^n/i,
        midnight: /^Mitte/i,
        noon: /^Mitta/i,
        morning: /morgens/i,
        afternoon: /nachmittags/i,
        // will never be matched. Afternoon is matched by `pm`
        evening: /abends/i,
        night: /nachts/i
        // will never be matched. Night is matched by `pm`
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/de.js
var require_de = __commonJS({
  "node_modules/date-fns/locale/de.js"(exports) {
    "use strict";
    exports.de = void 0;
    var _index = require_formatDistance21();
    var _index2 = require_formatLong20();
    var _index3 = require_formatRelative21();
    var _index4 = require_localize20();
    var _index5 = require_match20();
    var de = exports.de = {
      code: "de",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/de-AT/_lib/localize.js
var require_localize21 = __commonJS({
  "node_modules/date-fns/locale/de-AT/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["v.Chr.", "n.Chr."],
      abbreviated: ["v.Chr.", "n.Chr."],
      wide: ["vor Christus", "nach Christus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Jän",
        "Feb",
        "Mär",
        "Apr",
        "Mai",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Dez"
      ],
      wide: [
        "Jänner",
        "Februar",
        "März",
        "April",
        "Mai",
        "Juni",
        "Juli",
        "August",
        "September",
        "Oktober",
        "November",
        "Dezember"
      ]
    };
    var formattingMonthValues = {
      narrow: monthValues.narrow,
      abbreviated: [
        "Jän.",
        "Feb.",
        "März",
        "Apr.",
        "Mai",
        "Juni",
        "Juli",
        "Aug.",
        "Sep.",
        "Okt.",
        "Nov.",
        "Dez."
      ],
      wide: monthValues.wide
    };
    var dayValues = {
      narrow: ["S", "M", "D", "M", "D", "F", "S"],
      short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
      abbreviated: ["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."],
      wide: [
        "Sonntag",
        "Montag",
        "Dienstag",
        "Mittwoch",
        "Donnerstag",
        "Freitag",
        "Samstag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachm.",
        evening: "Abend",
        night: "Nacht"
      },
      abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
      },
      wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachm.",
        evening: "abends",
        night: "nachts"
      },
      abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
      },
      wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        formattingValues: formattingMonthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/de-AT.js
var require_de_AT = __commonJS({
  "node_modules/date-fns/locale/de-AT.js"(exports) {
    "use strict";
    exports.deAT = void 0;
    var _index = require_formatDistance21();
    var _index2 = require_formatLong20();
    var _index3 = require_formatRelative21();
    var _index4 = require_match20();
    var _index5 = require_localize21();
    var deAT = exports.deAT = {
      code: "de-AT",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index5.localize,
      match: _index4.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/el/_lib/formatDistance.js
var require_formatDistance22 = __commonJS({
  "node_modules/date-fns/locale/el/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "λιγότερο από ένα δευτερόλεπτο",
        other: "λιγότερο από {{count}} δευτερόλεπτα"
      },
      xSeconds: {
        one: "1 δευτερόλεπτο",
        other: "{{count}} δευτερόλεπτα"
      },
      halfAMinute: "μισό λεπτό",
      lessThanXMinutes: {
        one: "λιγότερο από ένα λεπτό",
        other: "λιγότερο από {{count}} λεπτά"
      },
      xMinutes: {
        one: "1 λεπτό",
        other: "{{count}} λεπτά"
      },
      aboutXHours: {
        one: "περίπου 1 ώρα",
        other: "περίπου {{count}} ώρες"
      },
      xHours: {
        one: "1 ώρα",
        other: "{{count}} ώρες"
      },
      xDays: {
        one: "1 ημέρα",
        other: "{{count}} ημέρες"
      },
      aboutXWeeks: {
        one: "περίπου 1 εβδομάδα",
        other: "περίπου {{count}} εβδομάδες"
      },
      xWeeks: {
        one: "1 εβδομάδα",
        other: "{{count}} εβδομάδες"
      },
      aboutXMonths: {
        one: "περίπου 1 μήνας",
        other: "περίπου {{count}} μήνες"
      },
      xMonths: {
        one: "1 μήνας",
        other: "{{count}} μήνες"
      },
      aboutXYears: {
        one: "περίπου 1 χρόνο",
        other: "περίπου {{count}} χρόνια"
      },
      xYears: {
        one: "1 χρόνο",
        other: "{{count}} χρόνια"
      },
      overXYears: {
        one: "πάνω από 1 χρόνο",
        other: "πάνω από {{count}} χρόνια"
      },
      almostXYears: {
        one: "περίπου 1 χρόνο",
        other: "περίπου {{count}} χρόνια"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "σε " + result;
        } else {
          return result + " πριν";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/el/_lib/formatLong.js
var require_formatLong21 = __commonJS({
  "node_modules/date-fns/locale/el/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "d/M/yy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} - {{time}}",
      long: "{{date}} - {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/el/_lib/formatRelative.js
var require_formatRelative22 = __commonJS({
  "node_modules/date-fns/locale/el/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        switch (date.getDay()) {
          case 6:
            return "'το προηγούμενο' eeee 'στις' p";
          default:
            return "'την προηγούμενη' eeee 'στις' p";
        }
      },
      yesterday: "'χθες στις' p",
      today: "'σήμερα στις' p",
      tomorrow: "'αύριο στις' p",
      nextWeek: "eeee 'στις' p",
      other: "P"
    };
    var formatRelative = (token, date) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function")
        return format(date);
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/el/_lib/localize.js
var require_localize22 = __commonJS({
  "node_modules/date-fns/locale/el/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["πΧ", "μΧ"],
      abbreviated: ["π.Χ.", "μ.Χ."],
      wide: ["προ Χριστού", "μετά Χριστόν"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Τ1", "Τ2", "Τ3", "Τ4"],
      wide: ["1ο τρίμηνο", "2ο τρίμηνο", "3ο τρίμηνο", "4ο τρίμηνο"]
    };
    var monthValues = {
      narrow: ["Ι", "Φ", "Μ", "Α", "Μ", "Ι", "Ι", "Α", "Σ", "Ο", "Ν", "Δ"],
      abbreviated: [
        "Ιαν",
        "Φεβ",
        "Μάρ",
        "Απρ",
        "Μάι",
        "Ιούν",
        "Ιούλ",
        "Αύγ",
        "Σεπ",
        "Οκτ",
        "Νοέ",
        "Δεκ"
      ],
      wide: [
        "Ιανουάριος",
        "Φεβρουάριος",
        "Μάρτιος",
        "Απρίλιος",
        "Μάιος",
        "Ιούνιος",
        "Ιούλιος",
        "Αύγουστος",
        "Σεπτέμβριος",
        "Οκτώβριος",
        "Νοέμβριος",
        "Δεκέμβριος"
      ]
    };
    var formattingMonthValues = {
      narrow: ["Ι", "Φ", "Μ", "Α", "Μ", "Ι", "Ι", "Α", "Σ", "Ο", "Ν", "Δ"],
      abbreviated: [
        "Ιαν",
        "Φεβ",
        "Μαρ",
        "Απρ",
        "Μαΐ",
        "Ιουν",
        "Ιουλ",
        "Αυγ",
        "Σεπ",
        "Οκτ",
        "Νοε",
        "Δεκ"
      ],
      wide: [
        "Ιανουαρίου",
        "Φεβρουαρίου",
        "Μαρτίου",
        "Απριλίου",
        "Μαΐου",
        "Ιουνίου",
        "Ιουλίου",
        "Αυγούστου",
        "Σεπτεμβρίου",
        "Οκτωβρίου",
        "Νοεμβρίου",
        "Δεκεμβρίου"
      ]
    };
    var dayValues = {
      narrow: ["Κ", "Δ", "T", "Τ", "Π", "Π", "Σ"],
      short: ["Κυ", "Δε", "Τρ", "Τε", "Πέ", "Πα", "Σά"],
      abbreviated: ["Κυρ", "Δευ", "Τρί", "Τετ", "Πέμ", "Παρ", "Σάβ"],
      wide: [
        "Κυριακή",
        "Δευτέρα",
        "Τρίτη",
        "Τετάρτη",
        "Πέμπτη",
        "Παρασκευή",
        "Σάββατο"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "πμ",
        pm: "μμ",
        midnight: "μεσάνυχτα",
        noon: "μεσημέρι",
        morning: "πρωί",
        afternoon: "απόγευμα",
        evening: "βράδυ",
        night: "νύχτα"
      },
      abbreviated: {
        am: "π.μ.",
        pm: "μ.μ.",
        midnight: "μεσάνυχτα",
        noon: "μεσημέρι",
        morning: "πρωί",
        afternoon: "απόγευμα",
        evening: "βράδυ",
        night: "νύχτα"
      },
      wide: {
        am: "π.μ.",
        pm: "μ.μ.",
        midnight: "μεσάνυχτα",
        noon: "μεσημέρι",
        morning: "πρωί",
        afternoon: "απόγευμα",
        evening: "βράδυ",
        night: "νύχτα"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = options == null ? void 0 : options.unit;
      let suffix;
      if (unit === "year" || unit === "month") {
        suffix = "ος";
      } else if (unit === "week" || unit === "dayOfYear" || unit === "day" || unit === "hour" || unit === "date") {
        suffix = "η";
      } else {
        suffix = "ο";
      }
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/el/_lib/match.js
var require_match21 = __commonJS({
  "node_modules/date-fns/locale/el/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(ος|η|ο)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(πΧ|μΧ)/i,
      abbreviated: /^(π\.?\s?χ\.?|π\.?\s?κ\.?\s?χ\.?|μ\.?\s?χ\.?|κ\.?\s?χ\.?)/i,
      wide: /^(προ Χριστο(ύ|υ)|πριν απ(ό|ο) την Κοιν(ή|η) Χρονολογ(ί|ι)α|μετ(ά|α) Χριστ(ό|ο)ν|Κοιν(ή|η) Χρονολογ(ί|ι)α)/i
    };
    var parseEraPatterns = {
      any: [/^π/i, /^(μ|κ)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^τ[1234]/i,
      wide: /^[1234]ο? τρ(ί|ι)μηνο/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[ιφμαμιιασονδ]/i,
      abbreviated: /^(ιαν|φεβ|μ[άα]ρ|απρ|μ[άα][ιΐ]|ιο[ύυ]ν|ιο[ύυ]λ|α[ύυ]γ|σεπ|οκτ|νο[έε]|δεκ)/i,
      wide: /^(μ[άα][ιΐ]|α[ύυ]γο[υύ]στ)(ος|ου)|(ιανου[άα]ρ|φεβρου[άα]ρ|μ[άα]ρτ|απρ[ίι]λ|ιο[ύυ]ν|ιο[ύυ]λ|σεπτ[έε]μβρ|οκτ[ώω]βρ|νο[έε]μβρ|δεκ[έε]μβρ)(ιος|ίου)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ι/i,
        /^φ/i,
        /^μ/i,
        /^α/i,
        /^μ/i,
        /^ι/i,
        /^ι/i,
        /^α/i,
        /^σ/i,
        /^ο/i,
        /^ν/i,
        /^δ/i
      ],
      any: [
        /^ια/i,
        /^φ/i,
        /^μ[άα]ρ/i,
        /^απ/i,
        /^μ[άα][ιΐ]/i,
        /^ιο[ύυ]ν/i,
        /^ιο[ύυ]λ/i,
        /^α[ύυ]/i,
        /^σ/i,
        /^ο/i,
        /^ν/i,
        /^δ/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[κδτπσ]/i,
      short: /^(κυ|δε|τρ|τε|π[εέ]|π[αά]|σ[αά])/i,
      abbreviated: /^(κυρ|δευ|τρι|τετ|πεμ|παρ|σαβ)/i,
      wide: /^(κυριακ(ή|η)|δευτ(έ|ε)ρα|τρ(ί|ι)τη|τετ(ά|α)ρτη|π(έ|ε)μπτη|παρασκευ(ή|η)|σ(ά|α)ββατο)/i
    };
    var parseDayPatterns = {
      narrow: [/^κ/i, /^δ/i, /^τ/i, /^τ/i, /^π/i, /^π/i, /^σ/i],
      any: [/^κ/i, /^δ/i, /^τρ/i, /^τε/i, /^π[εέ]/i, /^π[αά]/i, /^σ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(πμ|μμ|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i,
      any: /^([πμ]\.?\s?μ\.?|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^πμ|π\.\s?μ\./i,
        pm: /^μμ|μ\.\s?μ\./i,
        midnight: /^μεσάν/i,
        noon: /^μεσημ(έ|ε)/i,
        morning: /πρω(ί|ι)/i,
        afternoon: /απ(ό|ο)γευμα/i,
        evening: /βρ(ά|α)δυ/i,
        night: /ν(ύ|υ)χτα/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/el.js
var require_el = __commonJS({
  "node_modules/date-fns/locale/el.js"(exports) {
    "use strict";
    exports.el = void 0;
    var _index = require_formatDistance22();
    var _index2 = require_formatLong21();
    var _index3 = require_formatRelative22();
    var _index4 = require_localize22();
    var _index5 = require_match21();
    var el = exports.el = {
      code: "el",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/en-AU/_lib/formatLong.js
var require_formatLong22 = __commonJS({
  "node_modules/date-fns/locale/en-AU/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/en-AU.js
var require_en_AU = __commonJS({
  "node_modules/date-fns/locale/en-AU.js"(exports) {
    "use strict";
    exports.enAU = void 0;
    var _index = require_formatDistance();
    var _index2 = require_formatLong22();
    var _index3 = require_formatRelative();
    var _index4 = require_localize();
    var _index5 = require_match();
    var enAU = exports.enAU = {
      code: "en-AU",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/en-CA/_lib/formatDistance.js
var require_formatDistance23 = __commonJS({
  "node_modules/date-fns/locale/en-CA/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
      },
      xSeconds: {
        one: "a second",
        other: "{{count}} seconds"
      },
      halfAMinute: "half a minute",
      lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
      },
      xMinutes: {
        one: "a minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "about an hour",
        other: "about {{count}} hours"
      },
      xHours: {
        one: "an hour",
        other: "{{count}} hours"
      },
      xDays: {
        one: "a day",
        other: "{{count}} days"
      },
      aboutXWeeks: {
        one: "about a week",
        other: "about {{count}} weeks"
      },
      xWeeks: {
        one: "a week",
        other: "{{count}} weeks"
      },
      aboutXMonths: {
        one: "about a month",
        other: "about {{count}} months"
      },
      xMonths: {
        one: "a month",
        other: "{{count}} months"
      },
      aboutXYears: {
        one: "about a year",
        other: "about {{count}} years"
      },
      xYears: {
        one: "a year",
        other: "{{count}} years"
      },
      overXYears: {
        one: "over a year",
        other: "over {{count}} years"
      },
      almostXYears: {
        one: "almost a year",
        other: "almost {{count}} years"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "in " + result;
        } else {
          return result + " ago";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/en-CA/_lib/formatLong.js
var require_formatLong23 = __commonJS({
  "node_modules/date-fns/locale/en-CA/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, yyyy",
      long: "MMMM do, yyyy",
      medium: "MMM d, yyyy",
      short: "yyyy-MM-dd"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/en-CA.js
var require_en_CA = __commonJS({
  "node_modules/date-fns/locale/en-CA.js"(exports) {
    "use strict";
    exports.enCA = void 0;
    var _index = require_formatRelative();
    var _index2 = require_localize();
    var _index3 = require_match();
    var _index4 = require_formatDistance23();
    var _index5 = require_formatLong23();
    var enCA = exports.enCA = {
      code: "en-CA",
      formatDistance: _index4.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index.formatRelative,
      localize: _index2.localize,
      match: _index3.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/en-GB/_lib/formatLong.js
var require_formatLong24 = __commonJS({
  "node_modules/date-fns/locale/en-GB/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/en-GB.js
var require_en_GB = __commonJS({
  "node_modules/date-fns/locale/en-GB.js"(exports) {
    "use strict";
    exports.enGB = void 0;
    var _index = require_formatDistance();
    var _index2 = require_formatRelative();
    var _index3 = require_localize();
    var _index4 = require_match();
    var _index5 = require_formatLong24();
    var enGB = exports.enGB = {
      code: "en-GB",
      formatDistance: _index.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index2.formatRelative,
      localize: _index3.localize,
      match: _index4.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/en-IE.js
var require_en_IE = __commonJS({
  "node_modules/date-fns/locale/en-IE.js"(exports) {
    "use strict";
    exports.enIE = void 0;
    var _index = require_formatDistance();
    var _index2 = require_formatRelative();
    var _index3 = require_localize();
    var _index4 = require_match();
    var _index5 = require_formatLong24();
    var enIE = exports.enIE = {
      code: "en-IE",
      formatDistance: _index.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index2.formatRelative,
      localize: _index3.localize,
      match: _index4.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/en-IN/_lib/formatLong.js
var require_formatLong25 = __commonJS({
  "node_modules/date-fns/locale/en-IN/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM, yyyy",
      medium: "d MMM, yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/en-IN.js
var require_en_IN = __commonJS({
  "node_modules/date-fns/locale/en-IN.js"(exports) {
    "use strict";
    exports.enIN = void 0;
    var _index = require_formatDistance();
    var _index2 = require_formatRelative();
    var _index3 = require_localize();
    var _index4 = require_match();
    var _index5 = require_formatLong25();
    var enIN = exports.enIN = {
      code: "en-IN",
      formatDistance: _index.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index2.formatRelative,
      localize: _index3.localize,
      match: _index4.match,
      options: {
        weekStartsOn: 1,
        // Monday is the first day of the week.
        firstWeekContainsDate: 4
        // The week that contains Jan 4th is the first week of the year.
      }
    };
  }
});

// node_modules/date-fns/locale/en-NZ/_lib/formatLong.js
var require_formatLong26 = __commonJS({
  "node_modules/date-fns/locale/en-NZ/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/en-NZ.js
var require_en_NZ = __commonJS({
  "node_modules/date-fns/locale/en-NZ.js"(exports) {
    "use strict";
    exports.enNZ = void 0;
    var _index = require_formatDistance();
    var _index2 = require_formatRelative();
    var _index3 = require_localize();
    var _index4 = require_match();
    var _index5 = require_formatLong26();
    var enNZ = exports.enNZ = {
      code: "en-NZ",
      formatDistance: _index.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index2.formatRelative,
      localize: _index3.localize,
      match: _index4.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/en-ZA/_lib/formatLong.js
var require_formatLong27 = __commonJS({
  "node_modules/date-fns/locale/en-ZA/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, dd MMMM yyyy",
      long: "dd MMMM yyyy",
      medium: "dd MMM yyyy",
      short: "yyyy/MM/dd"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/en-ZA.js
var require_en_ZA = __commonJS({
  "node_modules/date-fns/locale/en-ZA.js"(exports) {
    "use strict";
    exports.enZA = void 0;
    var _index = require_formatDistance();
    var _index2 = require_formatRelative();
    var _index3 = require_localize();
    var _index4 = require_match();
    var _index5 = require_formatLong27();
    var enZA = exports.enZA = {
      code: "en-ZA",
      formatDistance: _index.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index2.formatRelative,
      localize: _index3.localize,
      match: _index4.match,
      options: {
        weekStartsOn: 0,
        // Sunday is the first day of the week.
        firstWeekContainsDate: 1
        // The week that contains Jan 1st is the first week of the year.
      }
    };
  }
});

// node_modules/date-fns/locale/eo/_lib/formatDistance.js
var require_formatDistance24 = __commonJS({
  "node_modules/date-fns/locale/eo/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "malpli ol sekundo",
        other: "malpli ol {{count}} sekundoj"
      },
      xSeconds: {
        one: "1 sekundo",
        other: "{{count}} sekundoj"
      },
      halfAMinute: "duonminuto",
      lessThanXMinutes: {
        one: "malpli ol minuto",
        other: "malpli ol {{count}} minutoj"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutoj"
      },
      aboutXHours: {
        one: "proksimume 1 horo",
        other: "proksimume {{count}} horoj"
      },
      xHours: {
        one: "1 horo",
        other: "{{count}} horoj"
      },
      xDays: {
        one: "1 tago",
        other: "{{count}} tagoj"
      },
      aboutXMonths: {
        one: "proksimume 1 monato",
        other: "proksimume {{count}} monatoj"
      },
      xWeeks: {
        one: "1 semajno",
        other: "{{count}} semajnoj"
      },
      aboutXWeeks: {
        one: "proksimume 1 semajno",
        other: "proksimume {{count}} semajnoj"
      },
      xMonths: {
        one: "1 monato",
        other: "{{count}} monatoj"
      },
      aboutXYears: {
        one: "proksimume 1 jaro",
        other: "proksimume {{count}} jaroj"
      },
      xYears: {
        one: "1 jaro",
        other: "{{count}} jaroj"
      },
      overXYears: {
        one: "pli ol 1 jaro",
        other: "pli ol {{count}} jaroj"
      },
      almostXYears: {
        one: "preskaŭ 1 jaro",
        other: "preskaŭ {{count}} jaroj"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if ((options == null ? void 0 : options.comparison) && options.comparison > 0) {
          return "post " + result;
        } else {
          return "antaŭ " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/eo/_lib/formatLong.js
var require_formatLong28 = __commonJS({
  "node_modules/date-fns/locale/eo/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do 'de' MMMM y",
      long: "y-MMMM-dd",
      medium: "y-MMM-dd",
      short: "yyyy-MM-dd"
    };
    var timeFormats = {
      full: "Ho 'horo kaj' m:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      any: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/eo/_lib/formatRelative.js
var require_formatRelative23 = __commonJS({
  "node_modules/date-fns/locale/eo/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'pasinta' eeee 'je' p",
      yesterday: "'hieraŭ je' p",
      today: "'hodiaŭ je' p",
      tomorrow: "'morgaŭ je' p",
      nextWeek: "eeee 'je' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/eo/_lib/localize.js
var require_localize23 = __commonJS({
  "node_modules/date-fns/locale/eo/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["aK", "pK"],
      abbreviated: ["a.K.E.", "p.K.E."],
      wide: ["antaŭ Komuna Erao", "Komuna Erao"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: [
        "1-a kvaronjaro",
        "2-a kvaronjaro",
        "3-a kvaronjaro",
        "4-a kvaronjaro"
      ]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "aŭg",
        "sep",
        "okt",
        "nov",
        "dec"
      ],
      wide: [
        "januaro",
        "februaro",
        "marto",
        "aprilo",
        "majo",
        "junio",
        "julio",
        "aŭgusto",
        "septembro",
        "oktobro",
        "novembro",
        "decembro"
      ]
    };
    var dayValues = {
      narrow: ["D", "L", "M", "M", "Ĵ", "V", "S"],
      short: ["di", "lu", "ma", "me", "ĵa", "ve", "sa"],
      abbreviated: ["dim", "lun", "mar", "mer", "ĵaŭ", "ven", "sab"],
      wide: [
        "dimanĉo",
        "lundo",
        "mardo",
        "merkredo",
        "ĵaŭdo",
        "vendredo",
        "sabato"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
      },
      abbreviated: {
        am: "a.t.m.",
        pm: "p.t.m.",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
      },
      wide: {
        am: "antaŭtagmeze",
        pm: "posttagmeze",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      const number = Number(dirtyNumber);
      return number + "-a";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: function(quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/eo/_lib/match.js
var require_match22 = __commonJS({
  "node_modules/date-fns/locale/eo/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchPatternFn();
    var _index2 = require_buildMatchFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?a)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([ap]k)/i,
      abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
      wide: /^((antaǔ |post )?komuna erao)/i
    };
    var parseEraPatterns = {
      any: [/^a/i, /^[kp]/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^k[1234]/i,
      wide: /^[1234](-?a)? kvaronjaro/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(ŭ|ux|uh|u)g|sep|okt|nov|dec)/i,
      wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(ŭ|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^a(u|ŭ)/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dlmĵjvs]/i,
      short: /^(di|lu|ma|me|(ĵ|jx|jh|j)a|ve|sa)/i,
      abbreviated: /^(dim|lun|mar|mer|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)|ven|sab)/i,
      wide: /^(diman(ĉ|cx|ch|c)o|lundo|mardo|merkredo|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)do|vendredo|sabato)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|ĵ)/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|ĵ)/i, /^v/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
      abbreviated: /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
      wide: /^(anta(ŭ|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^noktom/i,
        noon: /^t/i,
        morning: /^m/i,
        afternoon: /^posttagmeze/i,
        evening: /^v/i,
        night: /^n/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: function(index) {
          return index + 1;
        }
      }),
      month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/eo.js
var require_eo = __commonJS({
  "node_modules/date-fns/locale/eo.js"(exports) {
    "use strict";
    exports.eo = void 0;
    var _index = require_formatDistance24();
    var _index2 = require_formatLong28();
    var _index3 = require_formatRelative23();
    var _index4 = require_localize23();
    var _index5 = require_match22();
    var eo = exports.eo = {
      code: "eo",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/es/_lib/formatDistance.js
var require_formatDistance25 = __commonJS({
  "node_modules/date-fns/locale/es/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "menos de un segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "medio minuto",
      lessThanXMinutes: {
        one: "menos de un minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "alrededor de 1 hora",
        other: "alrededor de {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 día",
        other: "{{count}} días"
      },
      aboutXWeeks: {
        one: "alrededor de 1 semana",
        other: "alrededor de {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "alrededor de 1 mes",
        other: "alrededor de {{count}} meses"
      },
      xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "alrededor de 1 año",
        other: "alrededor de {{count}} años"
      },
      xYears: {
        one: "1 año",
        other: "{{count}} años"
      },
      overXYears: {
        one: "más de 1 año",
        other: "más de {{count}} años"
      },
      almostXYears: {
        one: "casi 1 año",
        other: "casi {{count}} años"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "en " + result;
        } else {
          return "hace " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/es/_lib/formatLong.js
var require_formatLong29 = __commonJS({
  "node_modules/date-fns/locale/es/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'a las' {{time}}",
      long: "{{date}} 'a las' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/es/_lib/formatRelative.js
var require_formatRelative24 = __commonJS({
  "node_modules/date-fns/locale/es/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'el' eeee 'pasado a la' p",
      yesterday: "'ayer a la' p",
      today: "'hoy a la' p",
      tomorrow: "'mañana a la' p",
      nextWeek: "eeee 'a la' p",
      other: "P"
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'el' eeee 'pasado a las' p",
      yesterday: "'ayer a las' p",
      today: "'hoy a las' p",
      tomorrow: "'mañana a las' p",
      nextWeek: "eeee 'a las' p",
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      if (date.getHours() !== 1) {
        return formatRelativeLocalePlural[token];
      } else {
        return formatRelativeLocale[token];
      }
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/es/_lib/localize.js
var require_localize24 = __commonJS({
  "node_modules/date-fns/locale/es/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["AC", "DC"],
      abbreviated: ["AC", "DC"],
      wide: ["antes de cristo", "después de cristo"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1º trimestre", "2º trimestre", "3º trimestre", "4º trimestre"]
    };
    var monthValues = {
      narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "ene",
        "feb",
        "mar",
        "abr",
        "may",
        "jun",
        "jul",
        "ago",
        "sep",
        "oct",
        "nov",
        "dic"
      ],
      wide: [
        "enero",
        "febrero",
        "marzo",
        "abril",
        "mayo",
        "junio",
        "julio",
        "agosto",
        "septiembre",
        "octubre",
        "noviembre",
        "diciembre"
      ]
    };
    var dayValues = {
      narrow: ["d", "l", "m", "m", "j", "v", "s"],
      short: ["do", "lu", "ma", "mi", "ju", "vi", "sá"],
      abbreviated: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
      wide: [
        "domingo",
        "lunes",
        "martes",
        "miércoles",
        "jueves",
        "viernes",
        "sábado"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "mañana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "mañana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "mañana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "de la mañana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "de la mañana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "de la mañana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "º";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => Number(quarter) - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/es/_lib/match.js
var require_match23 = __commonJS({
  "node_modules/date-fns/locale/es/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchPatternFn();
    var _index2 = require_buildMatchFn();
    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [
        /^(antes de cristo|antes de la era com[uú]n)/i,
        /^(despu[eé]s de cristo|era com[uú]n)/i
      ]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[efmajsond]/i,
      abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
      wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^e/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^en/i,
        /^feb/i,
        /^mar/i,
        /^abr/i,
        /^may/i,
        /^jun/i,
        /^jul/i,
        /^ago/i,
        /^sep/i,
        /^oct/i,
        /^nov/i,
        /^dic/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dlmjvs]/i,
      short: /^(do|lu|ma|mi|ju|vi|s[áa])/i,
      abbreviated: /^(dom|lun|mar|mi[ée]|jue|vie|s[áa]b)/i,
      wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
      any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /mañana/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noche/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/es.js
var require_es = __commonJS({
  "node_modules/date-fns/locale/es.js"(exports) {
    "use strict";
    exports.es = void 0;
    var _index = require_formatDistance25();
    var _index2 = require_formatLong29();
    var _index3 = require_formatRelative24();
    var _index4 = require_localize24();
    var _index5 = require_match23();
    var es = exports.es = {
      code: "es",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/et/_lib/formatDistance.js
var require_formatDistance26 = __commonJS({
  "node_modules/date-fns/locale/et/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: "vähem kui üks sekund",
          other: "vähem kui {{count}} sekundit"
        },
        withPreposition: {
          one: "vähem kui ühe sekundi",
          other: "vähem kui {{count}} sekundi"
        }
      },
      xSeconds: {
        standalone: {
          one: "üks sekund",
          other: "{{count}} sekundit"
        },
        withPreposition: {
          one: "ühe sekundi",
          other: "{{count}} sekundi"
        }
      },
      halfAMinute: {
        standalone: "pool minutit",
        withPreposition: "poole minuti"
      },
      lessThanXMinutes: {
        standalone: {
          one: "vähem kui üks minut",
          other: "vähem kui {{count}} minutit"
        },
        withPreposition: {
          one: "vähem kui ühe minuti",
          other: "vähem kui {{count}} minuti"
        }
      },
      xMinutes: {
        standalone: {
          one: "üks minut",
          other: "{{count}} minutit"
        },
        withPreposition: {
          one: "ühe minuti",
          other: "{{count}} minuti"
        }
      },
      aboutXHours: {
        standalone: {
          one: "umbes üks tund",
          other: "umbes {{count}} tundi"
        },
        withPreposition: {
          one: "umbes ühe tunni",
          other: "umbes {{count}} tunni"
        }
      },
      xHours: {
        standalone: {
          one: "üks tund",
          other: "{{count}} tundi"
        },
        withPreposition: {
          one: "ühe tunni",
          other: "{{count}} tunni"
        }
      },
      xDays: {
        standalone: {
          one: "üks päev",
          other: "{{count}} päeva"
        },
        withPreposition: {
          one: "ühe päeva",
          other: "{{count}} päeva"
        }
      },
      aboutXWeeks: {
        standalone: {
          one: "umbes üks nädal",
          other: "umbes {{count}} nädalat"
        },
        withPreposition: {
          one: "umbes ühe nädala",
          other: "umbes {{count}} nädala"
        }
      },
      xWeeks: {
        standalone: {
          one: "üks nädal",
          other: "{{count}} nädalat"
        },
        withPreposition: {
          one: "ühe nädala",
          other: "{{count}} nädala"
        }
      },
      aboutXMonths: {
        standalone: {
          one: "umbes üks kuu",
          other: "umbes {{count}} kuud"
        },
        withPreposition: {
          one: "umbes ühe kuu",
          other: "umbes {{count}} kuu"
        }
      },
      xMonths: {
        standalone: {
          one: "üks kuu",
          other: "{{count}} kuud"
        },
        withPreposition: {
          one: "ühe kuu",
          other: "{{count}} kuu"
        }
      },
      aboutXYears: {
        standalone: {
          one: "umbes üks aasta",
          other: "umbes {{count}} aastat"
        },
        withPreposition: {
          one: "umbes ühe aasta",
          other: "umbes {{count}} aasta"
        }
      },
      xYears: {
        standalone: {
          one: "üks aasta",
          other: "{{count}} aastat"
        },
        withPreposition: {
          one: "ühe aasta",
          other: "{{count}} aasta"
        }
      },
      overXYears: {
        standalone: {
          one: "rohkem kui üks aasta",
          other: "rohkem kui {{count}} aastat"
        },
        withPreposition: {
          one: "rohkem kui ühe aasta",
          other: "rohkem kui {{count}} aasta"
        }
      },
      almostXYears: {
        standalone: {
          one: "peaaegu üks aasta",
          other: "peaaegu {{count}} aastat"
        },
        withPreposition: {
          one: "peaaegu ühe aasta",
          other: "peaaegu {{count}} aasta"
        }
      }
    };
    var formatDistance = (token, count, options) => {
      const usageGroup = (options == null ? void 0 : options.addSuffix) ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
      let result;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " pärast";
        } else {
          return result + " eest";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/et/_lib/formatLong.js
var require_formatLong30 = __commonJS({
  "node_modules/date-fns/locale/et/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'kell' {{time}}",
      long: "{{date}} 'kell' {{time}}",
      medium: "{{date}}. {{time}}",
      short: "{{date}}. {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/et/_lib/formatRelative.js
var require_formatRelative25 = __commonJS({
  "node_modules/date-fns/locale/et/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'eelmine' eeee 'kell' p",
      yesterday: "'eile kell' p",
      today: "'täna kell' p",
      tomorrow: "'homme kell' p",
      nextWeek: "'järgmine' eeee 'kell' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/et/_lib/localize.js
var require_localize25 = __commonJS({
  "node_modules/date-fns/locale/et/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["e.m.a", "m.a.j"],
      abbreviated: ["e.m.a", "m.a.j"],
      wide: ["enne meie ajaarvamist", "meie ajaarvamise järgi"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    var monthValues = {
      narrow: ["J", "V", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jaan",
        "veebr",
        "märts",
        "apr",
        "mai",
        "juuni",
        "juuli",
        "aug",
        "sept",
        "okt",
        "nov",
        "dets"
      ],
      wide: [
        "jaanuar",
        "veebruar",
        "märts",
        "aprill",
        "mai",
        "juuni",
        "juuli",
        "august",
        "september",
        "oktoober",
        "november",
        "detsember"
      ]
    };
    var dayValues = {
      narrow: ["P", "E", "T", "K", "N", "R", "L"],
      short: ["P", "E", "T", "K", "N", "R", "L"],
      abbreviated: [
        "pühap.",
        "esmasp.",
        "teisip.",
        "kolmap.",
        "neljap.",
        "reede.",
        "laup."
      ],
      wide: [
        "pühapäev",
        "esmaspäev",
        "teisipäev",
        "kolmapäev",
        "neljapäev",
        "reede",
        "laupäev"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "kesköö",
        noon: "keskpäev",
        morning: "hommik",
        afternoon: "pärastlõuna",
        evening: "õhtu",
        night: "öö"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "kesköö",
        noon: "keskpäev",
        morning: "hommik",
        afternoon: "pärastlõuna",
        evening: "õhtu",
        night: "öö"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "kesköö",
        noon: "keskpäev",
        morning: "hommik",
        afternoon: "pärastlõuna",
        evening: "õhtu",
        night: "öö"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "keskööl",
        noon: "keskpäeval",
        morning: "hommikul",
        afternoon: "pärastlõunal",
        evening: "õhtul",
        night: "öösel"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "keskööl",
        noon: "keskpäeval",
        morning: "hommikul",
        afternoon: "pärastlõunal",
        evening: "õhtul",
        night: "öösel"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "keskööl",
        noon: "keskpäeval",
        morning: "hommikul",
        afternoon: "pärastlõunal",
        evening: "õhtul",
        night: "öösel"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: monthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: dayValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/et/_lib/match.js
var require_match24 = __commonJS({
  "node_modules/date-fns/locale/et/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^\d+\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
      abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
      wide: /^(enne meie ajaarvamist|meie ajaarvamise järgi|enne Kristust|pärast Kristust)/i
    };
    var parseEraPatterns = {
      any: [/^e/i, /^(m|p)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jvmasond]/i,
      abbreviated: /^(jaan|veebr|märts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets)/i,
      wide: /^(jaanuar|veebruar|märts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^v/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^v/i,
        /^mär/i,
        /^ap/i,
        /^mai/i,
        /^juun/i,
        /^juul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[petknrl]/i,
      short: /^[petknrl]/i,
      abbreviated: /^(püh?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
      wide: /^(pühapäev|esmaspäev|teisipäev|kolmapäev|neljapäev|reede|laupäev)/i
    };
    var parseDayPatterns = {
      any: [/^p/i, /^e/i, /^t/i, /^k/i, /^n/i, /^r/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|keskööl?|keskpäev(al)?|hommik(ul)?|pärastlõunal?|õhtul?|öö(sel)?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^keskö/i,
        noon: /^keskp/i,
        morning: /hommik/i,
        afternoon: /pärastlõuna/i,
        evening: /õhtu/i,
        night: /öö/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/et.js
var require_et = __commonJS({
  "node_modules/date-fns/locale/et.js"(exports) {
    "use strict";
    exports.et = void 0;
    var _index = require_formatDistance26();
    var _index2 = require_formatLong30();
    var _index3 = require_formatRelative25();
    var _index4 = require_localize25();
    var _index5 = require_match24();
    var et = exports.et = {
      code: "et",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/eu/_lib/formatDistance.js
var require_formatDistance27 = __commonJS({
  "node_modules/date-fns/locale/eu/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "segundo bat baino gutxiago",
        other: "{{count}} segundo baino gutxiago"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundo"
      },
      halfAMinute: "minutu erdi",
      lessThanXMinutes: {
        one: "minutu bat baino gutxiago",
        other: "{{count}} minutu baino gutxiago"
      },
      xMinutes: {
        one: "1 minutu",
        other: "{{count}} minutu"
      },
      aboutXHours: {
        one: "1 ordu gutxi gorabehera",
        other: "{{count}} ordu gutxi gorabehera"
      },
      xHours: {
        one: "1 ordu",
        other: "{{count}} ordu"
      },
      xDays: {
        one: "1 egun",
        other: "{{count}} egun"
      },
      aboutXWeeks: {
        one: "aste 1 inguru",
        other: "{{count}} aste inguru"
      },
      xWeeks: {
        one: "1 aste",
        other: "{{count}} astean"
      },
      aboutXMonths: {
        one: "1 hilabete gutxi gorabehera",
        other: "{{count}} hilabete gutxi gorabehera"
      },
      xMonths: {
        one: "1 hilabete",
        other: "{{count}} hilabete"
      },
      aboutXYears: {
        one: "1 urte gutxi gorabehera",
        other: "{{count}} urte gutxi gorabehera"
      },
      xYears: {
        one: "1 urte",
        other: "{{count}} urte"
      },
      overXYears: {
        one: "1 urte baino gehiago",
        other: "{{count}} urte baino gehiago"
      },
      almostXYears: {
        one: "ia 1 urte",
        other: "ia {{count}} urte"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "en " + result;
        } else {
          return "duela " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/eu/_lib/formatLong.js
var require_formatLong31 = __commonJS({
  "node_modules/date-fns/locale/eu/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, y'ko' MMMM'ren' d'a' y'ren'",
      long: "y'ko' MMMM'ren' d'a'",
      medium: "y MMM d",
      short: "yy/MM/dd"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'tan' {{time}}",
      long: "{{date}} 'tan' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/eu/_lib/formatRelative.js
var require_formatRelative26 = __commonJS({
  "node_modules/date-fns/locale/eu/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'joan den' eeee, LT",
      yesterday: "'atzo,' p",
      today: "'gaur,' p",
      tomorrow: "'bihar,' p",
      nextWeek: "eeee, p",
      other: "P"
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'joan den' eeee, p",
      yesterday: "'atzo,' p",
      today: "'gaur,' p",
      tomorrow: "'bihar,' p",
      nextWeek: "eeee, p",
      other: "P"
    };
    var formatRelative = (token, date) => {
      if (date.getHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }
      return formatRelativeLocale[token];
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/eu/_lib/localize.js
var require_localize26 = __commonJS({
  "node_modules/date-fns/locale/eu/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["k.a.", "k.o."],
      abbreviated: ["k.a.", "k.o."],
      wide: ["kristo aurretik", "kristo ondoren"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1H", "2H", "3H", "4H"],
      wide: [
        "1. hiruhilekoa",
        "2. hiruhilekoa",
        "3. hiruhilekoa",
        "4. hiruhilekoa"
      ]
    };
    var monthValues = {
      narrow: ["u", "o", "m", "a", "m", "e", "u", "a", "i", "u", "a", "a"],
      abbreviated: [
        "urt",
        "ots",
        "mar",
        "api",
        "mai",
        "eka",
        "uzt",
        "abu",
        "ira",
        "urr",
        "aza",
        "abe"
      ],
      wide: [
        "urtarrila",
        "otsaila",
        "martxoa",
        "apirila",
        "maiatza",
        "ekaina",
        "uztaila",
        "abuztua",
        "iraila",
        "urria",
        "azaroa",
        "abendua"
      ]
    };
    var dayValues = {
      narrow: ["i", "a", "a", "a", "o", "o", "l"],
      short: ["ig", "al", "as", "az", "og", "or", "lr"],
      abbreviated: ["iga", "ast", "ast", "ast", "ost", "ost", "lar"],
      wide: [
        "igandea",
        "astelehena",
        "asteartea",
        "asteazkena",
        "osteguna",
        "ostirala",
        "larunbata"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "ge",
        noon: "eg",
        morning: "goiza",
        afternoon: "arratsaldea",
        evening: "arratsaldea",
        night: "gaua"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goiza",
        afternoon: "arratsaldea",
        evening: "arratsaldea",
        night: "gaua"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goiza",
        afternoon: "arratsaldea",
        evening: "arratsaldea",
        night: "gaua"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "ge",
        noon: "eg",
        morning: "goizean",
        afternoon: "arratsaldean",
        evening: "arratsaldean",
        night: "gauean"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goizean",
        afternoon: "arratsaldean",
        evening: "arratsaldean",
        night: "gauean"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goizean",
        afternoon: "arratsaldean",
        evening: "arratsaldean",
        night: "gauean"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/eu/_lib/match.js
var require_match25 = __commonJS({
  "node_modules/date-fns/locale/eu/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(k.a.|k.o.)/i,
      abbreviated: /^(k.a.|k.o.)/i,
      wide: /^(kristo aurretik|kristo ondoren)/i
    };
    var parseEraPatterns = {
      narrow: [/^k.a./i, /^k.o./i],
      abbreviated: [/^(k.a.)/i, /^(k.o.)/i],
      wide: [/^(kristo aurretik)/i, /^(kristo ondoren)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]H/i,
      wide: /^[1234](.)? hiruhilekoa/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[uomaei]/i,
      abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
      wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^u/i,
        /^o/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^e/i,
        /^u/i,
        /^a/i,
        /^i/i,
        /^u/i,
        /^a/i,
        /^a/i
      ],
      any: [
        /^urt/i,
        /^ots/i,
        /^mar/i,
        /^api/i,
        /^mai/i,
        /^eka/i,
        /^uzt/i,
        /^abu/i,
        /^ira/i,
        /^urr/i,
        /^aza/i,
        /^abe/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[iaol]/i,
      short: /^(ig|al|as|az|og|or|lr)/i,
      abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
      wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i
    };
    var parseDayPatterns = {
      narrow: [/^i/i, /^a/i, /^a/i, /^a/i, /^o/i, /^o/i, /^l/i],
      short: [/^ig/i, /^al/i, /^as/i, /^az/i, /^og/i, /^or/i, /^lr/i],
      abbreviated: [/^iga/i, /^ast/i, /^ast/i, /^ast/i, /^ost/i, /^ost/i, /^lar/i],
      wide: [
        /^igandea/i,
        /^astelehena/i,
        /^asteartea/i,
        /^asteazkena/i,
        /^osteguna/i,
        /^ostirala/i,
        /^larunbata/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
      any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^ge/i,
        noon: /^eg/i,
        morning: /goiz/i,
        afternoon: /arratsaldea/i,
        evening: /arratsaldea/i,
        night: /gau/i
      },
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^gauerdia/i,
        noon: /^eguerdia/i,
        morning: /goiz/i,
        afternoon: /arratsaldea/i,
        evening: /arratsaldea/i,
        night: /gau/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "wide"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/eu.js
var require_eu = __commonJS({
  "node_modules/date-fns/locale/eu.js"(exports) {
    "use strict";
    exports.eu = void 0;
    var _index = require_formatDistance27();
    var _index2 = require_formatLong31();
    var _index3 = require_formatRelative26();
    var _index4 = require_localize26();
    var _index5 = require_match25();
    var eu = exports.eu = {
      code: "eu",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/fa-IR/_lib/formatDistance.js
var require_formatDistance28 = __commonJS({
  "node_modules/date-fns/locale/fa-IR/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "کمتر از یک ثانیه",
        other: "کمتر از {{count}} ثانیه"
      },
      xSeconds: {
        one: "1 ثانیه",
        other: "{{count}} ثانیه"
      },
      halfAMinute: "نیم دقیقه",
      lessThanXMinutes: {
        one: "کمتر از یک دقیقه",
        other: "کمتر از {{count}} دقیقه"
      },
      xMinutes: {
        one: "1 دقیقه",
        other: "{{count}} دقیقه"
      },
      aboutXHours: {
        one: "حدود 1 ساعت",
        other: "حدود {{count}} ساعت"
      },
      xHours: {
        one: "1 ساعت",
        other: "{{count}} ساعت"
      },
      xDays: {
        one: "1 روز",
        other: "{{count}} روز"
      },
      aboutXWeeks: {
        one: "حدود 1 هفته",
        other: "حدود {{count}} هفته"
      },
      xWeeks: {
        one: "1 هفته",
        other: "{{count}} هفته"
      },
      aboutXMonths: {
        one: "حدود 1 ماه",
        other: "حدود {{count}} ماه"
      },
      xMonths: {
        one: "1 ماه",
        other: "{{count}} ماه"
      },
      aboutXYears: {
        one: "حدود 1 سال",
        other: "حدود {{count}} سال"
      },
      xYears: {
        one: "1 سال",
        other: "{{count}} سال"
      },
      overXYears: {
        one: "بیشتر از 1 سال",
        other: "بیشتر از {{count}} سال"
      },
      almostXYears: {
        one: "نزدیک 1 سال",
        other: "نزدیک {{count}} سال"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "در " + result;
        } else {
          return result + " قبل";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/fa-IR/_lib/formatLong.js
var require_formatLong32 = __commonJS({
  "node_modules/date-fns/locale/fa-IR/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE do MMMM y",
      long: "do MMMM y",
      medium: "d MMM y",
      short: "yyyy/MM/dd"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'در' {{time}}",
      long: "{{date}} 'در' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/fa-IR/_lib/formatRelative.js
var require_formatRelative27 = __commonJS({
  "node_modules/date-fns/locale/fa-IR/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'گذشته در' p",
      yesterday: "'دیروز در' p",
      today: "'امروز در' p",
      tomorrow: "'فردا در' p",
      nextWeek: "eeee 'در' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/fa-IR/_lib/localize.js
var require_localize27 = __commonJS({
  "node_modules/date-fns/locale/fa-IR/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ق", "ب"],
      abbreviated: ["ق.م.", "ب.م."],
      wide: ["قبل از میلاد", "بعد از میلاد"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["س‌م1", "س‌م2", "س‌م3", "س‌م4"],
      wide: ["سه‌ماهه 1", "سه‌ماهه 2", "سه‌ماهه 3", "سه‌ماهه 4"]
    };
    var monthValues = {
      narrow: ["ژ", "ف", "م", "آ", "م", "ج", "ج", "آ", "س", "ا", "ن", "د"],
      abbreviated: [
        "ژانـ",
        "فور",
        "مارس",
        "آپر",
        "می",
        "جون",
        "جولـ",
        "آگو",
        "سپتـ",
        "اکتـ",
        "نوامـ",
        "دسامـ"
      ],
      wide: [
        "ژانویه",
        "فوریه",
        "مارس",
        "آپریل",
        "می",
        "جون",
        "جولای",
        "آگوست",
        "سپتامبر",
        "اکتبر",
        "نوامبر",
        "دسامبر"
      ]
    };
    var dayValues = {
      narrow: ["ی", "د", "س", "چ", "پ", "ج", "ش"],
      short: ["1ش", "2ش", "3ش", "4ش", "5ش", "ج", "ش"],
      abbreviated: [
        "یکشنبه",
        "دوشنبه",
        "سه‌شنبه",
        "چهارشنبه",
        "پنجشنبه",
        "جمعه",
        "شنبه"
      ],
      wide: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ق",
        pm: "ب",
        midnight: "ن",
        noon: "ظ",
        morning: "ص",
        afternoon: "ب.ظ.",
        evening: "ع",
        night: "ش"
      },
      abbreviated: {
        am: "ق.ظ.",
        pm: "ب.ظ.",
        midnight: "نیمه‌شب",
        noon: "ظهر",
        morning: "صبح",
        afternoon: "بعدازظهر",
        evening: "عصر",
        night: "شب"
      },
      wide: {
        am: "قبل‌ازظهر",
        pm: "بعدازظهر",
        midnight: "نیمه‌شب",
        noon: "ظهر",
        morning: "صبح",
        afternoon: "بعدازظهر",
        evening: "عصر",
        night: "شب"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ق",
        pm: "ب",
        midnight: "ن",
        noon: "ظ",
        morning: "ص",
        afternoon: "ب.ظ.",
        evening: "ع",
        night: "ش"
      },
      abbreviated: {
        am: "ق.ظ.",
        pm: "ب.ظ.",
        midnight: "نیمه‌شب",
        noon: "ظهر",
        morning: "صبح",
        afternoon: "بعدازظهر",
        evening: "عصر",
        night: "شب"
      },
      wide: {
        am: "قبل‌ازظهر",
        pm: "بعدازظهر",
        midnight: "نیمه‌شب",
        noon: "ظهر",
        morning: "صبح",
        afternoon: "بعدازظهر",
        evening: "عصر",
        night: "شب"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/fa-IR/_lib/match.js
var require_match26 = __commonJS({
  "node_modules/date-fns/locale/fa-IR/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ق|ب)/i,
      abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?د\.?\s?م\.?|م\.?\s?|د\.?\s?م\.?)/i,
      wide: /^(قبل از میلاد|قبل از دوران مشترک|میلادی|دوران مشترک|بعد از میلاد)/i
    };
    var parseEraPatterns = {
      any: [/^قبل/i, /^بعد/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^س‌م[1234]/i,
      wide: /^سه‌ماهه [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[جژفمآاماسند]/i,
      abbreviated: /^(جنو|ژانـ|ژانویه|فوریه|فور|مارس|آوریل|آپر|مه|می|ژوئن|جون|جول|جولـ|ژوئیه|اوت|آگو|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نوامـ|دسامبر|دسامـ|دسم)/i,
      wide: /^(ژانویه|جنوری|فبروری|فوریه|مارچ|مارس|آپریل|اپریل|ایپریل|آوریل|مه|می|ژوئن|جون|جولای|ژوئیه|آگست|اگست|آگوست|اوت|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نومبر|دسامبر|دسمبر)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^(ژ|ج)/i,
        /^ف/i,
        /^م/i,
        /^(آ|ا)/i,
        /^م/i,
        /^(ژ|ج)/i,
        /^(ج|ژ)/i,
        /^(آ|ا)/i,
        /^س/i,
        /^ا/i,
        /^ن/i,
        /^د/i
      ],
      any: [
        /^ژا/i,
        /^ف/i,
        /^ما/i,
        /^آپ/i,
        /^(می|مه)/i,
        /^(ژوئن|جون)/i,
        /^(ژوئی|جول)/i,
        /^(اوت|آگ)/i,
        /^س/i,
        /^(اوک|اک)/i,
        /^ن/i,
        /^د/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[شیدسچپج]/i,
      short: /^(ش|ج|1ش|2ش|3ش|4ش|5ش)/i,
      abbreviated: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i,
      wide: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i
    };
    var parseDayPatterns = {
      narrow: [/^ی/i, /^دو/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
      any: [
        /^(ی|1ش|یکشنبه)/i,
        /^(د|2ش|دوشنبه)/i,
        /^(س|3ش|سه‌شنبه)/i,
        /^(چ|4ش|چهارشنبه)/i,
        /^(پ|5ش|پنجشنبه)/i,
        /^(ج|جمعه)/i,
        /^(ش|شنبه)/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ب|ق|ن|ظ|ص|ب.ظ.|ع|ش)/i,
      abbreviated: /^(ق.ظ.|ب.ظ.|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i,
      wide: /^(قبل‌ازظهر|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(ق|ق.ظ.|قبل‌ازظهر)/i,
        pm: /^(ب|ب.ظ.|بعدازظهر)/i,
        midnight: /^(‌نیمه‌شب|ن)/i,
        noon: /^(ظ|ظهر)/i,
        morning: /(ص|صبح)/i,
        afternoon: /(ب|ب.ظ.|بعدازظهر)/i,
        evening: /(ع|عصر)/i,
        night: /(ش|شب)/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/fa-IR.js
var require_fa_IR = __commonJS({
  "node_modules/date-fns/locale/fa-IR.js"(exports) {
    "use strict";
    exports.faIR = void 0;
    var _index = require_formatDistance28();
    var _index2 = require_formatLong32();
    var _index3 = require_formatRelative27();
    var _index4 = require_localize27();
    var _index5 = require_match26();
    var faIR = exports.faIR = {
      code: "fa-IR",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 6,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/fi/_lib/formatDistance.js
var require_formatDistance29 = __commonJS({
  "node_modules/date-fns/locale/fi/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function futureSeconds(text) {
      return text.replace(/sekuntia?/, "sekunnin");
    }
    function futureMinutes(text) {
      return text.replace(/minuuttia?/, "minuutin");
    }
    function futureHours(text) {
      return text.replace(/tuntia?/, "tunnin");
    }
    function futureDays(text) {
      return text.replace(/päivää?/, "päivän");
    }
    function futureWeeks(text) {
      return text.replace(/(viikko|viikkoa)/, "viikon");
    }
    function futureMonths(text) {
      return text.replace(/(kuukausi|kuukautta)/, "kuukauden");
    }
    function futureYears(text) {
      return text.replace(/(vuosi|vuotta)/, "vuoden");
    }
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "alle sekunti",
        other: "alle {{count}} sekuntia",
        futureTense: futureSeconds
      },
      xSeconds: {
        one: "sekunti",
        other: "{{count}} sekuntia",
        futureTense: futureSeconds
      },
      halfAMinute: {
        one: "puoli minuuttia",
        other: "puoli minuuttia",
        futureTense: (_text) => "puolen minuutin"
      },
      lessThanXMinutes: {
        one: "alle minuutti",
        other: "alle {{count}} minuuttia",
        futureTense: futureMinutes
      },
      xMinutes: {
        one: "minuutti",
        other: "{{count}} minuuttia",
        futureTense: futureMinutes
      },
      aboutXHours: {
        one: "noin tunti",
        other: "noin {{count}} tuntia",
        futureTense: futureHours
      },
      xHours: {
        one: "tunti",
        other: "{{count}} tuntia",
        futureTense: futureHours
      },
      xDays: {
        one: "päivä",
        other: "{{count}} päivää",
        futureTense: futureDays
      },
      aboutXWeeks: {
        one: "noin viikko",
        other: "noin {{count}} viikkoa",
        futureTense: futureWeeks
      },
      xWeeks: {
        one: "viikko",
        other: "{{count}} viikkoa",
        futureTense: futureWeeks
      },
      aboutXMonths: {
        one: "noin kuukausi",
        other: "noin {{count}} kuukautta",
        futureTense: futureMonths
      },
      xMonths: {
        one: "kuukausi",
        other: "{{count}} kuukautta",
        futureTense: futureMonths
      },
      aboutXYears: {
        one: "noin vuosi",
        other: "noin {{count}} vuotta",
        futureTense: futureYears
      },
      xYears: {
        one: "vuosi",
        other: "{{count}} vuotta",
        futureTense: futureYears
      },
      overXYears: {
        one: "yli vuosi",
        other: "yli {{count}} vuotta",
        futureTense: futureYears
      },
      almostXYears: {
        one: "lähes vuosi",
        other: "lähes {{count}} vuotta",
        futureTense: futureYears
      }
    };
    var formatDistance = (token, count, options) => {
      const tokenValue = formatDistanceLocale[token];
      const result = count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return tokenValue.futureTense(result) + " kuluttua";
        } else {
          return result + " sitten";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/fi/_lib/formatLong.js
var require_formatLong33 = __commonJS({
  "node_modules/date-fns/locale/fi/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "eeee d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "d.M.y"
    };
    var timeFormats = {
      full: "HH.mm.ss zzzz",
      long: "HH.mm.ss z",
      medium: "HH.mm.ss",
      short: "HH.mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'klo' {{time}}",
      long: "{{date}} 'klo' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/fi/_lib/formatRelative.js
var require_formatRelative28 = __commonJS({
  "node_modules/date-fns/locale/fi/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'viime' eeee 'klo' p",
      yesterday: "'eilen klo' p",
      today: "'tänään klo' p",
      tomorrow: "'huomenna klo' p",
      nextWeek: "'ensi' eeee 'klo' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/fi/_lib/localize.js
var require_localize28 = __commonJS({
  "node_modules/date-fns/locale/fi/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["eaa.", "jaa."],
      abbreviated: ["eaa.", "jaa."],
      wide: ["ennen ajanlaskun alkua", "jälkeen ajanlaskun alun"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. kvartaali", "2. kvartaali", "3. kvartaali", "4. kvartaali"]
    };
    var monthValues = {
      narrow: ["T", "H", "M", "H", "T", "K", "H", "E", "S", "L", "M", "J"],
      abbreviated: [
        "tammi",
        "helmi",
        "maalis",
        "huhti",
        "touko",
        "kesä",
        "heinä",
        "elo",
        "syys",
        "loka",
        "marras",
        "joulu"
      ],
      wide: [
        "tammikuu",
        "helmikuu",
        "maaliskuu",
        "huhtikuu",
        "toukokuu",
        "kesäkuu",
        "heinäkuu",
        "elokuu",
        "syyskuu",
        "lokakuu",
        "marraskuu",
        "joulukuu"
      ]
    };
    var formattingMonthValues = {
      narrow: monthValues.narrow,
      abbreviated: monthValues.abbreviated,
      wide: [
        "tammikuuta",
        "helmikuuta",
        "maaliskuuta",
        "huhtikuuta",
        "toukokuuta",
        "kesäkuuta",
        "heinäkuuta",
        "elokuuta",
        "syyskuuta",
        "lokakuuta",
        "marraskuuta",
        "joulukuuta"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "K", "T", "P", "L"],
      short: ["su", "ma", "ti", "ke", "to", "pe", "la"],
      abbreviated: ["sunn.", "maan.", "tiis.", "kesk.", "torst.", "perj.", "la"],
      wide: [
        "sunnuntai",
        "maanantai",
        "tiistai",
        "keskiviikko",
        "torstai",
        "perjantai",
        "lauantai"
      ]
    };
    var formattingDayValues = {
      narrow: dayValues.narrow,
      short: dayValues.short,
      abbreviated: dayValues.abbreviated,
      wide: [
        "sunnuntaina",
        "maanantaina",
        "tiistaina",
        "keskiviikkona",
        "torstaina",
        "perjantaina",
        "lauantaina"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ap",
        pm: "ip",
        midnight: "keskiyö",
        noon: "keskipäivä",
        morning: "ap",
        afternoon: "ip",
        evening: "illalla",
        night: "yöllä"
      },
      abbreviated: {
        am: "ap",
        pm: "ip",
        midnight: "keskiyö",
        noon: "keskipäivä",
        morning: "ap",
        afternoon: "ip",
        evening: "illalla",
        night: "yöllä"
      },
      wide: {
        am: "ap",
        pm: "ip",
        midnight: "keskiyöllä",
        noon: "keskipäivällä",
        morning: "aamupäivällä",
        afternoon: "iltapäivällä",
        evening: "illalla",
        night: "yöllä"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/fi/_lib/match.js
var require_match27 = __commonJS({
  "node_modules/date-fns/locale/fi/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(\.)/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(e|j)/i,
      abbreviated: /^(eaa.|jaa.)/i,
      wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
    };
    var parseEraPatterns = {
      any: [/^e/i, /^j/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]\.? kvartaali/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[thmkeslj]/i,
      abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
      wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^t/i,
        /^h/i,
        /^m/i,
        /^h/i,
        /^t/i,
        /^k/i,
        /^h/i,
        /^e/i,
        /^s/i,
        /^l/i,
        /^m/i,
        /^j/i
      ],
      any: [
        /^ta/i,
        /^hel/i,
        /^maa/i,
        /^hu/i,
        /^to/i,
        /^k/i,
        /^hei/i,
        /^e/i,
        /^s/i,
        /^l/i,
        /^mar/i,
        /^j/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtkpl]/i,
      short: /^(su|ma|ti|ke|to|pe|la)/i,
      abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
      wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
      any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
      any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ap/i,
        pm: /^ip/i,
        midnight: /^keskiyö/i,
        noon: /^keskipäivä/i,
        morning: /aamupäivällä/i,
        afternoon: /iltapäivällä/i,
        evening: /illalla/i,
        night: /yöllä/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/fi.js
var require_fi = __commonJS({
  "node_modules/date-fns/locale/fi.js"(exports) {
    "use strict";
    exports.fi = void 0;
    var _index = require_formatDistance29();
    var _index2 = require_formatLong33();
    var _index3 = require_formatRelative28();
    var _index4 = require_localize28();
    var _index5 = require_match27();
    var fi = exports.fi = {
      code: "fi",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/fr/_lib/formatDistance.js
var require_formatDistance30 = __commonJS({
  "node_modules/date-fns/locale/fr/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "moins d’une seconde",
        other: "moins de {{count}} secondes"
      },
      xSeconds: {
        one: "1 seconde",
        other: "{{count}} secondes"
      },
      halfAMinute: "30 secondes",
      lessThanXMinutes: {
        one: "moins d’une minute",
        other: "moins de {{count}} minutes"
      },
      xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
      },
      aboutXHours: {
        one: "environ 1 heure",
        other: "environ {{count}} heures"
      },
      xHours: {
        one: "1 heure",
        other: "{{count}} heures"
      },
      xDays: {
        one: "1 jour",
        other: "{{count}} jours"
      },
      aboutXWeeks: {
        one: "environ 1 semaine",
        other: "environ {{count}} semaines"
      },
      xWeeks: {
        one: "1 semaine",
        other: "{{count}} semaines"
      },
      aboutXMonths: {
        one: "environ 1 mois",
        other: "environ {{count}} mois"
      },
      xMonths: {
        one: "1 mois",
        other: "{{count}} mois"
      },
      aboutXYears: {
        one: "environ 1 an",
        other: "environ {{count}} ans"
      },
      xYears: {
        one: "1 an",
        other: "{{count}} ans"
      },
      overXYears: {
        one: "plus d’un an",
        other: "plus de {{count}} ans"
      },
      almostXYears: {
        one: "presqu’un an",
        other: "presque {{count}} ans"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const form = formatDistanceLocale[token];
      if (typeof form === "string") {
        result = form;
      } else if (count === 1) {
        result = form.one;
      } else {
        result = form.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "dans " + result;
        } else {
          return "il y a " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/fr/_lib/formatLong.js
var require_formatLong34 = __commonJS({
  "node_modules/date-fns/locale/fr/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'à' {{time}}",
      long: "{{date}} 'à' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/fr/_lib/formatRelative.js
var require_formatRelative29 = __commonJS({
  "node_modules/date-fns/locale/fr/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'dernier à' p",
      yesterday: "'hier à' p",
      today: "'aujourd’hui à' p",
      tomorrow: "'demain à' p'",
      nextWeek: "eeee 'prochain à' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/fr/_lib/localize.js
var require_localize29 = __commonJS({
  "node_modules/date-fns/locale/fr/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["av. J.-C", "ap. J.-C"],
      abbreviated: ["av. J.-C", "ap. J.-C"],
      wide: ["avant Jésus-Christ", "après Jésus-Christ"]
    };
    var quarterValues = {
      narrow: ["T1", "T2", "T3", "T4"],
      abbreviated: ["1er trim.", "2ème trim.", "3ème trim.", "4ème trim."],
      wide: ["1er trimestre", "2ème trimestre", "3ème trimestre", "4ème trimestre"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "janv.",
        "févr.",
        "mars",
        "avr.",
        "mai",
        "juin",
        "juil.",
        "août",
        "sept.",
        "oct.",
        "nov.",
        "déc."
      ],
      wide: [
        "janvier",
        "février",
        "mars",
        "avril",
        "mai",
        "juin",
        "juillet",
        "août",
        "septembre",
        "octobre",
        "novembre",
        "décembre"
      ]
    };
    var dayValues = {
      narrow: ["D", "L", "M", "M", "J", "V", "S"],
      short: ["di", "lu", "ma", "me", "je", "ve", "sa"],
      abbreviated: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
      wide: [
        "dimanche",
        "lundi",
        "mardi",
        "mercredi",
        "jeudi",
        "vendredi",
        "samedi"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "mat.",
        afternoon: "ap.m.",
        evening: "soir",
        night: "mat."
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "matin",
        afternoon: "après-midi",
        evening: "soir",
        night: "matin"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "du matin",
        afternoon: "de l’après-midi",
        evening: "du soir",
        night: "du matin"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = options == null ? void 0 : options.unit;
      if (number === 0)
        return "0";
      const feminineUnits = ["year", "week", "hour", "minute", "second"];
      let suffix;
      if (number === 1) {
        suffix = unit && feminineUnits.includes(unit) ? "ère" : "er";
      } else {
        suffix = "ème";
      }
      return number + suffix;
    };
    var LONG_MONTHS_TOKENS = ["MMM", "MMMM"];
    var localize = exports.localize = {
      preprocessor: (date, parts) => {
        if (date.getDate() === 1)
          return parts;
        const hasLongMonthToken = parts.some(
          (part) => part.isToken && LONG_MONTHS_TOKENS.includes(part.value)
        );
        if (!hasLongMonthToken)
          return parts;
        return parts.map(
          (part) => part.isToken && part.value === "do" ? { isToken: true, value: "d" } : part
        );
      },
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/fr/_lib/match.js
var require_match28 = __commonJS({
  "node_modules/date-fns/locale/fr/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(ième|ère|ème|er|e)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
      abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
      wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
    };
    var parseEraPatterns = {
      any: [/^av/i, /^ap/i]
    };
    var matchQuarterPatterns = {
      narrow: /^T?[1234]/i,
      abbreviated: /^[1234](er|ème|e)? trim\.?/i,
      wide: /^[1234](er|ème|e)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
      wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^av/i,
        /^ma/i,
        /^juin/i,
        /^juil/i,
        /^ao/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[lmjvsd]/i,
      short: /^(di|lu|ma|me|je|ve|sa)/i,
      abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
      wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
      any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^min/i,
        noon: /^mid/i,
        morning: /mat/i,
        afternoon: /ap/i,
        evening: /soir/i,
        night: /nuit/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/fr.js
var require_fr = __commonJS({
  "node_modules/date-fns/locale/fr.js"(exports) {
    "use strict";
    exports.fr = void 0;
    var _index = require_formatDistance30();
    var _index2 = require_formatLong34();
    var _index3 = require_formatRelative29();
    var _index4 = require_localize29();
    var _index5 = require_match28();
    var fr = exports.fr = {
      code: "fr",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/fr-CA/_lib/formatLong.js
var require_formatLong35 = __commonJS({
  "node_modules/date-fns/locale/fr-CA/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "yy-MM-dd"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'à' {{time}}",
      long: "{{date}} 'à' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/fr-CA.js
var require_fr_CA = __commonJS({
  "node_modules/date-fns/locale/fr-CA.js"(exports) {
    "use strict";
    exports.frCA = void 0;
    var _index = require_formatDistance30();
    var _index2 = require_formatRelative29();
    var _index3 = require_localize29();
    var _index4 = require_match28();
    var _index5 = require_formatLong35();
    var frCA = exports.frCA = {
      code: "fr-CA",
      formatDistance: _index.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index2.formatRelative,
      localize: _index3.localize,
      match: _index4.match,
      // Unique for fr-CA
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/fr-CH/_lib/formatLong.js
var require_formatLong36 = __commonJS({
  "node_modules/date-fns/locale/fr-CH/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'à' {{time}}",
      long: "{{date}} 'à' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/fr-CH/_lib/formatRelative.js
var require_formatRelative30 = __commonJS({
  "node_modules/date-fns/locale/fr-CH/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'la semaine dernière à' p",
      yesterday: "'hier à' p",
      today: "'aujourd’hui à' p",
      tomorrow: "'demain à' p'",
      nextWeek: "eeee 'la semaine prochaine à' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/fr-CH.js
var require_fr_CH = __commonJS({
  "node_modules/date-fns/locale/fr-CH.js"(exports) {
    "use strict";
    exports.frCH = void 0;
    var _index = require_formatDistance30();
    var _index2 = require_localize29();
    var _index3 = require_match28();
    var _index4 = require_formatLong36();
    var _index5 = require_formatRelative30();
    var frCH = exports.frCH = {
      code: "fr-CH",
      formatDistance: _index.formatDistance,
      formatLong: _index4.formatLong,
      formatRelative: _index5.formatRelative,
      localize: _index2.localize,
      match: _index3.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/fy/_lib/formatDistance.js
var require_formatDistance31 = __commonJS({
  "node_modules/date-fns/locale/fy/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "minder as 1 sekonde",
        other: "minder as {{count}} sekonden"
      },
      xSeconds: {
        one: "1 sekonde",
        other: "{{count}} sekonden"
      },
      halfAMinute: "oardel minút",
      lessThanXMinutes: {
        one: "minder as 1 minút",
        other: "minder as {{count}} minuten"
      },
      xMinutes: {
        one: "1 minút",
        other: "{{count}} minuten"
      },
      aboutXHours: {
        one: "sawat 1 oere",
        other: "sawat {{count}} oere"
      },
      xHours: {
        one: "1 oere",
        other: "{{count}} oere"
      },
      xDays: {
        one: "1 dei",
        other: "{{count}} dagen"
      },
      aboutXWeeks: {
        one: "sawat 1 wike",
        other: "sawat {{count}} wiken"
      },
      xWeeks: {
        one: "1 wike",
        other: "{{count}} wiken"
      },
      aboutXMonths: {
        one: "sawat 1 moanne",
        other: "sawat {{count}} moannen"
      },
      xMonths: {
        one: "1 moanne",
        other: "{{count}} moannen"
      },
      aboutXYears: {
        one: "sawat 1 jier",
        other: "sawat {{count}} jier"
      },
      xYears: {
        one: "1 jier",
        other: "{{count}} jier"
      },
      overXYears: {
        one: "mear as 1 jier",
        other: "mear as {{count}}s jier"
      },
      almostXYears: {
        one: "hast 1 jier",
        other: "hast {{count}} jier"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "oer " + result;
        } else {
          return result + " lyn";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/fy/_lib/formatLong.js
var require_formatLong37 = __commonJS({
  "node_modules/date-fns/locale/fy/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd-MM-y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/fy/_lib/formatRelative.js
var require_formatRelative31 = __commonJS({
  "node_modules/date-fns/locale/fy/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'ôfrûne' eeee 'om' p",
      yesterday: "'juster om' p",
      today: "'hjoed om' p",
      tomorrow: "'moarn om' p",
      nextWeek: "eeee 'om' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/fy/_lib/localize.js
var require_localize30 = __commonJS({
  "node_modules/date-fns/locale/fy/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["f.K.", "n.K."],
      abbreviated: ["f.Kr.", "n.Kr."],
      wide: ["foar Kristus", "nei Kristus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1e fearnsjier", "2e fearnsjier", "3e fearnsjier", "4e fearnsjier"]
    };
    var monthValues = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "jan.",
        "feb.",
        "mrt.",
        "apr.",
        "mai.",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "des."
      ],
      wide: [
        "jannewaris",
        "febrewaris",
        "maart",
        "april",
        "maaie",
        "juny",
        "july",
        "augustus",
        "septimber",
        "oktober",
        "novimber",
        "desimber"
      ]
    };
    var dayValues = {
      narrow: ["s", "m", "t", "w", "t", "f", "s"],
      short: ["si", "mo", "ti", "wo", "to", "fr", "so"],
      abbreviated: ["snein", "moa", "tii", "woa", "ton", "fre", "sneon"],
      wide: [
        "snein",
        "moandei",
        "tiisdei",
        "woansdei",
        "tongersdei",
        "freed",
        "sneon"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "middei",
        morning: "moarns",
        afternoon: "middeis",
        evening: "jûns",
        night: "nachts"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "middei",
        morning: "moarns",
        afternoon: "middeis",
        evening: "jûns",
        night: "nachts"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "middei",
        morning: "moarns",
        afternoon: "middeis",
        evening: "jûns",
        night: "nachts"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "e";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/fy/_lib/match.js
var require_match29 = __commonJS({
  "node_modules/date-fns/locale/fy/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)e?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([fn]\.? ?K\.?)/,
      abbreviated: /^([fn]\. ?Kr\.?)/,
      wide: /^((foar|nei) Kristus)/
    };
    var parseEraPatterns = {
      any: [/^f/, /^n/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234]e fearnsjier/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mrt.|apr.|mai.|jun.|jul.|aug.|sep.|okt.|nov.|des.)/i,
      wide: /^(jannewaris|febrewaris|maart|april|maaie|juny|july|augustus|septimber|oktober|novimber|desimber)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^jan/i,
        /^feb/i,
        /^m(r|a)/i,
        /^apr/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^sep/i,
        /^okt/i,
        /^nov/i,
        /^des/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(si|mo|ti|wo|to|fr|so)/i,
      abbreviated: /^(snein|moa|tii|woa|ton|fre|sneon)/i,
      wide: /^(snein|moandei|tiisdei|woansdei|tongersdei|freed|sneon)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^sn/i, /^mo/i, /^ti/i, /^wo/i, /^to/i, /^fr/i, /^sn/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|middernacht|middeis|moarns|middei|jûns|nachts)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^middei/i,
        morning: /moarns/i,
        afternoon: /^middeis/i,
        evening: /jûns/i,
        night: /nachts/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/fy.js
var require_fy = __commonJS({
  "node_modules/date-fns/locale/fy.js"(exports) {
    "use strict";
    exports.fy = void 0;
    var _index = require_formatDistance31();
    var _index2 = require_formatLong37();
    var _index3 = require_formatRelative31();
    var _index4 = require_localize30();
    var _index5 = require_match29();
    var fy = exports.fy = {
      code: "fy",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/gd/_lib/formatDistance.js
var require_formatDistance32 = __commonJS({
  "node_modules/date-fns/locale/gd/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "nas lugha na diog",
        other: "nas lugha na {{count}} diogan"
      },
      xSeconds: {
        one: "1 diog",
        two: "2 dhiog",
        twenty: "20 diog",
        other: "{{count}} diogan"
      },
      halfAMinute: "leth mhionaid",
      lessThanXMinutes: {
        one: "nas lugha na mionaid",
        other: "nas lugha na {{count}} mionaidean"
      },
      xMinutes: {
        one: "1 mionaid",
        two: "2 mhionaid",
        twenty: "20 mionaid",
        other: "{{count}} mionaidean"
      },
      aboutXHours: {
        one: "mu uair de thìde",
        other: "mu {{count}} uairean de thìde"
      },
      xHours: {
        one: "1 uair de thìde",
        two: "2 uair de thìde",
        twenty: "20 uair de thìde",
        other: "{{count}} uairean de thìde"
      },
      xDays: {
        one: "1 là",
        other: "{{count}} là"
      },
      aboutXWeeks: {
        one: "mu 1 seachdain",
        other: "mu {{count}} seachdainean"
      },
      xWeeks: {
        one: "1 seachdain",
        other: "{{count}} seachdainean"
      },
      aboutXMonths: {
        one: "mu mhìos",
        other: "mu {{count}} mìosan"
      },
      xMonths: {
        one: "1 mìos",
        other: "{{count}} mìosan"
      },
      aboutXYears: {
        one: "mu bhliadhna",
        other: "mu {{count}} bliadhnaichean"
      },
      xYears: {
        one: "1 bhliadhna",
        other: "{{count}} bliadhna"
      },
      overXYears: {
        one: "còrr is bliadhna",
        other: "còrr is {{count}} bliadhnaichean"
      },
      almostXYears: {
        one: "cha mhòr bliadhna",
        other: "cha mhòr {{count}} bliadhnaichean"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2 && !!tokenValue.two) {
        result = tokenValue.two;
      } else if (count === 20 && !!tokenValue.twenty) {
        result = tokenValue.twenty;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "ann an " + result;
        } else {
          return "o chionn " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/gd/_lib/formatLong.js
var require_formatLong38 = __commonJS({
  "node_modules/date-fns/locale/gd/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'aig' {{time}}",
      long: "{{date}} 'aig' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/gd/_lib/formatRelative.js
var require_formatRelative32 = __commonJS({
  "node_modules/date-fns/locale/gd/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'mu dheireadh' eeee 'aig' p",
      //FIX
      yesterday: "'an-dè aig' p",
      today: "'an-diugh aig' p",
      tomorrow: "'a-màireach aig' p",
      nextWeek: "eeee 'aig' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/gd/_lib/localize.js
var require_localize31 = __commonJS({
  "node_modules/date-fns/locale/gd/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["R", "A"],
      abbreviated: ["RC", "AD"],
      wide: ["ro Chrìosta", "anno domini"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["C1", "C2", "C3", "C4"],
      wide: [
        "a' chiad chairteal",
        "an dàrna cairteal",
        "an treas cairteal",
        "an ceathramh cairteal"
      ]
    };
    var monthValues = {
      narrow: ["F", "G", "M", "G", "C", "Ò", "I", "L", "S", "D", "S", "D"],
      abbreviated: [
        "Faoi",
        "Gear",
        "Màrt",
        "Gibl",
        "Cèit",
        "Ògmh",
        "Iuch",
        "Lùn",
        "Sult",
        "Dàmh",
        "Samh",
        "Dùbh"
      ],
      wide: [
        "Am Faoilleach",
        "An Gearran",
        "Am Màrt",
        "An Giblean",
        "An Cèitean",
        "An t-Ògmhios",
        "An t-Iuchar",
        "An Lùnastal",
        "An t-Sultain",
        "An Dàmhair",
        "An t-Samhain",
        "An Dùbhlachd"
      ]
    };
    var dayValues = {
      narrow: ["D", "L", "M", "C", "A", "H", "S"],
      short: ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"],
      abbreviated: ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
      wide: [
        "Didòmhnaich",
        "Diluain",
        "Dimàirt",
        "Diciadain",
        "Diardaoin",
        "Dihaoine",
        "Disathairne"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "m",
        pm: "f",
        midnight: "m.o.",
        noon: "m.l.",
        morning: "madainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "oidhche"
      },
      abbreviated: {
        am: "M.",
        pm: "F.",
        midnight: "meadhan oidhche",
        noon: "meadhan là",
        morning: "madainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "oidhche"
      },
      wide: {
        am: "m.",
        pm: "f.",
        midnight: "meadhan oidhche",
        noon: "meadhan là",
        morning: "madainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "oidhche"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "m",
        pm: "f",
        midnight: "m.o.",
        noon: "m.l.",
        morning: "sa mhadainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "air an oidhche"
      },
      abbreviated: {
        am: "M.",
        pm: "F.",
        midnight: "meadhan oidhche",
        noon: "meadhan là",
        morning: "sa mhadainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "air an oidhche"
      },
      wide: {
        am: "m.",
        pm: "f.",
        midnight: "meadhan oidhche",
        noon: "meadhan là",
        morning: "sa mhadainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "air an oidhche"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      const number = Number(dirtyNumber);
      const rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + "d";
          case 2:
            return number + "na";
        }
      }
      if (rem100 === 12) {
        return number + "na";
      }
      return number + "mh";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/gd/_lib/match.js
var require_match30 = __commonJS({
  "node_modules/date-fns/locale/gd/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(d|na|tr|mh)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(r|a)/i,
      abbreviated: /^(r\.?\s?c\.?|r\.?\s?a\.?\s?c\.?|a\.?\s?d\.?|a\.?\s?c\.?)/i,
      wide: /^(ro Chrìosta|ron aois choitchinn|anno domini|aois choitcheann)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^c[1234]/i,
      wide: /^[1234](cd|na|tr|mh)? cairteal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[fgmcòilsd]/i,
      abbreviated: /^(faoi|gear|màrt|gibl|cèit|ògmh|iuch|lùn|sult|dàmh|samh|dùbh)/i,
      wide: /^(am faoilleach|an gearran|am màrt|an giblean|an cèitean|an t-Ògmhios|an t-Iuchar|an lùnastal|an t-Sultain|an dàmhair|an t-Samhain|an dùbhlachd)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^f/i,
        /^g/i,
        /^m/i,
        /^g/i,
        /^c/i,
        /^ò/i,
        /^i/i,
        /^l/i,
        /^s/i,
        /^d/i,
        /^s/i,
        /^d/i
      ],
      any: [
        /^fa/i,
        /^ge/i,
        /^mà/i,
        /^gi/i,
        /^c/i,
        /^ò/i,
        /^i/i,
        /^l/i,
        /^su/i,
        /^d/i,
        /^sa/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dlmcahs]/i,
      short: /^(dò|lu|mà|ci|ar|ha|sa)/i,
      abbreviated: /^(did|dil|dim|dic|dia|dih|dis)/i,
      wide: /^(didòmhnaich|diluain|dimàirt|diciadain|diardaoin|dihaoine|disathairne)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i],
      any: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
      any: /^([ap]\.?\s?m\.?|meadhan oidhche|meadhan là|(san|aig) (madainn|feasgar|feasgar|oidhche))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^m/i,
        pm: /^f/i,
        midnight: /^meadhan oidhche/i,
        noon: /^meadhan là/i,
        morning: /sa mhadainn/i,
        afternoon: /feasgar/i,
        evening: /feasgar/i,
        night: /air an oidhche/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/gd.js
var require_gd = __commonJS({
  "node_modules/date-fns/locale/gd.js"(exports) {
    "use strict";
    exports.gd = void 0;
    var _index = require_formatDistance32();
    var _index2 = require_formatLong38();
    var _index3 = require_formatRelative32();
    var _index4 = require_localize31();
    var _index5 = require_match30();
    var gd = exports.gd = {
      code: "gd",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/gl/_lib/formatDistance.js
var require_formatDistance33 = __commonJS({
  "node_modules/date-fns/locale/gl/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "menos dun segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "medio minuto",
      lessThanXMinutes: {
        one: "menos dun minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "arredor dunha hora",
        other: "arredor de {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 día",
        other: "{{count}} días"
      },
      aboutXWeeks: {
        one: "arredor dunha semana",
        other: "arredor de {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "arredor de 1 mes",
        other: "arredor de {{count}} meses"
      },
      xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "arredor dun ano",
        other: "arredor de {{count}} anos"
      },
      xYears: {
        one: "1 ano",
        other: "{{count}} anos"
      },
      overXYears: {
        one: "máis dun ano",
        other: "máis de {{count}} anos"
      },
      almostXYears: {
        one: "case un ano",
        other: "case {{count}} anos"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "en " + result;
        } else {
          return "hai " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/gl/_lib/formatLong.js
var require_formatLong39 = __commonJS({
  "node_modules/date-fns/locale/gl/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d 'de' MMMM y",
      long: "d 'de' MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'ás' {{time}}",
      long: "{{date}} 'ás' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/gl/_lib/formatRelative.js
var require_formatRelative33 = __commonJS({
  "node_modules/date-fns/locale/gl/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'o' eeee 'pasado á' LT",
      yesterday: "'onte á' p",
      today: "'hoxe á' p",
      tomorrow: "'mañá á' p",
      nextWeek: "eeee 'á' p",
      other: "P"
    };
    var formatRelativeLocalePlural = {
      lastWeek: "'o' eeee 'pasado ás' p",
      yesterday: "'onte ás' p",
      today: "'hoxe ás' p",
      tomorrow: "'mañá ás' p",
      nextWeek: "eeee 'ás' p",
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      if (date.getHours() !== 1) {
        return formatRelativeLocalePlural[token];
      }
      return formatRelativeLocale[token];
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/gl/_lib/localize.js
var require_localize32 = __commonJS({
  "node_modules/date-fns/locale/gl/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["AC", "DC"],
      abbreviated: ["AC", "DC"],
      wide: ["antes de cristo", "despois de cristo"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1º trimestre", "2º trimestre", "3º trimestre", "4º trimestre"]
    };
    var monthValues = {
      narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "xan",
        "feb",
        "mar",
        "abr",
        "mai",
        "xun",
        "xul",
        "ago",
        "set",
        "out",
        "nov",
        "dec"
      ],
      wide: [
        "xaneiro",
        "febreiro",
        "marzo",
        "abril",
        "maio",
        "xuño",
        "xullo",
        "agosto",
        "setembro",
        "outubro",
        "novembro",
        "decembro"
      ]
    };
    var dayValues = {
      narrow: ["d", "l", "m", "m", "j", "v", "s"],
      short: ["do", "lu", "ma", "me", "xo", "ve", "sa"],
      abbreviated: ["dom", "lun", "mar", "mer", "xov", "ven", "sab"],
      wide: ["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "mañá",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoite",
        noon: "mediodía",
        morning: "mañá",
        afternoon: "tarde",
        evening: "tardiña",
        night: "noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoite",
        noon: "mediodía",
        morning: "mañá",
        afternoon: "tarde",
        evening: "tardiña",
        night: "noite"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "da mañá",
        afternoon: "da tarde",
        evening: "da tardiña",
        night: "da noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoite",
        noon: "mediodía",
        morning: "da mañá",
        afternoon: "da tarde",
        evening: "da tardiña",
        night: "da noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoite",
        noon: "mediodía",
        morning: "da mañá",
        afternoon: "da tarde",
        evening: "da tardiña",
        night: "da noite"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "º";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/gl/_lib/match.js
var require_match31 = __commonJS({
  "node_modules/date-fns/locale/gl/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes da era com[uú]n|despois de cristo|era com[uú]n)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [
        /^(antes de cristo|antes da era com[uú]n)/i,
        /^(despois de cristo|era com[uú]n)/i
      ]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[xfmasond]/i,
      abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
      wide: /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^x/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^x/i,
        /^x/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^xan/i,
        /^feb/i,
        /^mar/i,
        /^abr/i,
        /^mai/i,
        /^xun/i,
        /^xul/i,
        /^ago/i,
        /^set/i,
        /^out/i,
        /^nov/i,
        /^dec/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dlmxvs]/i,
      short: /^(do|lu|ma|me|xo|ve|sa)/i,
      abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
      wide: /^(domingo|luns|martes|m[eé]rcores|xoves|venres|s[áa]bado)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^x/i, /^v/i, /^s/i],
      any: [/^do/i, /^lu/i, /^ma/i, /^me/i, /^xo/i, /^ve/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(da|[aá]s) (mañ[aá]|tarde|noite))/i,
      any: /^([ap]\.?\s?m\.?|medianoite|mediod[ií]a|(da|[aá]s) (mañ[aá]|tarde|noite))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /mañ[aá]/i,
        afternoon: /tarde/i,
        evening: /tardiña/i,
        night: /noite/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/gl.js
var require_gl = __commonJS({
  "node_modules/date-fns/locale/gl.js"(exports) {
    "use strict";
    exports.gl = void 0;
    var _index = require_formatDistance33();
    var _index2 = require_formatLong39();
    var _index3 = require_formatRelative33();
    var _index4 = require_localize32();
    var _index5 = require_match31();
    var gl = exports.gl = {
      code: "gl",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/gu/_lib/formatDistance.js
var require_formatDistance34 = __commonJS({
  "node_modules/date-fns/locale/gu/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "હમણાં",
        // CLDR #1461
        other: "​આશરે {{count}} સેકંડ"
      },
      xSeconds: {
        one: "1 સેકંડ",
        other: "{{count}} સેકંડ"
      },
      halfAMinute: "અડધી મિનિટ",
      lessThanXMinutes: {
        one: "આ મિનિટ",
        // CLDR #1448
        other: "​આશરે {{count}} મિનિટ"
      },
      xMinutes: {
        one: "1 મિનિટ",
        other: "{{count}} મિનિટ"
      },
      aboutXHours: {
        one: "​આશરે 1 કલાક",
        other: "​આશરે {{count}} કલાક"
      },
      xHours: {
        one: "1 કલાક",
        other: "{{count}} કલાક"
      },
      xDays: {
        one: "1 દિવસ",
        other: "{{count}} દિવસ"
      },
      aboutXWeeks: {
        one: "આશરે 1 અઠવાડિયું",
        other: "આશરે {{count}} અઠવાડિયા"
      },
      xWeeks: {
        one: "1 અઠવાડિયું",
        other: "{{count}} અઠવાડિયા"
      },
      aboutXMonths: {
        one: "આશરે 1 મહિનો",
        other: "આશરે {{count}} મહિના"
      },
      xMonths: {
        one: "1 મહિનો",
        other: "{{count}} મહિના"
      },
      aboutXYears: {
        one: "આશરે 1 વર્ષ",
        other: "આશરે {{count}} વર્ષ"
      },
      xYears: {
        one: "1 વર્ષ",
        other: "{{count}} વર્ષ"
      },
      overXYears: {
        one: "1 વર્ષથી વધુ",
        other: "{{count}} વર્ષથી વધુ"
      },
      almostXYears: {
        one: "લગભગ 1 વર્ષ",
        other: "લગભગ {{count}} વર્ષ"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "માં";
        } else {
          return result + " પહેલાં";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/gu/_lib/formatLong.js
var require_formatLong40 = __commonJS({
  "node_modules/date-fns/locale/gu/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM, y",
      // CLDR #1825
      long: "d MMMM, y",
      // CLDR #1826
      medium: "d MMM, y",
      // CLDR #1827
      short: "d/M/yy"
      // CLDR #1828
    };
    var timeFormats = {
      full: "hh:mm:ss a zzzz",
      // CLDR #1829
      long: "hh:mm:ss a z",
      // CLDR #1830
      medium: "hh:mm:ss a",
      // CLDR #1831
      short: "hh:mm a"
      // CLDR #1832
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      // CLDR #1833
      long: "{{date}} {{time}}",
      // CLDR #1834
      medium: "{{date}} {{time}}",
      // CLDR #1835
      short: "{{date}} {{time}}"
      // CLDR #1836
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/gu/_lib/formatRelative.js
var require_formatRelative34 = __commonJS({
  "node_modules/date-fns/locale/gu/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'પાછલા' eeee p",
      // CLDR #1384
      yesterday: "'ગઈકાલે' p",
      // CLDR #1409
      today: "'આજે' p",
      // CLDR #1410
      tomorrow: "'આવતીકાલે' p",
      // CLDR #1411
      nextWeek: "eeee p",
      // CLDR #1386
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/gu/_lib/localize.js
var require_localize33 = __commonJS({
  "node_modules/date-fns/locale/gu/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ઈસપૂ", "ઈસ"],
      abbreviated: ["ઈ.સ.પૂર્વે", "ઈ.સ."],
      wide: ["ઈસવીસન પૂર્વે", "ઈસવીસન"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1લો ત્રિમાસ", "2જો ત્રિમાસ", "3જો ત્રિમાસ", "4થો ત્રિમાસ"]
    };
    var monthValues = {
      narrow: ["જા", "ફે", "મા", "એ", "મે", "જૂ", "જુ", "ઓ", "સ", "ઓ", "ન", "ડિ"],
      abbreviated: [
        "જાન્યુ",
        "ફેબ્રુ",
        "માર્ચ",
        "એપ્રિલ",
        "મે",
        "જૂન",
        "જુલાઈ",
        "ઑગસ્ટ",
        "સપ્ટે",
        "ઓક્ટો",
        "નવે",
        "ડિસે"
      ],
      wide: [
        "જાન્યુઆરી",
        "ફેબ્રુઆરી",
        "માર્ચ",
        "એપ્રિલ",
        "મે",
        "જૂન",
        "જુલાઇ",
        "ઓગસ્ટ",
        "સપ્ટેમ્બર",
        "ઓક્ટોબર",
        "નવેમ્બર",
        "ડિસેમ્બર"
      ]
    };
    var dayValues = {
      narrow: ["ર", "સો", "મં", "બુ", "ગુ", "શુ", "શ"],
      short: ["ર", "સો", "મં", "બુ", "ગુ", "શુ", "શ"],
      abbreviated: ["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"],
      wide: [
        "રવિવાર",
        "સોમવાર",
        "મંગળવાર",
        "બુધવાર",
        "ગુરુવાર",
        "શુક્રવાર",
        "શનિવાર"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "મ.રાત્રિ",
        noon: "બ.",
        morning: "સવારે",
        afternoon: "બપોરે",
        evening: "સાંજે",
        night: "રાત્રે"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "​મધ્યરાત્રિ",
        noon: "બપોરે",
        morning: "સવારે",
        afternoon: "બપોરે",
        evening: "સાંજે",
        night: "રાત્રે"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "​મધ્યરાત્રિ",
        noon: "બપોરે",
        morning: "સવારે",
        afternoon: "બપોરે",
        evening: "સાંજે",
        night: "રાત્રે"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "મ.રાત્રિ",
        noon: "બપોરે",
        morning: "સવારે",
        afternoon: "બપોરે",
        evening: "સાંજે",
        night: "રાત્રે"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "મધ્યરાત્રિ",
        noon: "બપોરે",
        morning: "સવારે",
        afternoon: "બપોરે",
        evening: "સાંજે",
        night: "રાત્રે"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "​મધ્યરાત્રિ",
        noon: "બપોરે",
        morning: "સવારે",
        afternoon: "બપોરે",
        evening: "સાંજે",
        night: "રાત્રે"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/gu/_lib/match.js
var require_match32 = __commonJS({
  "node_modules/date-fns/locale/gu/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(લ|જ|થ|ઠ્ઠ|મ)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ઈસપૂ|ઈસ)/i,
      abbreviated: /^(ઈ\.સ\.પૂર્વે|ઈ\.સ\.)/i,
      wide: /^(ઈસવીસન\sપૂર્વે|ઈસવીસન)/i
    };
    var parseEraPatterns = {
      any: [/^ઈસપૂ/i, /^ઈસ/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](લો|જો|થો)? ત્રિમાસ/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[જાફેમાએમેજૂજુઓસઓનડિ]/i,
      abbreviated: /^(જાન્યુ|ફેબ્રુ|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઈ|ઑગસ્ટ|સપ્ટે|ઓક્ટો|નવે|ડિસે)/i,
      wide: /^(જાન્યુઆરી|ફેબ્રુઆરી|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઇ|ઓગસ્ટ|સપ્ટેમ્બર|ઓક્ટોબર|નવેમ્બર|ડિસેમ્બર)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^જા/i,
        /^ફે/i,
        /^મા/i,
        /^એ/i,
        /^મે/i,
        /^જૂ/i,
        /^જુ/i,
        /^ઑગ/i,
        /^સ/i,
        /^ઓક્ટો/i,
        /^ન/i,
        /^ડિ/i
      ],
      any: [
        /^જા/i,
        /^ફે/i,
        /^મા/i,
        /^એ/i,
        /^મે/i,
        /^જૂ/i,
        /^જુ/i,
        /^ઑગ/i,
        /^સ/i,
        /^ઓક્ટો/i,
        /^ન/i,
        /^ડિ/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
      short: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
      abbreviated: /^(રવિ|સોમ|મંગળ|બુધ|ગુરુ|શુક્ર|શનિ)/i,
      wide: /^(રવિવાર|સોમવાર|મંગળવાર|બુધવાર|ગુરુવાર|શુક્રવાર|શનિવાર)/i
    };
    var parseDayPatterns = {
      narrow: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i],
      any: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|મ\.?|સ|બ|સાં|રા)/i,
      any: /^(a|p|મ\.?|સ|બ|સાં|રા)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^મ\.?/i,
        noon: /^બ/i,
        morning: /સ/i,
        afternoon: /બ/i,
        evening: /સાં/i,
        night: /રા/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/gu.js
var require_gu = __commonJS({
  "node_modules/date-fns/locale/gu.js"(exports) {
    "use strict";
    exports.gu = void 0;
    var _index = require_formatDistance34();
    var _index2 = require_formatLong40();
    var _index3 = require_formatRelative34();
    var _index4 = require_localize33();
    var _index5 = require_match32();
    var gu = exports.gu = {
      code: "gu",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/he/_lib/formatDistance.js
var require_formatDistance35 = __commonJS({
  "node_modules/date-fns/locale/he/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "פחות משנייה",
        two: "פחות משתי שניות",
        other: "פחות מ־{{count}} שניות"
      },
      xSeconds: {
        one: "שנייה",
        two: "שתי שניות",
        other: "{{count}} שניות"
      },
      halfAMinute: "חצי דקה",
      lessThanXMinutes: {
        one: "פחות מדקה",
        two: "פחות משתי דקות",
        other: "פחות מ־{{count}} דקות"
      },
      xMinutes: {
        one: "דקה",
        two: "שתי דקות",
        other: "{{count}} דקות"
      },
      aboutXHours: {
        one: "כשעה",
        two: "כשעתיים",
        other: "כ־{{count}} שעות"
      },
      xHours: {
        one: "שעה",
        two: "שעתיים",
        other: "{{count}} שעות"
      },
      xDays: {
        one: "יום",
        two: "יומיים",
        other: "{{count}} ימים"
      },
      aboutXWeeks: {
        one: "כשבוע",
        two: "כשבועיים",
        other: "כ־{{count}} שבועות"
      },
      xWeeks: {
        one: "שבוע",
        two: "שבועיים",
        other: "{{count}} שבועות"
      },
      aboutXMonths: {
        one: "כחודש",
        two: "כחודשיים",
        other: "כ־{{count}} חודשים"
      },
      xMonths: {
        one: "חודש",
        two: "חודשיים",
        other: "{{count}} חודשים"
      },
      aboutXYears: {
        one: "כשנה",
        two: "כשנתיים",
        other: "כ־{{count}} שנים"
      },
      xYears: {
        one: "שנה",
        two: "שנתיים",
        other: "{{count}} שנים"
      },
      overXYears: {
        one: "יותר משנה",
        two: "יותר משנתיים",
        other: "יותר מ־{{count}} שנים"
      },
      almostXYears: {
        one: "כמעט שנה",
        two: "כמעט שנתיים",
        other: "כמעט {{count}} שנים"
      }
    };
    var formatDistance = (token, count, options) => {
      if (token === "xDays" && (options == null ? void 0 : options.addSuffix) && count <= 2) {
        if (options.comparison && options.comparison > 0) {
          return count === 1 ? "מחר" : "מחרתיים";
        }
        return count === 1 ? "אתמול" : "שלשום";
      }
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2) {
        result = tokenValue.two;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "בעוד " + result;
        } else {
          return "לפני " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/he/_lib/formatLong.js
var require_formatLong41 = __commonJS({
  "node_modules/date-fns/locale/he/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d בMMMM y",
      long: "d בMMMM y",
      medium: "d בMMM y",
      short: "d.M.y"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'בשעה' {{time}}",
      long: "{{date}} 'בשעה' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/he/_lib/formatRelative.js
var require_formatRelative35 = __commonJS({
  "node_modules/date-fns/locale/he/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'שעבר בשעה' p",
      yesterday: "'אתמול בשעה' p",
      today: "'היום בשעה' p",
      tomorrow: "'מחר בשעה' p",
      nextWeek: "eeee 'בשעה' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/he/_lib/localize.js
var require_localize34 = __commonJS({
  "node_modules/date-fns/locale/he/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["לפנה״ס", "לספירה"],
      abbreviated: ["לפנה״ס", "לספירה"],
      wide: ["לפני הספירה", "לספירה"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["רבעון 1", "רבעון 2", "רבעון 3", "רבעון 4"]
    };
    var monthValues = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: [
        "ינו׳",
        "פבר׳",
        "מרץ",
        "אפר׳",
        "מאי",
        "יוני",
        "יולי",
        "אוג׳",
        "ספט׳",
        "אוק׳",
        "נוב׳",
        "דצמ׳"
      ],
      wide: [
        "ינואר",
        "פברואר",
        "מרץ",
        "אפריל",
        "מאי",
        "יוני",
        "יולי",
        "אוגוסט",
        "ספטמבר",
        "אוקטובר",
        "נובמבר",
        "דצמבר"
      ]
    };
    var dayValues = {
      narrow: ["א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"],
      short: ["א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"],
      abbreviated: [
        "יום א׳",
        "יום ב׳",
        "יום ג׳",
        "יום ד׳",
        "יום ה׳",
        "יום ו׳",
        "שבת"
      ],
      wide: [
        "יום ראשון",
        "יום שני",
        "יום שלישי",
        "יום רביעי",
        "יום חמישי",
        "יום שישי",
        "יום שבת"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "לפנה״צ",
        pm: "אחה״צ",
        midnight: "חצות",
        noon: "צהריים",
        morning: "בוקר",
        afternoon: "אחר הצהריים",
        evening: "ערב",
        night: "לילה"
      },
      abbreviated: {
        am: "לפנה״צ",
        pm: "אחה״צ",
        midnight: "חצות",
        noon: "צהריים",
        morning: "בוקר",
        afternoon: "אחר הצהריים",
        evening: "ערב",
        night: "לילה"
      },
      wide: {
        am: "לפנה״צ",
        pm: "אחה״צ",
        midnight: "חצות",
        noon: "צהריים",
        morning: "בוקר",
        afternoon: "אחר הצהריים",
        evening: "ערב",
        night: "לילה"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "לפנה״צ",
        pm: "אחה״צ",
        midnight: "חצות",
        noon: "צהריים",
        morning: "בבוקר",
        afternoon: "בצהריים",
        evening: "בערב",
        night: "בלילה"
      },
      abbreviated: {
        am: "לפנה״צ",
        pm: "אחה״צ",
        midnight: "חצות",
        noon: "צהריים",
        morning: "בבוקר",
        afternoon: "אחר הצהריים",
        evening: "בערב",
        night: "בלילה"
      },
      wide: {
        am: "לפנה״צ",
        pm: "אחה״צ",
        midnight: "חצות",
        noon: "צהריים",
        morning: "בבוקר",
        afternoon: "אחר הצהריים",
        evening: "בערב",
        night: "בלילה"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      if (number <= 0 || number > 10)
        return String(number);
      const unit = String(options == null ? void 0 : options.unit);
      const isFemale = ["year", "hour", "minute", "second"].indexOf(unit) >= 0;
      const male = [
        "ראשון",
        "שני",
        "שלישי",
        "רביעי",
        "חמישי",
        "שישי",
        "שביעי",
        "שמיני",
        "תשיעי",
        "עשירי"
      ];
      const female = [
        "ראשונה",
        "שנייה",
        "שלישית",
        "רביעית",
        "חמישית",
        "שישית",
        "שביעית",
        "שמינית",
        "תשיעית",
        "עשירית"
      ];
      const index = number - 1;
      return isFemale ? female[index] : male[index];
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/he/_lib/match.js
var require_match33 = __commonJS({
  "node_modules/date-fns/locale/he/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+|(ראשון|שני|שלישי|רביעי|חמישי|שישי|שביעי|שמיני|תשיעי|עשירי|ראשונה|שנייה|שלישית|רביעית|חמישית|שישית|שביעית|שמינית|תשיעית|עשירית))/i;
    var parseOrdinalNumberPattern = /^(\d+|רא|שנ|של|רב|ח|שי|שב|שמ|ת|ע)/i;
    var matchEraPatterns = {
      narrow: /^ל(ספירה|פנה״ס)/i,
      abbreviated: /^ל(ספירה|פנה״ס)/i,
      wide: /^ל(פני ה)?ספירה/i
    };
    var parseEraPatterns = {
      any: [/^לפ/i, /^לס/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^רבעון [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^\d+/i,
      abbreviated: /^(ינו|פבר|מרץ|אפר|מאי|יוני|יולי|אוג|ספט|אוק|נוב|דצמ)׳?/i,
      wide: /^(ינואר|פברואר|מרץ|אפריל|מאי|יוני|יולי|אוגוסט|ספטמבר|אוקטובר|נובמבר|דצמבר)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^1$/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
      ],
      any: [
        /^ינ/i,
        /^פ/i,
        /^מר/i,
        /^אפ/i,
        /^מא/i,
        /^יונ/i,
        /^יול/i,
        /^אוג/i,
        /^ס/i,
        /^אוק/i,
        /^נ/i,
        /^ד/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[אבגדהוש]׳/i,
      short: /^[אבגדהוש]׳/i,
      abbreviated: /^(שבת|יום (א|ב|ג|ד|ה|ו)׳)/i,
      wide: /^יום (ראשון|שני|שלישי|רביעי|חמישי|שישי|שבת)/i
    };
    var parseDayPatterns = {
      abbreviated: [/א׳$/i, /ב׳$/i, /ג׳$/i, /ד׳$/i, /ה׳$/i, /ו׳$/i, /^ש/i],
      wide: [/ן$/i, /ני$/i, /לישי$/i, /עי$/i, /מישי$/i, /שישי$/i, /ת$/i],
      any: [/^א/i, /^ב/i, /^ג/i, /^ד/i, /^ה/i, /^ו/i, /^ש/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(אחר ה|ב)?(חצות|צהריים|בוקר|ערב|לילה|אחה״צ|לפנה״צ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^לפ/i,
        pm: /^אחה/i,
        midnight: /^ח/i,
        noon: /^צ/i,
        morning: /בוקר/i,
        afternoon: /בצ|אחר/i,
        evening: /ערב/i,
        night: /לילה/i
      }
    };
    var ordinalName = ["רא", "שנ", "של", "רב", "ח", "שי", "שב", "שמ", "ת", "ע"];
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => {
          const number = parseInt(value, 10);
          return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
        }
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/he.js
var require_he = __commonJS({
  "node_modules/date-fns/locale/he.js"(exports) {
    "use strict";
    exports.he = void 0;
    var _index = require_formatDistance35();
    var _index2 = require_formatLong41();
    var _index3 = require_formatRelative35();
    var _index4 = require_localize34();
    var _index5 = require_match33();
    var he = exports.he = {
      code: "he",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/hi/_lib/localize.js
var require_localize35 = __commonJS({
  "node_modules/date-fns/locale/hi/_lib/localize.js"(exports) {
    "use strict";
    exports.localeToNumber = localeToNumber;
    exports.localize = void 0;
    exports.numberToLocale = numberToLocale;
    var _index = require_buildLocalizeFn();
    var numberValues = {
      locale: {
        1: "१",
        2: "२",
        3: "३",
        4: "४",
        5: "५",
        6: "६",
        7: "७",
        8: "८",
        9: "९",
        0: "०"
      },
      number: {
        "१": "1",
        "२": "2",
        "३": "3",
        "४": "4",
        "५": "5",
        "६": "6",
        "७": "7",
        "८": "8",
        "९": "9",
        "०": "0"
      }
    };
    var eraValues = {
      narrow: ["ईसा-पूर्व", "ईस्वी"],
      abbreviated: ["ईसा-पूर्व", "ईस्वी"],
      wide: ["ईसा-पूर्व", "ईसवी सन"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ति1", "ति2", "ति3", "ति4"],
      wide: ["पहली तिमाही", "दूसरी तिमाही", "तीसरी तिमाही", "चौथी तिमाही"]
    };
    var monthValues = {
      narrow: [
        "ज",
        "फ़",
        "मा",
        "अ",
        "मई",
        "जू",
        "जु",
        "अग",
        "सि",
        "अक्टू",
        "न",
        "दि"
      ],
      abbreviated: [
        "जन",
        "फ़र",
        "मार्च",
        "अप्रैल",
        "मई",
        "जून",
        "जुल",
        "अग",
        "सित",
        "अक्टू",
        "नव",
        "दिस"
      ],
      wide: [
        "जनवरी",
        "फ़रवरी",
        "मार्च",
        "अप्रैल",
        "मई",
        "जून",
        "जुलाई",
        "अगस्त",
        "सितंबर",
        "अक्टूबर",
        "नवंबर",
        "दिसंबर"
      ]
    };
    var dayValues = {
      narrow: ["र", "सो", "मं", "बु", "गु", "शु", "श"],
      short: ["र", "सो", "मं", "बु", "गु", "शु", "श"],
      abbreviated: ["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"],
      wide: [
        "रविवार",
        "सोमवार",
        "मंगलवार",
        "बुधवार",
        "गुरुवार",
        "शुक्रवार",
        "शनिवार"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "पूर्वाह्न",
        pm: "अपराह्न",
        midnight: "मध्यरात्रि",
        noon: "दोपहर",
        morning: "सुबह",
        afternoon: "दोपहर",
        evening: "शाम",
        night: "रात"
      },
      abbreviated: {
        am: "पूर्वाह्न",
        pm: "अपराह्न",
        midnight: "मध्यरात्रि",
        noon: "दोपहर",
        morning: "सुबह",
        afternoon: "दोपहर",
        evening: "शाम",
        night: "रात"
      },
      wide: {
        am: "पूर्वाह्न",
        pm: "अपराह्न",
        midnight: "मध्यरात्रि",
        noon: "दोपहर",
        morning: "सुबह",
        afternoon: "दोपहर",
        evening: "शाम",
        night: "रात"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "पूर्वाह्न",
        pm: "अपराह्न",
        midnight: "मध्यरात्रि",
        noon: "दोपहर",
        morning: "सुबह",
        afternoon: "दोपहर",
        evening: "शाम",
        night: "रात"
      },
      abbreviated: {
        am: "पूर्वाह्न",
        pm: "अपराह्न",
        midnight: "मध्यरात्रि",
        noon: "दोपहर",
        morning: "सुबह",
        afternoon: "दोपहर",
        evening: "शाम",
        night: "रात"
      },
      wide: {
        am: "पूर्वाह्न",
        pm: "अपराह्न",
        midnight: "मध्यरात्रि",
        noon: "दोपहर",
        morning: "सुबह",
        afternoon: "दोपहर",
        evening: "शाम",
        night: "रात"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return numberToLocale(number);
    };
    function localeToNumber(locale) {
      const enNumber = locale.toString().replace(/[१२३४५६७८९०]/g, function(match) {
        return numberValues.number[match];
      });
      return Number(enNumber);
    }
    function numberToLocale(enNumber) {
      return enNumber.toString().replace(/\d/g, function(match) {
        return numberValues.locale[match];
      });
    }
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/hi/_lib/formatDistance.js
var require_formatDistance36 = __commonJS({
  "node_modules/date-fns/locale/hi/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var _index = require_localize35();
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "१ सेकंड से कम",
        // CLDR #1310
        other: "{{count}} सेकंड से कम"
      },
      xSeconds: {
        one: "१ सेकंड",
        other: "{{count}} सेकंड"
      },
      halfAMinute: "आधा मिनट",
      lessThanXMinutes: {
        one: "१ मिनट से कम",
        other: "{{count}} मिनट से कम"
      },
      xMinutes: {
        one: "१ मिनट",
        // CLDR #1307
        other: "{{count}} मिनट"
      },
      aboutXHours: {
        one: "लगभग १ घंटा",
        other: "लगभग {{count}} घंटे"
      },
      xHours: {
        one: "१ घंटा",
        // CLDR #1304
        other: "{{count}} घंटे"
        // CLDR #4467
      },
      xDays: {
        one: "१ दिन",
        // CLDR #1286
        other: "{{count}} दिन"
      },
      aboutXWeeks: {
        one: "लगभग १ सप्ताह",
        other: "लगभग {{count}} सप्ताह"
      },
      xWeeks: {
        one: "१ सप्ताह",
        other: "{{count}} सप्ताह"
      },
      aboutXMonths: {
        one: "लगभग १ महीना",
        other: "लगभग {{count}} महीने"
      },
      xMonths: {
        one: "१ महीना",
        other: "{{count}} महीने"
      },
      aboutXYears: {
        one: "लगभग १ वर्ष",
        other: "लगभग {{count}} वर्ष"
        // CLDR #4823
      },
      xYears: {
        one: "१ वर्ष",
        other: "{{count}} वर्ष"
      },
      overXYears: {
        one: "१ वर्ष से अधिक",
        other: "{{count}} वर्ष से अधिक"
      },
      almostXYears: {
        one: "लगभग १ वर्ष",
        other: "लगभग {{count}} वर्ष"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace(
          "{{count}}",
          (0, _index.numberToLocale)(count)
        );
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "मे ";
        } else {
          return result + " पहले";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/hi/_lib/formatLong.js
var require_formatLong42 = __commonJS({
  "node_modules/date-fns/locale/hi/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM, y",
      // CLDR #1787
      long: "do MMMM, y",
      // CLDR #1788
      medium: "d MMM, y",
      // CLDR #1789
      short: "dd/MM/yyyy"
      // CLDR #1790
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      // CLDR #1791
      long: "h:mm:ss a z",
      // CLDR #1792
      medium: "h:mm:ss a",
      // CLDR #1793
      short: "h:mm a"
      // CLDR #1794
    };
    var dateTimeFormats = {
      full: "{{date}} 'को' {{time}}",
      // CLDR #1795
      long: "{{date}} 'को' {{time}}",
      // CLDR #1796
      medium: "{{date}}, {{time}}",
      // CLDR #1797
      short: "{{date}}, {{time}}"
      // CLDR #1798
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/hi/_lib/formatRelative.js
var require_formatRelative36 = __commonJS({
  "node_modules/date-fns/locale/hi/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'पिछले' eeee p",
      yesterday: "'कल' p",
      today: "'आज' p",
      tomorrow: "'कल' p",
      nextWeek: "eeee 'को' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/hi/_lib/match.js
var require_match34 = __commonJS({
  "node_modules/date-fns/locale/hi/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var _index3 = require_localize35();
    var matchOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
    var parseOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
    var matchEraPatterns = {
      narrow: /^(ईसा-पूर्व|ईस्वी)/i,
      abbreviated: /^(ईसा\.?\s?पूर्व\.?|ईसा\.?)/i,
      wide: /^(ईसा-पूर्व|ईसवी पूर्व|ईसवी सन|ईसवी)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ति[1234]/i,
      wide: /^[1234](पहली|दूसरी|तीसरी|चौथी)? तिमाही/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[जफ़माअप्मईजूनजुअगसिअक्तनदि]/i,
      abbreviated: /^(जन|फ़र|मार्च|अप्|मई|जून|जुल|अग|सित|अक्तू|नव|दिस)/i,
      wide: /^(जनवरी|फ़रवरी|मार्च|अप्रैल|मई|जून|जुलाई|अगस्त|सितंबर|अक्तूबर|नवंबर|दिसंबर)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ज/i,
        /^फ़/i,
        /^मा/i,
        /^अप्/i,
        /^मई/i,
        /^जू/i,
        /^जु/i,
        /^अग/i,
        /^सि/i,
        /^अक्तू/i,
        /^न/i,
        /^दि/i
      ],
      any: [
        /^जन/i,
        /^फ़/i,
        /^मा/i,
        /^अप्/i,
        /^मई/i,
        /^जू/i,
        /^जु/i,
        /^अग/i,
        /^सि/i,
        /^अक्तू/i,
        /^नव/i,
        /^दिस/i
      ]
    };
    var matchDayPatterns = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[रविसोममंगलबुधगुरुशुक्रशनि]/i,
      short: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
      abbreviated: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
      wide: /^(रविवार|सोमवार|मंगलवार|बुधवार|गुरुवार|शुक्रवार|शनिवार)/i
    };
    var parseDayPatterns = {
      narrow: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i],
      any: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(पू|अ|म|द.\?|सु|दो|शा|रा)/i,
      any: /^(पूर्वाह्न|अपराह्न|म|द.\?|सु|दो|शा|रा)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^पूर्वाह्न/i,
        pm: /^अपराह्न/i,
        midnight: /^मध्य/i,
        noon: /^दो/i,
        morning: /सु/i,
        afternoon: /दो/i,
        evening: /शा/i,
        night: /रा/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: _index3.localeToNumber
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/hi.js
var require_hi = __commonJS({
  "node_modules/date-fns/locale/hi.js"(exports) {
    "use strict";
    exports.hi = void 0;
    var _index = require_formatDistance36();
    var _index2 = require_formatLong42();
    var _index3 = require_formatRelative36();
    var _index4 = require_localize35();
    var _index5 = require_match34();
    var hi = exports.hi = {
      code: "hi",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/hr/_lib/formatDistance.js
var require_formatDistance37 = __commonJS({
  "node_modules/date-fns/locale/hr/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          standalone: "manje od 1 sekunde",
          withPrepositionAgo: "manje od 1 sekunde",
          withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
      },
      xSeconds: {
        one: {
          standalone: "1 sekunda",
          withPrepositionAgo: "1 sekunde",
          withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
      },
      halfAMinute: "pola minute",
      lessThanXMinutes: {
        one: {
          standalone: "manje od 1 minute",
          withPrepositionAgo: "manje od 1 minute",
          withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
      },
      xMinutes: {
        one: {
          standalone: "1 minuta",
          withPrepositionAgo: "1 minute",
          withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
      },
      aboutXHours: {
        one: {
          standalone: "oko 1 sat",
          withPrepositionAgo: "oko 1 sat",
          withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
      },
      xHours: {
        one: {
          standalone: "1 sat",
          withPrepositionAgo: "1 sat",
          withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
      },
      xDays: {
        one: {
          standalone: "1 dan",
          withPrepositionAgo: "1 dan",
          withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
      },
      aboutXWeeks: {
        one: {
          standalone: "oko 1 tjedan",
          withPrepositionAgo: "oko 1 tjedan",
          withPrepositionIn: "oko 1 tjedan"
        },
        dual: "oko {{count}} tjedna",
        other: "oko {{count}} tjedana"
      },
      xWeeks: {
        one: {
          standalone: "1 tjedan",
          withPrepositionAgo: "1 tjedan",
          withPrepositionIn: "1 tjedan"
        },
        dual: "{{count}} tjedna",
        other: "{{count}} tjedana"
      },
      aboutXMonths: {
        one: {
          standalone: "oko 1 mjesec",
          withPrepositionAgo: "oko 1 mjesec",
          withPrepositionIn: "oko 1 mjesec"
        },
        dual: "oko {{count}} mjeseca",
        other: "oko {{count}} mjeseci"
      },
      xMonths: {
        one: {
          standalone: "1 mjesec",
          withPrepositionAgo: "1 mjesec",
          withPrepositionIn: "1 mjesec"
        },
        dual: "{{count}} mjeseca",
        other: "{{count}} mjeseci"
      },
      aboutXYears: {
        one: {
          standalone: "oko 1 godinu",
          withPrepositionAgo: "oko 1 godinu",
          withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
      },
      xYears: {
        one: {
          standalone: "1 godina",
          withPrepositionAgo: "1 godine",
          withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
      },
      overXYears: {
        one: {
          standalone: "preko 1 godinu",
          withPrepositionAgo: "preko 1 godinu",
          withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
      },
      almostXYears: {
        one: {
          standalone: "gotovo 1 godinu",
          withPrepositionAgo: "gotovo 1 godinu",
          withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options == null ? void 0 : options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            result = tokenValue.one.withPrepositionIn;
          } else {
            result = tokenValue.one.withPrepositionAgo;
          }
        } else {
          result = tokenValue.one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== "1") {
        result = tokenValue.dual.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "za " + result;
        } else {
          return "prije " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/hr/_lib/formatLong.js
var require_formatLong43 = __commonJS({
  "node_modules/date-fns/locale/hr/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d. MMMM y.",
      long: "d. MMMM y.",
      medium: "d. MMM y.",
      short: "dd. MM. y."
    };
    var timeFormats = {
      full: "HH:mm:ss (zzzz)",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'u' {{time}}",
      long: "{{date}} 'u' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/hr/_lib/formatRelative.js
var require_formatRelative37 = __commonJS({
  "node_modules/date-fns/locale/hr/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        switch (date.getDay()) {
          case 0:
            return "'prošlu nedjelju u' p";
          case 3:
            return "'prošlu srijedu u' p";
          case 6:
            return "'prošlu subotu u' p";
          default:
            return "'prošli' EEEE 'u' p";
        }
      },
      yesterday: "'jučer u' p",
      today: "'danas u' p",
      tomorrow: "'sutra u' p",
      nextWeek: (date) => {
        switch (date.getDay()) {
          case 0:
            return "'iduću nedjelju u' p";
          case 3:
            return "'iduću srijedu u' p";
          case 6:
            return "'iduću subotu u' p";
          default:
            return "'prošli' EEEE 'u' p";
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/hr/_lib/localize.js
var require_localize36 = __commonJS({
  "node_modules/date-fns/locale/hr/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["pr.n.e.", "AD"],
      abbreviated: ["pr. Kr.", "po. Kr."],
      wide: ["Prije Krista", "Poslije Krista"]
    };
    var quarterValues = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    var monthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "sij",
        "velj",
        "ožu",
        "tra",
        "svi",
        "lip",
        "srp",
        "kol",
        "ruj",
        "lis",
        "stu",
        "pro"
      ],
      wide: [
        "siječanj",
        "veljača",
        "ožujak",
        "travanj",
        "svibanj",
        "lipanj",
        "srpanj",
        "kolovoz",
        "rujan",
        "listopad",
        "studeni",
        "prosinac"
      ]
    };
    var formattingMonthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "sij",
        "velj",
        "ožu",
        "tra",
        "svi",
        "lip",
        "srp",
        "kol",
        "ruj",
        "lis",
        "stu",
        "pro"
      ],
      wide: [
        "siječnja",
        "veljače",
        "ožujka",
        "travnja",
        "svibnja",
        "lipnja",
        "srpnja",
        "kolovoza",
        "rujna",
        "listopada",
        "studenog",
        "prosinca"
      ]
    };
    var dayValues = {
      narrow: ["N", "P", "U", "S", "Č", "P", "S"],
      short: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
      abbreviated: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
      wide: [
        "nedjelja",
        "ponedjeljak",
        "utorak",
        "srijeda",
        "četvrtak",
        "petak",
        "subota"
      ]
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "navečer",
        night: "noću"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "navečer",
        night: "noću"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutro",
        afternoon: "poslije podne",
        evening: "navečer",
        night: "noću"
      }
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "navečer",
        night: "noću"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "navečer",
        night: "noću"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutro",
        afternoon: "poslije podne",
        evening: "navečer",
        night: "noću"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/hr/_lib/match.js
var require_match35 = __commonJS({
  "node_modules/date-fns/locale/hr/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(pr\.n\.e\.|AD)/i,
      abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
      wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|nova)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?kv\.?/i,
      wide: /^[1234]\. kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(sij|velj|(ožu|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
      wide: /^((siječanj|siječnja|sijecanj|sijecnja)|(veljača|veljače|veljaca|veljace)|(ožujak|ožujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /1/i,
        /2/i,
        /3/i,
        /4/i,
        /5/i,
        /6/i,
        /7/i,
        /8/i,
        /9/i,
        /10/i,
        /11/i,
        /12/i
      ],
      abbreviated: [
        /^sij/i,
        /^velj/i,
        /^(ožu|ozu)/i,
        /^tra/i,
        /^svi/i,
        /^lip/i,
        /^srp/i,
        /^kol/i,
        /^ruj/i,
        /^lis/i,
        /^stu/i,
        /^pro/i
      ],
      wide: [
        /^sij/i,
        /^velj/i,
        /^(ožu|ozu)/i,
        /^tra/i,
        /^svi/i,
        /^lip/i,
        /^srp/i,
        /^kol/i,
        /^ruj/i,
        /^lis/i,
        /^stu/i,
        /^pro/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[npusčc]/i,
      short: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
      abbreviated: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
      wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|ponoc|ponoć|(po)?podne|navecer|navečer|noću|poslije podne|ujutro)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(poslije\s|po)+podne/i,
        evening: /(navece|naveče)/i,
        night: /(nocu|noću)/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/hr.js
var require_hr = __commonJS({
  "node_modules/date-fns/locale/hr.js"(exports) {
    "use strict";
    exports.hr = void 0;
    var _index = require_formatDistance37();
    var _index2 = require_formatLong43();
    var _index3 = require_formatRelative37();
    var _index4 = require_localize36();
    var _index5 = require_match35();
    var hr = exports.hr = {
      code: "hr",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ht/_lib/formatDistance.js
var require_formatDistance38 = __commonJS({
  "node_modules/date-fns/locale/ht/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "mwens pase yon segond",
        other: "mwens pase {{count}} segond"
      },
      xSeconds: {
        one: "1 segond",
        other: "{{count}} segond"
      },
      halfAMinute: "30 segond",
      lessThanXMinutes: {
        one: "mwens pase yon minit",
        other: "mwens pase {{count}} minit"
      },
      xMinutes: {
        one: "1 minit",
        other: "{{count}} minit"
      },
      aboutXHours: {
        one: "anviwon inè",
        other: "anviwon {{count}} è"
      },
      xHours: {
        one: "1 lè",
        other: "{{count}} lè"
      },
      xDays: {
        one: "1 jou",
        other: "{{count}} jou"
      },
      aboutXWeeks: {
        one: "anviwon 1 semèn",
        other: "anviwon {{count}} semèn"
      },
      xWeeks: {
        one: "1 semèn",
        other: "{{count}} semèn"
      },
      aboutXMonths: {
        one: "anviwon 1 mwa",
        other: "anviwon {{count}} mwa"
      },
      xMonths: {
        one: "1 mwa",
        other: "{{count}} mwa"
      },
      aboutXYears: {
        one: "anviwon 1 an",
        other: "anviwon {{count}} an"
      },
      xYears: {
        one: "1 an",
        other: "{{count}} an"
      },
      overXYears: {
        one: "plis pase 1 an",
        other: "plis pase {{count}} an"
      },
      almostXYears: {
        one: "prèske 1 an",
        other: "prèske {{count}} an"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "nan " + result;
        } else {
          return "sa fè " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ht/_lib/formatLong.js
var require_formatLong44 = __commonJS({
  "node_modules/date-fns/locale/ht/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'nan lè' {{time}}",
      long: "{{date}} 'nan lè' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ht/_lib/formatRelative.js
var require_formatRelative38 = __commonJS({
  "node_modules/date-fns/locale/ht/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'pase nan lè' p",
      yesterday: "'yè nan lè' p",
      today: "'jodi a' p",
      tomorrow: "'demen nan lè' p'",
      nextWeek: "eeee 'pwochen nan lè' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ht/_lib/localize.js
var require_localize37 = __commonJS({
  "node_modules/date-fns/locale/ht/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["av. J.-K", "ap. J.-K"],
      abbreviated: ["av. J.-K", "ap. J.-K"],
      wide: ["anvan Jezi Kris", "apre Jezi Kris"]
    };
    var quarterValues = {
      narrow: ["T1", "T2", "T3", "T4"],
      abbreviated: ["1ye trim.", "2yèm trim.", "3yèm trim.", "4yèm trim."],
      wide: ["1ye trimès", "2yèm trimès", "3yèm trimès", "4yèm trimès"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"],
      abbreviated: [
        "janv.",
        "fevr.",
        "mas",
        "avr.",
        "me",
        "jen",
        "jiyè",
        "out",
        "sept.",
        "okt.",
        "nov.",
        "des."
      ],
      wide: [
        "janvye",
        "fevrye",
        "mas",
        "avril",
        "me",
        "jen",
        "jiyè",
        "out",
        "septanm",
        "oktòb",
        "novanm",
        "desanm"
      ]
    };
    var dayValues = {
      narrow: ["D", "L", "M", "M", "J", "V", "S"],
      short: ["di", "le", "ma", "mè", "je", "va", "sa"],
      abbreviated: ["dim.", "len.", "mad.", "mèk.", "jed.", "van.", "sam."],
      wide: ["dimanch", "lendi", "madi", "mèkredi", "jedi", "vandredi", "samdi"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "minwit",
        noon: "midi",
        morning: "mat.",
        afternoon: "ap.m.",
        evening: "swa",
        night: "mat."
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "minwit",
        noon: "midi",
        morning: "maten",
        afternoon: "aprèmidi",
        evening: "swa",
        night: "maten"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "minwit",
        noon: "midi",
        morning: "nan maten",
        afternoon: "nan aprèmidi",
        evening: "nan aswè",
        night: "nan maten"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      if (number === 0)
        return String(number);
      const suffix = number === 1 ? "ye" : "yèm";
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ht/_lib/match.js
var require_match36 = __commonJS({
  "node_modules/date-fns/locale/ht/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(ye|yèm)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(av\.J\.K|ap\.J\.K|ap\.J\.-K)/i,
      abbreviated: /^(av\.J\.-K|av\.J-K|apr\.J\.-K|apr\.J-K|ap\.J-K)/i,
      wide: /^(avan Jezi Kris|apre Jezi Kris)/i
    };
    var parseEraPatterns = {
      any: [/^av/i, /^ap/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^t[1234]/i,
      wide: /^[1234](ye|yèm)? trimès/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv|fevr|mas|avr|me|jen|jiyè|out|sept|okt|nov|des)\.?/i,
      wide: /^(janvye|fevrye|mas|avril|me|jen|jiyè|out|septanm|oktòb|novanm|desanm)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^o/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^ma/i,
        /^av/i,
        /^me/i,
        /^je/i,
        /^ji/i,
        /^ou/i,
        /^s/i,
        /^ok/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[lmjvsd]/i,
      short: /^(di|le|ma|me|je|va|sa)/i,
      abbreviated: /^(dim|len|mad|mèk|jed|van|sam)\.?/i,
      wide: /^(dimanch|lendi|madi|mèkredi|jedi|vandredi|samdi)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^di/i, /^le/i, /^ma/i, /^mè/i, /^je/i, /^va/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|minwit|midi|mat\.?|ap\.?m\.?|swa)/i,
      any: /^([ap]\.?\s?m\.?|nan maten|nan aprèmidi|nan aswè)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^min/i,
        noon: /^mid/i,
        morning: /mat/i,
        afternoon: /ap/i,
        evening: /sw/i,
        night: /nwit/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ht.js
var require_ht = __commonJS({
  "node_modules/date-fns/locale/ht.js"(exports) {
    "use strict";
    exports.ht = void 0;
    var _index = require_formatDistance38();
    var _index2 = require_formatLong44();
    var _index3 = require_formatRelative38();
    var _index4 = require_localize37();
    var _index5 = require_match36();
    var ht = exports.ht = {
      code: "ht",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/hu/_lib/formatDistance.js
var require_formatDistance39 = __commonJS({
  "node_modules/date-fns/locale/hu/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var translations = {
      about: "körülbelül",
      over: "több mint",
      almost: "majdnem",
      lessthan: "kevesebb mint"
    };
    var withoutSuffixes = {
      xseconds: " másodperc",
      halfaminute: "fél perc",
      xminutes: " perc",
      xhours: " óra",
      xdays: " nap",
      xweeks: " hét",
      xmonths: " hónap",
      xyears: " év"
    };
    var withSuffixes = {
      xseconds: {
        "-1": " másodperccel ezelőtt",
        1: " másodperc múlva",
        0: " másodperce"
      },
      halfaminute: {
        "-1": "fél perccel ezelőtt",
        1: "fél perc múlva",
        0: "fél perce"
      },
      xminutes: {
        "-1": " perccel ezelőtt",
        1: " perc múlva",
        0: " perce"
      },
      xhours: {
        "-1": " órával ezelőtt",
        1: " óra múlva",
        0: " órája"
      },
      xdays: {
        "-1": " nappal ezelőtt",
        1: " nap múlva",
        0: " napja"
      },
      xweeks: {
        "-1": " héttel ezelőtt",
        1: " hét múlva",
        0: " hete"
      },
      xmonths: {
        "-1": " hónappal ezelőtt",
        1: " hónap múlva",
        0: " hónapja"
      },
      xyears: {
        "-1": " évvel ezelőtt",
        1: " év múlva",
        0: " éve"
      }
    };
    var formatDistance = (token, count, options) => {
      const adverb = token.match(/about|over|almost|lessthan/i);
      const unit = adverb ? token.replace(adverb[0], "") : token;
      const addSuffix = (options == null ? void 0 : options.addSuffix) === true;
      const key = unit.toLowerCase();
      const comparison = (options == null ? void 0 : options.comparison) || 0;
      const translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];
      let result = key === "halfaminute" ? translated : count + translated;
      if (adverb) {
        const adv = adverb[0].toLowerCase();
        result = translations[adv] + " " + result;
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/hu/_lib/formatLong.js
var require_formatLong45 = __commonJS({
  "node_modules/date-fns/locale/hu/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y. MMMM d., EEEE",
      long: "y. MMMM d.",
      medium: "y. MMM d.",
      short: "y. MM. dd."
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/hu/_lib/formatRelative.js
var require_formatRelative39 = __commonJS({
  "node_modules/date-fns/locale/hu/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var accusativeWeekdays = [
      "vasárnap",
      "hétfőn",
      "kedden",
      "szerdán",
      "csütörtökön",
      "pénteken",
      "szombaton"
    ];
    function week(isFuture) {
      return (date) => {
        const weekday = accusativeWeekdays[date.getDay()];
        const prefix = isFuture ? "" : "'múlt' ";
        return `${prefix}'${weekday}' p'-kor'`;
      };
    }
    var formatRelativeLocale = {
      lastWeek: week(false),
      yesterday: "'tegnap' p'-kor'",
      today: "'ma' p'-kor'",
      tomorrow: "'holnap' p'-kor'",
      nextWeek: week(true),
      other: "P"
    };
    var formatRelative = (token, date) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/hu/_lib/localize.js
var require_localize38 = __commonJS({
  "node_modules/date-fns/locale/hu/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ie.", "isz."],
      abbreviated: ["i. e.", "i. sz."],
      wide: ["Krisztus előtt", "időszámításunk szerint"]
    };
    var quarterValues = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. n.év", "2. n.év", "3. n.év", "4. n.év"],
      wide: ["1. negyedév", "2. negyedév", "3. negyedév", "4. negyedév"]
    };
    var formattingQuarterValues = {
      narrow: ["I.", "II.", "III.", "IV."],
      abbreviated: ["I. n.év", "II. n.év", "III. n.év", "IV. n.év"],
      wide: ["I. negyedév", "II. negyedév", "III. negyedév", "IV. negyedév"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "Á", "M", "J", "J", "A", "Sz", "O", "N", "D"],
      abbreviated: [
        "jan.",
        "febr.",
        "márc.",
        "ápr.",
        "máj.",
        "jún.",
        "júl.",
        "aug.",
        "szept.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "január",
        "február",
        "március",
        "április",
        "május",
        "június",
        "július",
        "augusztus",
        "szeptember",
        "október",
        "november",
        "december"
      ]
    };
    var dayValues = {
      narrow: ["V", "H", "K", "Sz", "Cs", "P", "Sz"],
      short: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
      abbreviated: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
      wide: [
        "vasárnap",
        "hétfő",
        "kedd",
        "szerda",
        "csütörtök",
        "péntek",
        "szombat"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "de.",
        pm: "du.",
        midnight: "éjfél",
        noon: "dél",
        morning: "reggel",
        afternoon: "du.",
        evening: "este",
        night: "éjjel"
      },
      abbreviated: {
        am: "de.",
        pm: "du.",
        midnight: "éjfél",
        noon: "dél",
        morning: "reggel",
        afternoon: "du.",
        evening: "este",
        night: "éjjel"
      },
      wide: {
        am: "de.",
        pm: "du.",
        midnight: "éjfél",
        noon: "dél",
        morning: "reggel",
        afternoon: "délután",
        evening: "este",
        night: "éjjel"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1,
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide"
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/hu/_lib/match.js
var require_match37 = __commonJS({
  "node_modules/date-fns/locale/hu/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ie\.|isz\.)/i,
      abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
      wide: /^(Krisztus előtt|időszámításunk előtt|időszámításunk szerint|i\. sz\.)/i
    };
    var parseEraPatterns = {
      narrow: [/ie/i, /isz/i],
      abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
      any: [/előtt/i, /(szerint|i. sz.)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]\.?/i,
      abbreviated: /^[1234]?\.?\s?n\.év/i,
      wide: /^([1234]|I|II|III|IV)?\.?\s?negyedév/i
    };
    var parseQuarterPatterns = {
      any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmaásond]|sz/i,
      abbreviated: /^(jan\.?|febr\.?|márc\.?|ápr\.?|máj\.?|jún\.?|júl\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
      wide: /^(január|február|március|április|május|június|július|augusztus|szeptember|október|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a|á/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s|sz/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^már/i,
        /^áp/i,
        /^máj/i,
        /^jún/i,
        /^júl/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^([vhkpc]|sz|cs|sz)/i,
      short: /^([vhkp]|sze|cs|szo)/i,
      abbreviated: /^([vhkp]|sze|cs|szo)/i,
      wide: /^(vasárnap|hétfő|kedd|szerda|csütörtök|péntek|szombat)/i
    };
    var parseDayPatterns = {
      narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
      any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i]
    };
    var matchDayPeriodPatterns = {
      any: /^((de|du)\.?|éjfél|délután|dél|reggel|este|éjjel)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^de\.?/i,
        pm: /^du\.?/i,
        midnight: /^éjf/i,
        noon: /^dé/i,
        morning: /reg/i,
        afternoon: /^délu\.?/i,
        evening: /es/i,
        night: /éjj/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/hu.js
var require_hu = __commonJS({
  "node_modules/date-fns/locale/hu.js"(exports) {
    "use strict";
    exports.hu = void 0;
    var _index = require_formatDistance39();
    var _index2 = require_formatLong45();
    var _index3 = require_formatRelative39();
    var _index4 = require_localize38();
    var _index5 = require_match37();
    var hu = exports.hu = {
      code: "hu",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/hy/_lib/formatDistance.js
var require_formatDistance40 = __commonJS({
  "node_modules/date-fns/locale/hy/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "ավելի քիչ քան 1 վայրկյան",
        other: "ավելի քիչ քան {{count}} վայրկյան"
      },
      xSeconds: {
        one: "1 վայրկյան",
        other: "{{count}} վայրկյան"
      },
      halfAMinute: "կես րոպե",
      lessThanXMinutes: {
        one: "ավելի քիչ քան 1 րոպե",
        other: "ավելի քիչ քան {{count}} րոպե"
      },
      xMinutes: {
        one: "1 րոպե",
        other: "{{count}} րոպե"
      },
      aboutXHours: {
        one: "մոտ 1 ժամ",
        other: "մոտ {{count}} ժամ"
      },
      xHours: {
        one: "1 ժամ",
        other: "{{count}} ժամ"
      },
      xDays: {
        one: "1 օր",
        other: "{{count}} օր"
      },
      aboutXWeeks: {
        one: "մոտ 1 շաբաթ",
        other: "մոտ {{count}} շաբաթ"
      },
      xWeeks: {
        one: "1 շաբաթ",
        other: "{{count}} շաբաթ"
      },
      aboutXMonths: {
        one: "մոտ 1 ամիս",
        other: "մոտ {{count}} ամիս"
      },
      xMonths: {
        one: "1 ամիս",
        other: "{{count}} ամիս"
      },
      aboutXYears: {
        one: "մոտ 1 տարի",
        other: "մոտ {{count}} տարի"
      },
      xYears: {
        one: "1 տարի",
        other: "{{count}} տարի"
      },
      overXYears: {
        one: "ավելի քան 1 տարի",
        other: "ավելի քան {{count}} տարի"
      },
      almostXYears: {
        one: "համարյա 1 տարի",
        other: "համարյա {{count}} տարի"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " հետո";
        } else {
          return result + " առաջ";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/hy/_lib/formatLong.js
var require_formatLong46 = __commonJS({
  "node_modules/date-fns/locale/hy/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "d MMMM, y, EEEE",
      long: "d MMMM, y",
      medium: "d MMM, y",
      short: "dd.MM.yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'ժ․'{{time}}",
      long: "{{date}} 'ժ․'{{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/hy/_lib/formatRelative.js
var require_formatRelative40 = __commonJS({
  "node_modules/date-fns/locale/hy/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'նախորդ' eeee p'֊ին'",
      yesterday: "'երեկ' p'֊ին'",
      today: "'այսօր' p'֊ին'",
      tomorrow: "'վաղը' p'֊ին'",
      nextWeek: "'հաջորդ' eeee p'֊ին'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/hy/_lib/localize.js
var require_localize39 = __commonJS({
  "node_modules/date-fns/locale/hy/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["Ք", "Մ"],
      abbreviated: ["ՔԱ", "ՄԹ"],
      wide: ["Քրիստոսից առաջ", "Մեր թվարկության"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Ք1", "Ք2", "Ք3", "Ք4"],
      wide: ["1֊ին քառորդ", "2֊րդ քառորդ", "3֊րդ քառորդ", "4֊րդ քառորդ"]
    };
    var monthValues = {
      narrow: ["Հ", "Փ", "Մ", "Ա", "Մ", "Հ", "Հ", "Օ", "Ս", "Հ", "Ն", "Դ"],
      abbreviated: [
        "հուն",
        "փետ",
        "մար",
        "ապր",
        "մայ",
        "հուն",
        "հուլ",
        "օգս",
        "սեպ",
        "հոկ",
        "նոյ",
        "դեկ"
      ],
      wide: [
        "հունվար",
        "փետրվար",
        "մարտ",
        "ապրիլ",
        "մայիս",
        "հունիս",
        "հուլիս",
        "օգոստոս",
        "սեպտեմբեր",
        "հոկտեմբեր",
        "նոյեմբեր",
        "դեկտեմբեր"
      ]
    };
    var dayValues = {
      narrow: ["Կ", "Ե", "Ե", "Չ", "Հ", "Ո", "Շ"],
      short: ["կր", "եր", "եք", "չք", "հգ", "ուր", "շբ"],
      abbreviated: ["կիր", "երկ", "երք", "չոր", "հնգ", "ուրբ", "շաբ"],
      wide: [
        "կիրակի",
        "երկուշաբթի",
        "երեքշաբթի",
        "չորեքշաբթի",
        "հինգշաբթի",
        "ուրբաթ",
        "շաբաթ"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "կեսգշ",
        noon: "կեսօր",
        morning: "առավոտ",
        afternoon: "ցերեկ",
        evening: "երեկո",
        night: "գիշեր"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "կեսգիշեր",
        noon: "կեսօր",
        morning: "առավոտ",
        afternoon: "ցերեկ",
        evening: "երեկո",
        night: "գիշեր"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "կեսգիշեր",
        noon: "կեսօր",
        morning: "առավոտ",
        afternoon: "ցերեկ",
        evening: "երեկո",
        night: "գիշեր"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "կեսգշ",
        noon: "կեսօր",
        morning: "առավոտը",
        afternoon: "ցերեկը",
        evening: "երեկոյան",
        night: "գիշերը"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "կեսգիշերին",
        noon: "կեսօրին",
        morning: "առավոտը",
        afternoon: "ցերեկը",
        evening: "երեկոյան",
        night: "գիշերը"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "կեսգիշերին",
        noon: "կեսօրին",
        morning: "առավոտը",
        afternoon: "ցերեկը",
        evening: "երեկոյան",
        night: "գիշերը"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      const rem100 = number % 100;
      if (rem100 < 10) {
        if (rem100 % 10 === 1) {
          return number + "֊ին";
        }
      }
      return number + "֊րդ";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/hy/_lib/match.js
var require_match38 = __commonJS({
  "node_modules/date-fns/locale/hy/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)((-|֊)?(ին|րդ))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(Ք|Մ)/i,
      abbreviated: /^(Ք\.?\s?Ա\.?|Մ\.?\s?Թ\.?\s?Ա\.?|Մ\.?\s?Թ\.?|Ք\.?\s?Հ\.?)/i,
      wide: /^(քրիստոսից առաջ|մեր թվարկությունից առաջ|մեր թվարկության|քրիստոսից հետո)/i
    };
    var parseEraPatterns = {
      any: [/^ք/i, /^մ/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ք[1234]/i,
      wide: /^[1234]((-|֊)?(ին|րդ)) քառորդ/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[հփմաօսնդ]/i,
      abbreviated: /^(հուն|փետ|մար|ապր|մայ|հուն|հուլ|օգս|սեպ|հոկ|նոյ|դեկ)/i,
      wide: /^(հունվար|փետրվար|մարտ|ապրիլ|մայիս|հունիս|հուլիս|օգոստոս|սեպտեմբեր|հոկտեմբեր|նոյեմբեր|դեկտեմբեր)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^հ/i,
        /^փ/i,
        /^մ/i,
        /^ա/i,
        /^մ/i,
        /^հ/i,
        /^հ/i,
        /^օ/i,
        /^ս/i,
        /^հ/i,
        /^ն/i,
        /^դ/i
      ],
      any: [
        /^հու/i,
        /^փ/i,
        /^մար/i,
        /^ա/i,
        /^մայ/i,
        /^հուն/i,
        /^հուլ/i,
        /^օ/i,
        /^ս/i,
        /^հոկ/i,
        /^ն/i,
        /^դ/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[եչհոշկ]/i,
      short: /^(կր|եր|եք|չք|հգ|ուր|շբ)/i,
      abbreviated: /^(կիր|երկ|երք|չոր|հնգ|ուրբ|շաբ)/i,
      wide: /^(կիրակի|երկուշաբթի|երեքշաբթի|չորեքշաբթի|հինգշաբթի|ուրբաթ|շաբաթ)/i
    };
    var parseDayPatterns = {
      narrow: [/^կ/i, /^ե/i, /^ե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
      short: [/^կ/i, /^եր/i, /^եք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
      abbreviated: [/^կ/i, /^երկ/i, /^երք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
      wide: [/^կ/i, /^երկ/i, /^երե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([ap]|կեսգշ|կեսօր|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i,
      any: /^([ap]\.?\s?m\.?|կեսգիշեր(ին)?|կեսօր(ին)?|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /կեսգիշեր/i,
        noon: /կեսօր/i,
        morning: /առավոտ/i,
        afternoon: /ցերեկ/i,
        evening: /երեկո/i,
        night: /գիշեր/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/hy.js
var require_hy = __commonJS({
  "node_modules/date-fns/locale/hy.js"(exports) {
    "use strict";
    exports.hy = void 0;
    var _index = require_formatDistance40();
    var _index2 = require_formatLong46();
    var _index3 = require_formatRelative40();
    var _index4 = require_localize39();
    var _index5 = require_match38();
    var hy = exports.hy = {
      code: "hy",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/id/_lib/formatDistance.js
var require_formatDistance41 = __commonJS({
  "node_modules/date-fns/locale/id/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "kurang dari 1 detik",
        other: "kurang dari {{count}} detik"
      },
      xSeconds: {
        one: "1 detik",
        other: "{{count}} detik"
      },
      halfAMinute: "setengah menit",
      lessThanXMinutes: {
        one: "kurang dari 1 menit",
        other: "kurang dari {{count}} menit"
      },
      xMinutes: {
        one: "1 menit",
        other: "{{count}} menit"
      },
      aboutXHours: {
        one: "sekitar 1 jam",
        other: "sekitar {{count}} jam"
      },
      xHours: {
        one: "1 jam",
        other: "{{count}} jam"
      },
      xDays: {
        one: "1 hari",
        other: "{{count}} hari"
      },
      aboutXWeeks: {
        one: "sekitar 1 minggu",
        other: "sekitar {{count}} minggu"
      },
      xWeeks: {
        one: "1 minggu",
        other: "{{count}} minggu"
      },
      aboutXMonths: {
        one: "sekitar 1 bulan",
        other: "sekitar {{count}} bulan"
      },
      xMonths: {
        one: "1 bulan",
        other: "{{count}} bulan"
      },
      aboutXYears: {
        one: "sekitar 1 tahun",
        other: "sekitar {{count}} tahun"
      },
      xYears: {
        one: "1 tahun",
        other: "{{count}} tahun"
      },
      overXYears: {
        one: "lebih dari 1 tahun",
        other: "lebih dari {{count}} tahun"
      },
      almostXYears: {
        one: "hampir 1 tahun",
        other: "hampir {{count}} tahun"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "dalam waktu " + result;
        } else {
          return result + " yang lalu";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/id/_lib/formatLong.js
var require_formatLong47 = __commonJS({
  "node_modules/date-fns/locale/id/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "d/M/yyyy"
    };
    var timeFormats = {
      full: "HH.mm.ss",
      long: "HH.mm.ss",
      medium: "HH.mm",
      short: "HH.mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'pukul' {{time}}",
      long: "{{date}} 'pukul' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/id/_lib/formatRelative.js
var require_formatRelative41 = __commonJS({
  "node_modules/date-fns/locale/id/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'lalu pukul' p",
      yesterday: "'Kemarin pukul' p",
      today: "'Hari ini pukul' p",
      tomorrow: "'Besok pukul' p",
      nextWeek: "eeee 'pukul' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/id/_lib/localize.js
var require_localize40 = __commonJS({
  "node_modules/date-fns/locale/id/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["SM", "M"],
      abbreviated: ["SM", "M"],
      wide: ["Sebelum Masehi", "Masehi"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["Kuartal ke-1", "Kuartal ke-2", "Kuartal ke-3", "Kuartal ke-4"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "Mei",
        "Jun",
        "Jul",
        "Agt",
        "Sep",
        "Okt",
        "Nov",
        "Des"
      ],
      wide: [
        "Januari",
        "Februari",
        "Maret",
        "April",
        "Mei",
        "Juni",
        "Juli",
        "Agustus",
        "September",
        "Oktober",
        "November",
        "Desember"
      ]
    };
    var dayValues = {
      narrow: ["M", "S", "S", "R", "K", "J", "S"],
      short: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
      abbreviated: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
      wide: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return "ke-" + number;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/id/_lib/match.js
var require_match39 = __commonJS({
  "node_modules/date-fns/locale/id/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^ke-(\d+)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(sm|m)/i,
      abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
      wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
    };
    var parseEraPatterns = {
      any: [/^s/i, /^(m|e)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K-?\s[1234]/i,
      wide: /^Kuartal ke-?\s?[1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
      wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^ma/i,
        /^ap/i,
        /^me/i,
        /^jun/i,
        /^jul/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[srkjm]/i,
      short: /^(min|sen|sel|rab|kam|jum|sab)/i,
      abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
      wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
    };
    var parseDayPatterns = {
      narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
      any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
      any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pagi/i,
        afternoon: /siang/i,
        evening: /sore/i,
        night: /malam/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/id.js
var require_id = __commonJS({
  "node_modules/date-fns/locale/id.js"(exports) {
    "use strict";
    exports.id = void 0;
    var _index = require_formatDistance41();
    var _index2 = require_formatLong47();
    var _index3 = require_formatRelative41();
    var _index4 = require_localize40();
    var _index5 = require_match39();
    var id = exports.id = {
      code: "id",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/is/_lib/formatDistance.js
var require_formatDistance42 = __commonJS({
  "node_modules/date-fns/locale/is/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "minna en 1 sekúnda",
        other: "minna en {{count}} sekúndur"
      },
      xSeconds: {
        one: "1 sekúnda",
        other: "{{count}} sekúndur"
      },
      halfAMinute: "hálf mínúta",
      lessThanXMinutes: {
        one: "minna en 1 mínúta",
        other: "minna en {{count}} mínútur"
      },
      xMinutes: {
        one: "1 mínúta",
        other: "{{count}} mínútur"
      },
      aboutXHours: {
        one: "u.þ.b. 1 klukkustund",
        other: "u.þ.b. {{count}} klukkustundir"
      },
      xHours: {
        one: "1 klukkustund",
        other: "{{count}} klukkustundir"
      },
      xDays: {
        one: "1 dagur",
        other: "{{count}} dagar"
      },
      aboutXWeeks: {
        one: "um viku",
        other: "um {{count}} vikur"
      },
      xWeeks: {
        one: "1 viku",
        other: "{{count}} vikur"
      },
      aboutXMonths: {
        one: "u.þ.b. 1 mánuður",
        other: "u.þ.b. {{count}} mánuðir"
      },
      xMonths: {
        one: "1 mánuður",
        other: "{{count}} mánuðir"
      },
      aboutXYears: {
        one: "u.þ.b. 1 ár",
        other: "u.þ.b. {{count}} ár"
      },
      xYears: {
        one: "1 ár",
        other: "{{count}} ár"
      },
      overXYears: {
        one: "meira en 1 ár",
        other: "meira en {{count}} ár"
      },
      almostXYears: {
        one: "næstum 1 ár",
        other: "næstum {{count}} ár"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "í " + result;
        } else {
          return result + " síðan";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/is/_lib/formatLong.js
var require_formatLong48 = __commonJS({
  "node_modules/date-fns/locale/is/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM y",
      long: "do MMMM y",
      medium: "do MMM y",
      short: "d.MM.y"
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/is/_lib/formatRelative.js
var require_formatRelative42 = __commonJS({
  "node_modules/date-fns/locale/is/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'síðasta' dddd 'kl.' p",
      yesterday: "'í gær kl.' p",
      today: "'í dag kl.' p",
      tomorrow: "'á morgun kl.' p",
      nextWeek: "dddd 'kl.' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/is/_lib/localize.js
var require_localize41 = __commonJS({
  "node_modules/date-fns/locale/is/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["fyrir Krist", "eftir Krist"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1F", "2F", "3F", "4F"],
      wide: ["1. fjórðungur", "2. fjórðungur", "3. fjórðungur", "4. fjórðungur"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "Á", "S", "Ó", "N", "D"],
      abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apríl",
        "maí",
        "júní",
        "júlí",
        "ágúst",
        "sept.",
        "okt.",
        "nóv.",
        "des."
      ],
      wide: [
        "janúar",
        "febrúar",
        "mars",
        "apríl",
        "maí",
        "júní",
        "júlí",
        "ágúst",
        "september",
        "október",
        "nóvember",
        "desember"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "Þ", "M", "F", "F", "L"],
      short: ["Su", "Má", "Þr", "Mi", "Fi", "Fö", "La"],
      abbreviated: ["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."],
      wide: [
        "sunnudagur",
        "mánudagur",
        "þriðjudagur",
        "miðvikudagur",
        "fimmtudagur",
        "föstudagur",
        "laugardagur"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "f",
        pm: "e",
        midnight: "miðnætti",
        noon: "hádegi",
        morning: "morgunn",
        afternoon: "síðdegi",
        evening: "kvöld",
        night: "nótt"
      },
      abbreviated: {
        am: "f.h.",
        pm: "e.h.",
        midnight: "miðnætti",
        noon: "hádegi",
        morning: "morgunn",
        afternoon: "síðdegi",
        evening: "kvöld",
        night: "nótt"
      },
      wide: {
        am: "fyrir hádegi",
        pm: "eftir hádegi",
        midnight: "miðnætti",
        noon: "hádegi",
        morning: "morgunn",
        afternoon: "síðdegi",
        evening: "kvöld",
        night: "nótt"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "f",
        pm: "e",
        midnight: "á miðnætti",
        noon: "á hádegi",
        morning: "að morgni",
        afternoon: "síðdegis",
        evening: "um kvöld",
        night: "um nótt"
      },
      abbreviated: {
        am: "f.h.",
        pm: "e.h.",
        midnight: "á miðnætti",
        noon: "á hádegi",
        morning: "að morgni",
        afternoon: "síðdegis",
        evening: "um kvöld",
        night: "um nótt"
      },
      wide: {
        am: "fyrir hádegi",
        pm: "eftir hádegi",
        midnight: "á miðnætti",
        noon: "á hádegi",
        morning: "að morgni",
        afternoon: "síðdegis",
        evening: "um kvöld",
        night: "um nótt"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/is/_lib/match.js
var require_match40 = __commonJS({
  "node_modules/date-fns/locale/is/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+(\.)?/i;
    var matchEraPatterns = {
      narrow: /^(f\.Kr\.|e\.Kr\.)/i,
      abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
      wide: /^(fyrir Krist|eftir Krist)/i
    };
    var parseEraPatterns = {
      any: [/^(f\.Kr\.)/i, /^(e\.Kr\.)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]\.?/i,
      abbreviated: /^q[1234]\.?/i,
      wide: /^[1234]\.? fjórðungur/i
    };
    var parseQuarterPatterns = {
      any: [/1\.?/i, /2\.?/i, /3\.?/i, /4\.?/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmásónd]/i,
      abbreviated: /^(jan\.|feb\.|mars\.|apríl\.|maí|júní|júlí|águst|sep\.|oct\.|nov\.|dec\.)/i,
      wide: /^(januar|febrúar|mars|apríl|maí|júní|júlí|águst|september|október|nóvember|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^á/i,
        /^s/i,
        /^ó/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maí/i,
        /^jún/i,
        /^júl/i,
        /^áu/i,
        /^s/i,
        /^ó/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|má|þr|mi|fi|fö|la)/i,
      abbreviated: /^(sun|mán|þri|mið|fim|fös|lau)\.?/i,
      wide: /^(sunnudagur|mánudagur|þriðjudagur|miðvikudagur|fimmtudagur|föstudagur|laugardagur)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^þ/i, /^m/i, /^f/i, /^f/i, /^l/i],
      any: [/^su/i, /^má/i, /^þr/i, /^mi/i, /^fi/i, /^fö/i, /^la/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(f|e|síðdegis|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i,
      any: /^(fyrir hádegi|eftir hádegi|[ef]\.?h\.?|síðdegis|morgunn|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^mi/i,
        noon: /^há/i,
        morning: /morgunn/i,
        afternoon: /síðdegi/i,
        evening: /kvöld/i,
        night: /nótt/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/is.js
var require_is = __commonJS({
  "node_modules/date-fns/locale/is.js"(exports) {
    "use strict";
    exports.is = void 0;
    var _index = require_formatDistance42();
    var _index2 = require_formatLong48();
    var _index3 = require_formatRelative42();
    var _index4 = require_localize41();
    var _index5 = require_match40();
    var is = exports.is = {
      code: "is",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/it/_lib/formatDistance.js
var require_formatDistance43 = __commonJS({
  "node_modules/date-fns/locale/it/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "meno di un secondo",
        other: "meno di {{count}} secondi"
      },
      xSeconds: {
        one: "un secondo",
        other: "{{count}} secondi"
      },
      halfAMinute: "alcuni secondi",
      lessThanXMinutes: {
        one: "meno di un minuto",
        other: "meno di {{count}} minuti"
      },
      xMinutes: {
        one: "un minuto",
        other: "{{count}} minuti"
      },
      aboutXHours: {
        one: "circa un'ora",
        other: "circa {{count}} ore"
      },
      xHours: {
        one: "un'ora",
        other: "{{count}} ore"
      },
      xDays: {
        one: "un giorno",
        other: "{{count}} giorni"
      },
      aboutXWeeks: {
        one: "circa una settimana",
        other: "circa {{count}} settimane"
      },
      xWeeks: {
        one: "una settimana",
        other: "{{count}} settimane"
      },
      aboutXMonths: {
        one: "circa un mese",
        other: "circa {{count}} mesi"
      },
      xMonths: {
        one: "un mese",
        other: "{{count}} mesi"
      },
      aboutXYears: {
        one: "circa un anno",
        other: "circa {{count}} anni"
      },
      xYears: {
        one: "un anno",
        other: "{{count}} anni"
      },
      overXYears: {
        one: "più di un anno",
        other: "più di {{count}} anni"
      },
      almostXYears: {
        one: "quasi un anno",
        other: "quasi {{count}} anni"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "tra " + result;
        } else {
          return result + " fa";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/it/_lib/formatLong.js
var require_formatLong49 = __commonJS({
  "node_modules/date-fns/locale/it/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/it/_lib/formatRelative.js
var require_formatRelative43 = __commonJS({
  "node_modules/date-fns/locale/it/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var weekdays = [
      "domenica",
      "lunedì",
      "martedì",
      "mercoledì",
      "giovedì",
      "venerdì",
      "sabato"
    ];
    function lastWeek(day) {
      switch (day) {
        case 0:
          return "'domenica scorsa alle' p";
        default:
          return "'" + weekdays[day] + " scorso alle' p";
      }
    }
    function thisWeek(day) {
      return "'" + weekdays[day] + " alle' p";
    }
    function nextWeek(day) {
      switch (day) {
        case 0:
          return "'domenica prossima alle' p";
        default:
          return "'" + weekdays[day] + " prossimo alle' p";
      }
    }
    var formatRelativeLocale = {
      lastWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'ieri alle' p",
      today: "'oggi alle' p",
      tomorrow: "'domani alle' p",
      nextWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/it/_lib/localize.js
var require_localize42 = __commonJS({
  "node_modules/date-fns/locale/it/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["aC", "dC"],
      abbreviated: ["a.C.", "d.C."],
      wide: ["avanti Cristo", "dopo Cristo"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1º trimestre", "2º trimestre", "3º trimestre", "4º trimestre"]
    };
    var monthValues = {
      narrow: ["G", "F", "M", "A", "M", "G", "L", "A", "S", "O", "N", "D"],
      abbreviated: [
        "gen",
        "feb",
        "mar",
        "apr",
        "mag",
        "giu",
        "lug",
        "ago",
        "set",
        "ott",
        "nov",
        "dic"
      ],
      wide: [
        "gennaio",
        "febbraio",
        "marzo",
        "aprile",
        "maggio",
        "giugno",
        "luglio",
        "agosto",
        "settembre",
        "ottobre",
        "novembre",
        "dicembre"
      ]
    };
    var dayValues = {
      narrow: ["D", "L", "M", "M", "G", "V", "S"],
      short: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
      abbreviated: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
      wide: [
        "domenica",
        "lunedì",
        "martedì",
        "mercoledì",
        "giovedì",
        "venerdì",
        "sabato"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "m.",
        pm: "p.",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "m.",
        pm: "p.",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return String(number);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/it/_lib/match.js
var require_match41 = __commonJS({
  "node_modules/date-fns/locale/it/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(aC|dC)/i,
      abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
      wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
    };
    var parseEraPatterns = {
      any: [/^a/i, /^(d|e)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^t[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[gfmalsond]/i,
      abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
      wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^g/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^g/i,
        /^l/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ge/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mag/i,
        /^gi/i,
        /^l/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dlmgvs]/i,
      short: /^(do|lu|ma|me|gi|ve|sa)/i,
      abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
      wide: /^(domenica|luned[i|ì]|marted[i|ì]|mercoled[i|ì]|gioved[i|ì]|venerd[i|ì]|sabato)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
      any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mezza/i,
        noon: /^mezzo/i,
        morning: /mattina/i,
        afternoon: /pomeriggio/i,
        evening: /sera/i,
        night: /notte/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/it.js
var require_it = __commonJS({
  "node_modules/date-fns/locale/it.js"(exports) {
    "use strict";
    exports.it = void 0;
    var _index = require_formatDistance43();
    var _index2 = require_formatLong49();
    var _index3 = require_formatRelative43();
    var _index4 = require_localize42();
    var _index5 = require_match41();
    var it = exports.it = {
      code: "it",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/it-CH/_lib/formatLong.js
var require_formatLong50 = __commonJS({
  "node_modules/date-fns/locale/it-CH/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/it-CH.js
var require_it_CH = __commonJS({
  "node_modules/date-fns/locale/it-CH.js"(exports) {
    "use strict";
    exports.itCH = void 0;
    var _index = require_formatDistance43();
    var _index2 = require_formatRelative43();
    var _index3 = require_localize42();
    var _index4 = require_match41();
    var _index5 = require_formatLong50();
    var itCH = exports.itCH = {
      code: "it-CH",
      formatDistance: _index.formatDistance,
      formatLong: _index5.formatLong,
      formatRelative: _index2.formatRelative,
      localize: _index3.localize,
      match: _index4.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/ja/_lib/formatDistance.js
var require_formatDistance44 = __commonJS({
  "node_modules/date-fns/locale/ja/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "1秒未満",
        other: "{{count}}秒未満",
        oneWithSuffix: "約1秒",
        otherWithSuffix: "約{{count}}秒"
      },
      xSeconds: {
        one: "1秒",
        other: "{{count}}秒"
      },
      halfAMinute: "30秒",
      lessThanXMinutes: {
        one: "1分未満",
        other: "{{count}}分未満",
        oneWithSuffix: "約1分",
        otherWithSuffix: "約{{count}}分"
      },
      xMinutes: {
        one: "1分",
        other: "{{count}}分"
      },
      aboutXHours: {
        one: "約1時間",
        other: "約{{count}}時間"
      },
      xHours: {
        one: "1時間",
        other: "{{count}}時間"
      },
      xDays: {
        one: "1日",
        other: "{{count}}日"
      },
      aboutXWeeks: {
        one: "約1週間",
        other: "約{{count}}週間"
      },
      xWeeks: {
        one: "1週間",
        other: "{{count}}週間"
      },
      aboutXMonths: {
        one: "約1か月",
        other: "約{{count}}か月"
      },
      xMonths: {
        one: "1か月",
        other: "{{count}}か月"
      },
      aboutXYears: {
        one: "約1年",
        other: "約{{count}}年"
      },
      xYears: {
        one: "1年",
        other: "{{count}}年"
      },
      overXYears: {
        one: "1年以上",
        other: "{{count}}年以上"
      },
      almostXYears: {
        one: "1年近く",
        other: "{{count}}年近く"
      }
    };
    var formatDistance = (token, count, options) => {
      options = options || {};
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options.addSuffix && tokenValue.oneWithSuffix) {
          result = tokenValue.oneWithSuffix;
        } else {
          result = tokenValue.one;
        }
      } else {
        if (options.addSuffix && tokenValue.otherWithSuffix) {
          result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
        } else {
          result = tokenValue.other.replace("{{count}}", String(count));
        }
      }
      if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "後";
        } else {
          return result + "前";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ja/_lib/formatLong.js
var require_formatLong51 = __commonJS({
  "node_modules/date-fns/locale/ja/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y年M月d日EEEE",
      long: "y年M月d日",
      medium: "y/MM/dd",
      short: "y/MM/dd"
    };
    var timeFormats = {
      full: "H時mm分ss秒 zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ja/_lib/formatRelative.js
var require_formatRelative44 = __commonJS({
  "node_modules/date-fns/locale/ja/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "先週のeeeeのp",
      yesterday: "昨日のp",
      today: "今日のp",
      tomorrow: "明日のp",
      nextWeek: "翌週のeeeeのp",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => {
      return formatRelativeLocale[token];
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ja/_lib/localize.js
var require_localize43 = __commonJS({
  "node_modules/date-fns/locale/ja/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["BC", "AC"],
      abbreviated: ["紀元前", "西暦"],
      wide: ["紀元前", "西暦"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["第1四半期", "第2四半期", "第3四半期", "第4四半期"]
    };
    var monthValues = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: [
        "1月",
        "2月",
        "3月",
        "4月",
        "5月",
        "6月",
        "7月",
        "8月",
        "9月",
        "10月",
        "11月",
        "12月"
      ],
      wide: [
        "1月",
        "2月",
        "3月",
        "4月",
        "5月",
        "6月",
        "7月",
        "8月",
        "9月",
        "10月",
        "11月",
        "12月"
      ]
    };
    var dayValues = {
      narrow: ["日", "月", "火", "水", "木", "金", "土"],
      short: ["日", "月", "火", "水", "木", "金", "土"],
      abbreviated: ["日", "月", "火", "水", "木", "金", "土"],
      wide: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "午前",
        pm: "午後",
        midnight: "深夜",
        noon: "正午",
        morning: "朝",
        afternoon: "午後",
        evening: "夜",
        night: "深夜"
      },
      abbreviated: {
        am: "午前",
        pm: "午後",
        midnight: "深夜",
        noon: "正午",
        morning: "朝",
        afternoon: "午後",
        evening: "夜",
        night: "深夜"
      },
      wide: {
        am: "午前",
        pm: "午後",
        midnight: "深夜",
        noon: "正午",
        morning: "朝",
        afternoon: "午後",
        evening: "夜",
        night: "深夜"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "午前",
        pm: "午後",
        midnight: "深夜",
        noon: "正午",
        morning: "朝",
        afternoon: "午後",
        evening: "夜",
        night: "深夜"
      },
      abbreviated: {
        am: "午前",
        pm: "午後",
        midnight: "深夜",
        noon: "正午",
        morning: "朝",
        afternoon: "午後",
        evening: "夜",
        night: "深夜"
      },
      wide: {
        am: "午前",
        pm: "午後",
        midnight: "深夜",
        noon: "正午",
        morning: "朝",
        afternoon: "午後",
        evening: "夜",
        night: "深夜"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = String(options == null ? void 0 : options.unit);
      switch (unit) {
        case "year":
          return `${number}年`;
        case "quarter":
          return `第${number}四半期`;
        case "month":
          return `${number}月`;
        case "week":
          return `第${number}週`;
        case "date":
          return `${number}日`;
        case "hour":
          return `${number}時`;
        case "minute":
          return `${number}分`;
        case "second":
          return `${number}秒`;
        default:
          return `${number}`;
      }
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => Number(quarter) - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ja/_lib/match.js
var require_match42 = __commonJS({
  "node_modules/date-fns/locale/ja/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchPatternFn();
    var _index2 = require_buildMatchFn();
    var matchOrdinalNumberPattern = /^第?\d+(年|四半期|月|週|日|時|分|秒)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(B\.?C\.?|A\.?D\.?)/i,
      abbreviated: /^(紀元[前後]|西暦)/i,
      wide: /^(紀元[前後]|西暦)/i
    };
    var parseEraPatterns = {
      narrow: [/^B/i, /^A/i],
      any: [/^(紀元前)/i, /^(西暦|紀元後)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^Q[1234]/i,
      wide: /^第[1234一二三四１２３４]四半期/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
    };
    var matchMonthPatterns = {
      narrow: /^([123456789]|1[012])/,
      abbreviated: /^([123456789]|1[012])月/i,
      wide: /^([123456789]|1[012])月/i
    };
    var parseMonthPatterns = {
      any: [
        /^1\D/,
        /^2/,
        /^3/,
        /^4/,
        /^5/,
        /^6/,
        /^7/,
        /^8/,
        /^9/,
        /^10/,
        /^11/,
        /^12/
      ]
    };
    var matchDayPatterns = {
      narrow: /^[日月火水木金土]/,
      short: /^[日月火水木金土]/,
      abbreviated: /^[日月火水木金土]/,
      wide: /^[日月火水木金土]曜日/
    };
    var parseDayPatterns = {
      any: [/^日/, /^月/, /^火/, /^水/, /^木/, /^金/, /^土/]
    };
    var matchDayPeriodPatterns = {
      any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(A|午前)/i,
        pm: /^(P|午後)/i,
        midnight: /^深夜|真夜中/i,
        noon: /^正午/i,
        morning: /^朝/i,
        afternoon: /^午後/i,
        evening: /^夜/i,
        night: /^深夜/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ja.js
var require_ja = __commonJS({
  "node_modules/date-fns/locale/ja.js"(exports) {
    "use strict";
    exports.ja = void 0;
    var _index = require_formatDistance44();
    var _index2 = require_formatLong51();
    var _index3 = require_formatRelative44();
    var _index4 = require_localize43();
    var _index5 = require_match42();
    var ja = exports.ja = {
      code: "ja",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ja-Hira/_lib/formatDistance.js
var require_formatDistance45 = __commonJS({
  "node_modules/date-fns/locale/ja-Hira/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "1びょうみまん",
        other: "{{count}}びょうみまん",
        oneWithSuffix: "やく1びょう",
        otherWithSuffix: "やく{{count}}びょう"
      },
      xSeconds: {
        one: "1びょう",
        other: "{{count}}びょう"
      },
      halfAMinute: "30びょう",
      lessThanXMinutes: {
        one: "1ぷんみまん",
        other: "{{count}}ふんみまん",
        oneWithSuffix: "やく1ぷん",
        otherWithSuffix: "やく{{count}}ふん"
      },
      xMinutes: {
        one: "1ぷん",
        other: "{{count}}ふん"
      },
      aboutXHours: {
        one: "やく1じかん",
        other: "やく{{count}}じかん"
      },
      xHours: {
        one: "1じかん",
        other: "{{count}}じかん"
      },
      xDays: {
        one: "1にち",
        other: "{{count}}にち"
      },
      aboutXWeeks: {
        one: "やく1しゅうかん",
        other: "やく{{count}}しゅうかん"
      },
      xWeeks: {
        one: "1しゅうかん",
        other: "{{count}}しゅうかん"
      },
      aboutXMonths: {
        one: "やく1かげつ",
        other: "やく{{count}}かげつ"
      },
      xMonths: {
        one: "1かげつ",
        other: "{{count}}かげつ"
      },
      aboutXYears: {
        one: "やく1ねん",
        other: "やく{{count}}ねん"
      },
      xYears: {
        one: "1ねん",
        other: "{{count}}ねん"
      },
      overXYears: {
        one: "1ねんいじょう",
        other: "{{count}}ねんいじょう"
      },
      almostXYears: {
        one: "1ねんちかく",
        other: "{{count}}ねんちかく"
      }
    };
    var formatDistance = (token, count, options) => {
      options = options || {};
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options.addSuffix && tokenValue.oneWithSuffix) {
          result = tokenValue.oneWithSuffix;
        } else {
          result = tokenValue.one;
        }
      } else {
        if (options.addSuffix && tokenValue.otherWithSuffix) {
          result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
        } else {
          result = tokenValue.other.replace("{{count}}", String(count));
        }
      }
      if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "あと";
        } else {
          return result + "まえ";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ja-Hira/_lib/formatLong.js
var require_formatLong52 = __commonJS({
  "node_modules/date-fns/locale/ja-Hira/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "yねんMがつdにちEEEE",
      long: "yねんMがつdにち",
      medium: "y/MM/dd",
      short: "y/MM/dd"
    };
    var timeFormats = {
      full: "Hじmmふんssびょう zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ja-Hira/_lib/formatRelative.js
var require_formatRelative45 = __commonJS({
  "node_modules/date-fns/locale/ja-Hira/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "せんしゅうのeeeeのp",
      yesterday: "きのうのp",
      today: "きょうのp",
      tomorrow: "あしたのp",
      nextWeek: "よくしゅうのeeeeのp",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => {
      return formatRelativeLocale[token];
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ja-Hira/_lib/localize.js
var require_localize44 = __commonJS({
  "node_modules/date-fns/locale/ja-Hira/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["BC", "AC"],
      abbreviated: ["きげんぜん", "せいれき"],
      wide: ["きげんぜん", "せいれき"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["だい1しはんき", "だい2しはんき", "だい3しはんき", "だい4しはんき"]
    };
    var monthValues = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: [
        "1がつ",
        "2がつ",
        "3がつ",
        "4がつ",
        "5がつ",
        "6がつ",
        "7がつ",
        "8がつ",
        "9がつ",
        "10がつ",
        "11がつ",
        "12がつ"
      ],
      wide: [
        "1がつ",
        "2がつ",
        "3がつ",
        "4がつ",
        "5がつ",
        "6がつ",
        "7がつ",
        "8がつ",
        "9がつ",
        "10がつ",
        "11がつ",
        "12がつ"
      ]
    };
    var dayValues = {
      narrow: ["にち", "げつ", "か", "すい", "もく", "きん", "ど"],
      short: ["にち", "げつ", "か", "すい", "もく", "きん", "ど"],
      abbreviated: ["にち", "げつ", "か", "すい", "もく", "きん", "ど"],
      wide: [
        "にちようび",
        "げつようび",
        "かようび",
        "すいようび",
        "もくようび",
        "きんようび",
        "どようび"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ごぜん",
        pm: "ごご",
        midnight: "しんや",
        noon: "しょうご",
        morning: "あさ",
        afternoon: "ごご",
        evening: "よる",
        night: "しんや"
      },
      abbreviated: {
        am: "ごぜん",
        pm: "ごご",
        midnight: "しんや",
        noon: "しょうご",
        morning: "あさ",
        afternoon: "ごご",
        evening: "よる",
        night: "しんや"
      },
      wide: {
        am: "ごぜん",
        pm: "ごご",
        midnight: "しんや",
        noon: "しょうご",
        morning: "あさ",
        afternoon: "ごご",
        evening: "よる",
        night: "しんや"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ごぜん",
        pm: "ごご",
        midnight: "しんや",
        noon: "しょうご",
        morning: "あさ",
        afternoon: "ごご",
        evening: "よる",
        night: "しんや"
      },
      abbreviated: {
        am: "ごぜん",
        pm: "ごご",
        midnight: "しんや",
        noon: "しょうご",
        morning: "あさ",
        afternoon: "ごご",
        evening: "よる",
        night: "しんや"
      },
      wide: {
        am: "ごぜん",
        pm: "ごご",
        midnight: "しんや",
        noon: "しょうご",
        morning: "あさ",
        afternoon: "ごご",
        evening: "よる",
        night: "しんや"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = String(options == null ? void 0 : options.unit);
      switch (unit) {
        case "year":
          return `${number}ねん`;
        case "quarter":
          return `だい${number}しはんき`;
        case "month":
          return `${number}がつ`;
        case "week":
          return `だい${number}しゅう`;
        case "date":
          return `${number}にち`;
        case "hour":
          return `${number}じ`;
        case "minute":
          return `${number}ふん`;
        case "second":
          return `${number}びょう`;
        default:
          return `${number}`;
      }
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => Number(quarter) - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ja-Hira/_lib/match.js
var require_match43 = __commonJS({
  "node_modules/date-fns/locale/ja-Hira/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^だ?い?\d+(ねん|しはんき|がつ|しゅう|にち|じ|ふん|びょう)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(B\.?C\.?|A\.?D\.?)/i,
      abbreviated: /^(きげん[前後]|せいれき)/i,
      wide: /^(きげん[前後]|せいれき)/i
    };
    var parseEraPatterns = {
      narrow: [/^B/i, /^A/i],
      any: [/^(きげんぜん)/i, /^(せいれき|きげんご)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^Q[1234]/i,
      wide: /^だい[1234一二三四１２３４]しはんき/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
    };
    var matchMonthPatterns = {
      narrow: /^([123456789]|1[012])/,
      abbreviated: /^([123456789]|1[012])がつ/i,
      wide: /^([123456789]|1[012])がつ/i
    };
    var parseMonthPatterns = {
      any: [
        /^1\D/,
        /^2/,
        /^3/,
        /^4/,
        /^5/,
        /^6/,
        /^7/,
        /^8/,
        /^9/,
        /^10/,
        /^11/,
        /^12/
      ]
    };
    var matchDayPatterns = {
      narrow: /^(にち|げつ|か|すい|もく|きん|ど)/,
      short: /^(にち|げつ|か|すい|もく|きん|ど)/,
      abbreviated: /^(にち|げつ|か|すい|もく|きん|ど)/,
      wide: /^(にち|げつ|か|すい|もく|きん|ど)ようび/
    };
    var parseDayPatterns = {
      any: [/^にち/, /^げつ/, /^か/, /^すい/, /^もく/, /^きん/, /^ど/]
    };
    var matchDayPeriodPatterns = {
      any: /^(AM|PM|ごぜん|ごご|しょうご|しんや|まよなか|よる|あさ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(A|ごぜん)/i,
        pm: /^(P|ごご)/i,
        midnight: /^しんや|まよなか/i,
        noon: /^しょうご/i,
        morning: /^あさ/i,
        afternoon: /^ごご/i,
        evening: /^よる/i,
        night: /^しんや/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ja-Hira.js
var require_ja_Hira = __commonJS({
  "node_modules/date-fns/locale/ja-Hira.js"(exports) {
    "use strict";
    exports.jaHira = void 0;
    var _index = require_formatDistance45();
    var _index2 = require_formatLong52();
    var _index3 = require_formatRelative45();
    var _index4 = require_localize44();
    var _index5 = require_match43();
    var jaHira = exports.jaHira = {
      code: "ja-Hira",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ka/_lib/formatDistance.js
var require_formatDistance46 = __commonJS({
  "node_modules/date-fns/locale/ka/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        past: "{{count}} წამზე ნაკლები ხნის წინ",
        present: "{{count}} წამზე ნაკლები",
        future: "{{count}} წამზე ნაკლებში"
      },
      xSeconds: {
        past: "{{count}} წამის წინ",
        present: "{{count}} წამი",
        future: "{{count}} წამში"
      },
      halfAMinute: {
        past: "ნახევარი წუთის წინ",
        present: "ნახევარი წუთი",
        future: "ნახევარი წუთში"
      },
      lessThanXMinutes: {
        past: "{{count}} წუთზე ნაკლები ხნის წინ",
        present: "{{count}} წუთზე ნაკლები",
        future: "{{count}} წუთზე ნაკლებში"
      },
      xMinutes: {
        past: "{{count}} წუთის წინ",
        present: "{{count}} წუთი",
        future: "{{count}} წუთში"
      },
      aboutXHours: {
        past: "დაახლოებით {{count}} საათის წინ",
        present: "დაახლოებით {{count}} საათი",
        future: "დაახლოებით {{count}} საათში"
      },
      xHours: {
        past: "{{count}} საათის წინ",
        present: "{{count}} საათი",
        future: "{{count}} საათში"
      },
      xDays: {
        past: "{{count}} დღის წინ",
        present: "{{count}} დღე",
        future: "{{count}} დღეში"
      },
      aboutXWeeks: {
        past: "დაახლოებით {{count}} კვირას წინ",
        present: "დაახლოებით {{count}} კვირა",
        future: "დაახლოებით {{count}} კვირაში"
      },
      xWeeks: {
        past: "{{count}} კვირას კვირა",
        present: "{{count}} კვირა",
        future: "{{count}} კვირაში"
      },
      aboutXMonths: {
        past: "დაახლოებით {{count}} თვის წინ",
        present: "დაახლოებით {{count}} თვე",
        future: "დაახლოებით {{count}} თვეში"
      },
      xMonths: {
        past: "{{count}} თვის წინ",
        present: "{{count}} თვე",
        future: "{{count}} თვეში"
      },
      aboutXYears: {
        past: "დაახლოებით {{count}} წლის წინ",
        present: "დაახლოებით {{count}} წელი",
        future: "დაახლოებით {{count}} წელში"
      },
      xYears: {
        past: "{{count}} წლის წინ",
        present: "{{count}} წელი",
        future: "{{count}} წელში"
      },
      overXYears: {
        past: "{{count}} წელზე მეტი ხნის წინ",
        present: "{{count}} წელზე მეტი",
        future: "{{count}} წელზე მეტი ხნის შემდეგ"
      },
      almostXYears: {
        past: "თითქმის {{count}} წლის წინ",
        present: "თითქმის {{count}} წელი",
        future: "თითქმის {{count}} წელში"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if ((options == null ? void 0 : options.addSuffix) && options.comparison && options.comparison > 0) {
        result = tokenValue.future.replace("{{count}}", String(count));
      } else if (options == null ? void 0 : options.addSuffix) {
        result = tokenValue.past.replace("{{count}}", String(count));
      } else {
        result = tokenValue.present.replace("{{count}}", String(count));
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ka/_lib/formatLong.js
var require_formatLong53 = __commonJS({
  "node_modules/date-fns/locale/ka/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM, y",
      long: "do, MMMM, y",
      medium: "d, MMM, y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}'-ზე'",
      long: "{{date}} {{time}}'-ზე'",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ka/_lib/formatRelative.js
var require_formatRelative46 = __commonJS({
  "node_modules/date-fns/locale/ka/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'წინა' eeee p'-ზე'",
      yesterday: "'გუშინ' p'-ზე'",
      today: "'დღეს' p'-ზე'",
      tomorrow: "'ხვალ' p'-ზე'",
      nextWeek: "'შემდეგი' eeee p'-ზე'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ka/_lib/localize.js
var require_localize45 = __commonJS({
  "node_modules/date-fns/locale/ka/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ჩ.წ-მდე", "ჩ.წ"],
      abbreviated: ["ჩვ.წ-მდე", "ჩვ.წ"],
      wide: ["ჩვენს წელთაღრიცხვამდე", "ჩვენი წელთაღრიცხვით"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-ლი კვ", "2-ე კვ", "3-ე კვ", "4-ე კვ"],
      wide: ["1-ლი კვარტალი", "2-ე კვარტალი", "3-ე კვარტალი", "4-ე კვარტალი"]
    };
    var monthValues = {
      narrow: [
        "ია",
        "თე",
        "მა",
        "აპ",
        "მს",
        "ვნ",
        "ვლ",
        "აგ",
        "სე",
        "ოქ",
        "ნო",
        "დე"
      ],
      abbreviated: [
        "იან",
        "თებ",
        "მარ",
        "აპრ",
        "მაი",
        "ივნ",
        "ივლ",
        "აგვ",
        "სექ",
        "ოქტ",
        "ნოე",
        "დეკ"
      ],
      wide: [
        "იანვარი",
        "თებერვალი",
        "მარტი",
        "აპრილი",
        "მაისი",
        "ივნისი",
        "ივლისი",
        "აგვისტო",
        "სექტემბერი",
        "ოქტომბერი",
        "ნოემბერი",
        "დეკემბერი"
      ]
    };
    var dayValues = {
      narrow: ["კვ", "ორ", "სა", "ოთ", "ხუ", "პა", "შა"],
      short: ["კვი", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"],
      abbreviated: ["კვი", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"],
      wide: [
        "კვირა",
        "ორშაბათი",
        "სამშაბათი",
        "ოთხშაბათი",
        "ხუთშაბათი",
        "პარასკევი",
        "შაბათი"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "შუაღამე",
        noon: "შუადღე",
        morning: "დილა",
        afternoon: "საღამო",
        evening: "საღამო",
        night: "ღამე"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "შუაღამე",
        noon: "შუადღე",
        morning: "დილა",
        afternoon: "საღამო",
        evening: "საღამო",
        night: "ღამე"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "შუაღამე",
        noon: "შუადღე",
        morning: "დილა",
        afternoon: "საღამო",
        evening: "საღამო",
        night: "ღამე"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "შუაღამით",
        noon: "შუადღისას",
        morning: "დილით",
        afternoon: "ნაშუადღევს",
        evening: "საღამოს",
        night: "ღამით"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "შუაღამით",
        noon: "შუადღისას",
        morning: "დილით",
        afternoon: "ნაშუადღევს",
        evening: "საღამოს",
        night: "ღამით"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "შუაღამით",
        noon: "შუადღისას",
        morning: "დილით",
        afternoon: "ნაშუადღევს",
        evening: "საღამოს",
        night: "ღამით"
      }
    };
    var ordinalNumber = (dirtyNumber) => {
      const number = Number(dirtyNumber);
      if (number === 1) {
        return number + "-ლი";
      }
      return number + "-ე";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ka/_lib/match.js
var require_match44 = __commonJS({
  "node_modules/date-fns/locale/ka/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-ლი|-ე)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ჩვ?\.წ)/i,
      abbreviated: /^(ჩვ?\.წ)/i,
      wide: /^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე|ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i
    };
    var parseEraPatterns = {
      any: [
        /^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე)/i,
        /^(ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i
      ]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]-(ლი|ე)? კვ/i,
      wide: /^[1234]-(ლი|ე)? კვარტალი/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      any: /^(ია|თე|მა|აპ|მს|ვნ|ვლ|აგ|სე|ოქ|ნო|დე)/i
    };
    var parseMonthPatterns = {
      any: [
        /^ია/i,
        /^თ/i,
        /^მარ/i,
        /^აპ/i,
        /^მაი/i,
        /^ი?ვნ/i,
        /^ი?ვლ/i,
        /^აგ/i,
        /^ს/i,
        /^ო/i,
        /^ნ/i,
        /^დ/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(კვ|ორ|სა|ოთ|ხუ|პა|შა)/i,
      short: /^(კვი|ორშ|სამ|ოთხ|ხუთ|პარ|შაბ)/i,
      wide: /^(კვირა|ორშაბათი|სამშაბათი|ოთხშაბათი|ხუთშაბათი|პარასკევი|შაბათი)/i
    };
    var parseDayPatterns = {
      any: [/^კვ/i, /^ორ/i, /^სა/i, /^ოთ/i, /^ხუ/i, /^პა/i, /^შა/i]
    };
    var matchDayPeriodPatterns = {
      any: /^([ap]\.?\s?m\.?|შუაღ|დილ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^შუაღ/i,
        noon: /^შუადღ/i,
        morning: /^დილ/i,
        afternoon: /ნაშუადღევს/i,
        evening: /საღამო/i,
        night: /ღამ/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ka.js
var require_ka = __commonJS({
  "node_modules/date-fns/locale/ka.js"(exports) {
    "use strict";
    exports.ka = void 0;
    var _index = require_formatDistance46();
    var _index2 = require_formatLong53();
    var _index3 = require_formatRelative46();
    var _index4 = require_localize45();
    var _index5 = require_match44();
    var ka = exports.ka = {
      code: "ka",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/kk/_lib/formatDistance.js
var require_formatDistance47 = __commonJS({
  "node_modules/date-fns/locale/kk/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        regular: {
          one: "1 секундтан аз",
          singularNominative: "{{count}} секундтан аз",
          singularGenitive: "{{count}} секундтан аз",
          pluralGenitive: "{{count}} секундтан аз"
        },
        future: {
          one: "бір секундтан кейін",
          singularNominative: "{{count}} секундтан кейін",
          singularGenitive: "{{count}} секундтан кейін",
          pluralGenitive: "{{count}} секундтан кейін"
        }
      },
      xSeconds: {
        regular: {
          singularNominative: "{{count}} секунд",
          singularGenitive: "{{count}} секунд",
          pluralGenitive: "{{count}} секунд"
        },
        past: {
          singularNominative: "{{count}} секунд бұрын",
          singularGenitive: "{{count}} секунд бұрын",
          pluralGenitive: "{{count}} секунд бұрын"
        },
        future: {
          singularNominative: "{{count}} секундтан кейін",
          singularGenitive: "{{count}} секундтан кейін",
          pluralGenitive: "{{count}} секундтан кейін"
        }
      },
      halfAMinute: (options) => {
        if (options == null ? void 0 : options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            return "жарты минут ішінде";
          } else {
            return "жарты минут бұрын";
          }
        }
        return "жарты минут";
      },
      lessThanXMinutes: {
        regular: {
          one: "1 минуттан аз",
          singularNominative: "{{count}} минуттан аз",
          singularGenitive: "{{count}} минуттан аз",
          pluralGenitive: "{{count}} минуттан аз"
        },
        future: {
          one: "минуттан кем ",
          singularNominative: "{{count}} минуттан кем",
          singularGenitive: "{{count}} минуттан кем",
          pluralGenitive: "{{count}} минуттан кем"
        }
      },
      xMinutes: {
        regular: {
          singularNominative: "{{count}} минут",
          singularGenitive: "{{count}} минут",
          pluralGenitive: "{{count}} минут"
        },
        past: {
          singularNominative: "{{count}} минут бұрын",
          singularGenitive: "{{count}} минут бұрын",
          pluralGenitive: "{{count}} минут бұрын"
        },
        future: {
          singularNominative: "{{count}} минуттан кейін",
          singularGenitive: "{{count}} минуттан кейін",
          pluralGenitive: "{{count}} минуттан кейін"
        }
      },
      aboutXHours: {
        regular: {
          singularNominative: "шамамен {{count}} сағат",
          singularGenitive: "шамамен {{count}} сағат",
          pluralGenitive: "шамамен {{count}} сағат"
        },
        future: {
          singularNominative: "шамамен {{count}} сағаттан кейін",
          singularGenitive: "шамамен {{count}} сағаттан кейін",
          pluralGenitive: "шамамен {{count}} сағаттан кейін"
        }
      },
      xHours: {
        regular: {
          singularNominative: "{{count}} сағат",
          singularGenitive: "{{count}} сағат",
          pluralGenitive: "{{count}} сағат"
        }
      },
      xDays: {
        regular: {
          singularNominative: "{{count}} күн",
          singularGenitive: "{{count}} күн",
          pluralGenitive: "{{count}} күн"
        },
        future: {
          singularNominative: "{{count}} күннен кейін",
          singularGenitive: "{{count}} күннен кейін",
          pluralGenitive: "{{count}} күннен кейін"
        }
      },
      aboutXWeeks: {
        type: "weeks",
        one: "шамамен 1 апта",
        other: "шамамен {{count}} апта"
      },
      xWeeks: {
        type: "weeks",
        one: "1 апта",
        other: "{{count}} апта"
      },
      aboutXMonths: {
        regular: {
          singularNominative: "шамамен {{count}} ай",
          singularGenitive: "шамамен {{count}} ай",
          pluralGenitive: "шамамен {{count}} ай"
        },
        future: {
          singularNominative: "шамамен {{count}} айдан кейін",
          singularGenitive: "шамамен {{count}} айдан кейін",
          pluralGenitive: "шамамен {{count}} айдан кейін"
        }
      },
      xMonths: {
        regular: {
          singularNominative: "{{count}} ай",
          singularGenitive: "{{count}} ай",
          pluralGenitive: "{{count}} ай"
        }
      },
      aboutXYears: {
        regular: {
          singularNominative: "шамамен {{count}} жыл",
          singularGenitive: "шамамен {{count}} жыл",
          pluralGenitive: "шамамен {{count}} жыл"
        },
        future: {
          singularNominative: "шамамен {{count}} жылдан кейін",
          singularGenitive: "шамамен {{count}} жылдан кейін",
          pluralGenitive: "шамамен {{count}} жылдан кейін"
        }
      },
      xYears: {
        regular: {
          singularNominative: "{{count}} жыл",
          singularGenitive: "{{count}} жыл",
          pluralGenitive: "{{count}} жыл"
        },
        future: {
          singularNominative: "{{count}} жылдан кейін",
          singularGenitive: "{{count}} жылдан кейін",
          pluralGenitive: "{{count}} жылдан кейін"
        }
      },
      overXYears: {
        regular: {
          singularNominative: "{{count}} жылдан астам",
          singularGenitive: "{{count}} жылдан астам",
          pluralGenitive: "{{count}} жылдан астам"
        },
        future: {
          singularNominative: "{{count}} жылдан астам",
          singularGenitive: "{{count}} жылдан астам",
          pluralGenitive: "{{count}} жылдан астам"
        }
      },
      almostXYears: {
        regular: {
          singularNominative: "{{count}} жылға жақын",
          singularGenitive: "{{count}} жылға жақын",
          pluralGenitive: "{{count}} жылға жақын"
        },
        future: {
          singularNominative: "{{count}} жылдан кейін",
          singularGenitive: "{{count}} жылдан кейін",
          pluralGenitive: "{{count}} жылдан кейін"
        }
      }
    };
    function declension(scheme, count) {
      if (scheme.one && count === 1)
        return scheme.one;
      const rem10 = count % 10;
      const rem100 = count % 100;
      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace("{{count}}", String(count));
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace("{{count}}", String(count));
      } else {
        return scheme.pluralGenitive.replace("{{count}}", String(count));
      }
    }
    var formatDistance = (token, count, options) => {
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "function")
        return tokenValue(options);
      if (tokenValue.type === "weeks") {
        return count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          if (tokenValue.future) {
            return declension(tokenValue.future, count);
          } else {
            return declension(tokenValue.regular, count) + " кейін";
          }
        } else {
          if (tokenValue.past) {
            return declension(tokenValue.past, count);
          } else {
            return declension(tokenValue.regular, count) + " бұрын";
          }
        }
      } else {
        return declension(tokenValue.regular, count);
      }
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/kk/_lib/formatLong.js
var require_formatLong54 = __commonJS({
  "node_modules/date-fns/locale/kk/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM y 'ж.'",
      long: "do MMMM y 'ж.'",
      medium: "d MMM y 'ж.'",
      short: "dd.MM.yyyy"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      any: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/kk/_lib/formatRelative.js
var require_formatRelative47 = __commonJS({
  "node_modules/date-fns/locale/kk/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var accusativeWeekdays = [
      "жексенбіде",
      "дүйсенбіде",
      "сейсенбіде",
      "сәрсенбіде",
      "бейсенбіде",
      "жұмада",
      "сенбіде"
    ];
    function lastWeek(day) {
      const weekday = accusativeWeekdays[day];
      return "'өткен " + weekday + " сағат' p'-де'";
    }
    function thisWeek(day) {
      const weekday = accusativeWeekdays[day];
      return "'" + weekday + " сағат' p'-де'";
    }
    function nextWeek(day) {
      const weekday = accusativeWeekdays[day];
      return "'келесі " + weekday + " сағат' p'-де'";
    }
    var formatRelativeLocale = {
      lastWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'кеше сағат' p'-де'",
      today: "'бүгін сағат' p'-де'",
      tomorrow: "'ертең сағат' p'-де'",
      nextWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/kk/_lib/localize.js
var require_localize46 = __commonJS({
  "node_modules/date-fns/locale/kk/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["б.з.д.", "б.з."],
      abbreviated: ["б.з.д.", "б.з."],
      wide: ["біздің заманымызға дейін", "біздің заманымыз"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-ші тоқ.", "2-ші тоқ.", "3-ші тоқ.", "4-ші тоқ."],
      wide: ["1-ші тоқсан", "2-ші тоқсан", "3-ші тоқсан", "4-ші тоқсан"]
    };
    var monthValues = {
      narrow: ["Қ", "А", "Н", "С", "М", "М", "Ш", "Т", "Қ", "Қ", "Қ", "Ж"],
      abbreviated: [
        "қаң",
        "ақп",
        "нау",
        "сәу",
        "мам",
        "мау",
        "шіл",
        "там",
        "қыр",
        "қаз",
        "қар",
        "жел"
      ],
      wide: [
        "қаңтар",
        "ақпан",
        "наурыз",
        "сәуір",
        "мамыр",
        "маусым",
        "шілде",
        "тамыз",
        "қыркүйек",
        "қазан",
        "қараша",
        "желтоқсан"
      ]
    };
    var formattingMonthValues = {
      narrow: ["Қ", "А", "Н", "С", "М", "М", "Ш", "Т", "Қ", "Қ", "Қ", "Ж"],
      abbreviated: [
        "қаң",
        "ақп",
        "нау",
        "сәу",
        "мам",
        "мау",
        "шіл",
        "там",
        "қыр",
        "қаз",
        "қар",
        "жел"
      ],
      wide: [
        "қаңтар",
        "ақпан",
        "наурыз",
        "сәуір",
        "мамыр",
        "маусым",
        "шілде",
        "тамыз",
        "қыркүйек",
        "қазан",
        "қараша",
        "желтоқсан"
      ]
    };
    var dayValues = {
      narrow: ["Ж", "Д", "С", "С", "Б", "Ж", "С"],
      short: ["жс", "дс", "сс", "ср", "бс", "жм", "сб"],
      abbreviated: ["жс", "дс", "сс", "ср", "бс", "жм", "сб"],
      wide: [
        "жексенбі",
        "дүйсенбі",
        "сейсенбі",
        "сәрсенбі",
        "бейсенбі",
        "жұма",
        "сенбі"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ТД",
        pm: "ТК",
        midnight: "түн ортасы",
        noon: "түс",
        morning: "таң",
        afternoon: "күндіз",
        evening: "кеш",
        night: "түн"
      },
      wide: {
        am: "ТД",
        pm: "ТК",
        midnight: "түн ортасы",
        noon: "түс",
        morning: "таң",
        afternoon: "күндіз",
        evening: "кеш",
        night: "түн"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ТД",
        pm: "ТК",
        midnight: "түн ортасында",
        noon: "түс",
        morning: "таң",
        afternoon: "күн",
        evening: "кеш",
        night: "түн"
      },
      wide: {
        am: "ТД",
        pm: "ТК",
        midnight: "түн ортасында",
        noon: "түсте",
        morning: "таңертең",
        afternoon: "күндіз",
        evening: "кеште",
        night: "түнде"
      }
    };
    var suffixes = {
      0: "-ші",
      1: "-ші",
      2: "-ші",
      3: "-ші",
      4: "-ші",
      5: "-ші",
      6: "-шы",
      7: "-ші",
      8: "-ші",
      9: "-шы",
      10: "-шы",
      20: "-шы",
      30: "-шы",
      40: "-шы",
      50: "-ші",
      60: "-шы",
      70: "-ші",
      80: "-ші",
      90: "-шы",
      100: "-ші"
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      const mod10 = number % 10;
      const b = number >= 100 ? 100 : null;
      const suffix = suffixes[number] || suffixes[mod10] || b && suffixes[b] || "";
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/kk/_lib/match.js
var require_match45 = __commonJS({
  "node_modules/date-fns/locale/kk/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?(ші|шы))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((б )?з\.?\s?д\.?)/i,
      abbreviated: /^((б )?з\.?\s?д\.?)/i,
      wide: /^(біздің заманымызға дейін|біздің заманымыз|біздің заманымыздан)/i
    };
    var parseEraPatterns = {
      any: [/^б/i, /^з/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?ші)? тоқ.?/i,
      wide: /^[1234](-?ші)? тоқсан/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(қ|а|н|с|м|мау|ш|т|қыр|қаз|қар|ж)/i,
      abbreviated: /^(қаң|ақп|нау|сәу|мам|мау|шіл|там|қыр|қаз|қар|жел)/i,
      wide: /^(қаңтар|ақпан|наурыз|сәуір|мамыр|маусым|шілде|тамыз|қыркүйек|қазан|қараша|желтоқсан)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^қ/i,
        /^а/i,
        /^н/i,
        /^с/i,
        /^м/i,
        /^м/i,
        /^ш/i,
        /^т/i,
        /^қ/i,
        /^қ/i,
        /^қ/i,
        /^ж/i
      ],
      abbreviated: [
        /^қаң/i,
        /^ақп/i,
        /^нау/i,
        /^сәу/i,
        /^мам/i,
        /^мау/i,
        /^шіл/i,
        /^там/i,
        /^қыр/i,
        /^қаз/i,
        /^қар/i,
        /^жел/i
      ],
      any: [
        /^қ/i,
        /^а/i,
        /^н/i,
        /^с/i,
        /^м/i,
        /^м/i,
        /^ш/i,
        /^т/i,
        /^қ/i,
        /^қ/i,
        /^қ/i,
        /^ж/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(ж|д|с|с|б|ж|с)/i,
      short: /^(жс|дс|сс|ср|бс|жм|сб)/i,
      wide: /^(жексенбі|дүйсенбі|сейсенбі|сәрсенбі|бейсенбі|жұма|сенбі)/i
    };
    var parseDayPatterns = {
      narrow: [/^ж/i, /^д/i, /^с/i, /^с/i, /^б/i, /^ж/i, /^с/i],
      short: [/^жс/i, /^дс/i, /^сс/i, /^ср/i, /^бс/i, /^жм/i, /^сб/i],
      any: [
        /^ж[ек]/i,
        /^д[үй]/i,
        /^сe[й]/i,
        /^сә[р]/i,
        /^б[ей]/i,
        /^ж[ұм]/i,
        /^се[н]/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
      wide: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
      any: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ТД/i,
        pm: /^ТК/i,
        midnight: /^түн орта/i,
        noon: /^күндіз/i,
        morning: /таң/i,
        afternoon: /түс/i,
        evening: /кеш/i,
        night: /түн/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/kk.js
var require_kk = __commonJS({
  "node_modules/date-fns/locale/kk.js"(exports) {
    "use strict";
    exports.kk = void 0;
    var _index = require_formatDistance47();
    var _index2 = require_formatLong54();
    var _index3 = require_formatRelative47();
    var _index4 = require_localize46();
    var _index5 = require_match45();
    var kk = exports.kk = {
      code: "kk",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/km/_lib/formatDistance.js
var require_formatDistance48 = __commonJS({
  "node_modules/date-fns/locale/km/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: "តិចជាង {{count}} វិនាទី",
      xSeconds: "{{count}} វិនាទី",
      halfAMinute: "កន្លះនាទី",
      lessThanXMinutes: "តិចជាង {{count}} នាទី",
      xMinutes: "{{count}} នាទី",
      aboutXHours: "ប្រហែល {{count}} ម៉ោង",
      xHours: "{{count}} ម៉ោង",
      xDays: "{{count}} ថ្ងៃ",
      aboutXWeeks: "ប្រហែល {{count}} សប្តាហ៍",
      xWeeks: "{{count}} សប្តាហ៍",
      aboutXMonths: "ប្រហែល {{count}} ខែ",
      xMonths: "{{count}} ខែ",
      aboutXYears: "ប្រហែល {{count}} ឆ្នាំ",
      xYears: "{{count}} ឆ្នាំ",
      overXYears: "ជាង {{count}} ឆ្នាំ",
      almostXYears: "ជិត {{count}} ឆ្នាំ"
    };
    var formatDistance = (token, count, options) => {
      const tokenValue = formatDistanceLocale[token];
      let result = tokenValue;
      if (typeof count === "number") {
        result = result.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "ក្នុងរយៈពេល " + result;
        } else {
          return result + "មុន";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/km/_lib/formatLong.js
var require_formatLong55 = __commonJS({
  "node_modules/date-fns/locale/km/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE do MMMM y",
      long: "do MMMM y",
      medium: "d MMM y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a",
      long: "h:mm:ss a",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'ម៉ោង' {{time}}",
      long: "{{date}} 'ម៉ោង' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/km/_lib/formatRelative.js
var require_formatRelative48 = __commonJS({
  "node_modules/date-fns/locale/km/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'ថ្ងៃ'eeee'ស​ប្តា​ហ៍​មុនម៉ោង' p",
      yesterday: "'ម្សិលមិញនៅម៉ោង' p",
      today: "'ថ្ងៃនេះម៉ោង' p",
      tomorrow: "'ថ្ងៃស្អែកម៉ោង' p",
      nextWeek: "'ថ្ងៃ'eeee'ស​ប្តា​ហ៍​ក្រោយម៉ោង' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/km/_lib/localize.js
var require_localize47 = __commonJS({
  "node_modules/date-fns/locale/km/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ម.គស", "គស"],
      abbreviated: ["មុនគ.ស", "គ.ស"],
      wide: ["មុនគ្រិស្តសករាជ", "នៃគ្រិស្តសករាជ"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["ត្រីមាសទី 1", "ត្រីមាសទី 2", "ត្រីមាសទី 3", "ត្រីមាសទី 4"]
    };
    var monthValues = {
      narrow: [
        "ម.ក",
        "ក.ម",
        "មិ",
        "ម.ស",
        "ឧ.ស",
        "ម.ថ",
        "ក.ដ",
        "សី",
        "កញ",
        "តុ",
        "វិ",
        "ធ"
      ],
      abbreviated: [
        "មករា",
        "កុម្ភៈ",
        "មីនា",
        "មេសា",
        "ឧសភា",
        "មិថុនា",
        "កក្កដា",
        "សីហា",
        "កញ្ញា",
        "តុលា",
        "វិច្ឆិកា",
        "ធ្នូ"
      ],
      wide: [
        "មករា",
        "កុម្ភៈ",
        "មីនា",
        "មេសា",
        "ឧសភា",
        "មិថុនា",
        "កក្កដា",
        "សីហា",
        "កញ្ញា",
        "តុលា",
        "វិច្ឆិកា",
        "ធ្នូ"
      ]
    };
    var dayValues = {
      narrow: ["អា", "ច", "អ", "ព", "ព្រ", "សុ", "ស"],
      short: ["អា", "ច", "អ", "ព", "ព្រ", "សុ", "ស"],
      abbreviated: ["អា", "ច", "អ", "ព", "ព្រ", "សុ", "ស"],
      wide: ["អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ព្រឹក",
        pm: "ល្ងាច",
        midnight: "​ពេលកណ្ដាលអធ្រាត្រ",
        noon: "ពេលថ្ងៃត្រង់",
        morning: "ពេលព្រឹក",
        afternoon: "ពេលរសៀល",
        evening: "ពេលល្ងាច",
        night: "ពេលយប់"
      },
      abbreviated: {
        am: "ព្រឹក",
        pm: "ល្ងាច",
        midnight: "​ពេលកណ្ដាលអធ្រាត្រ",
        noon: "ពេលថ្ងៃត្រង់",
        morning: "ពេលព្រឹក",
        afternoon: "ពេលរសៀល",
        evening: "ពេលល្ងាច",
        night: "ពេលយប់"
      },
      wide: {
        am: "ព្រឹក",
        pm: "ល្ងាច",
        midnight: "​ពេលកណ្ដាលអធ្រាត្រ",
        noon: "ពេលថ្ងៃត្រង់",
        morning: "ពេលព្រឹក",
        afternoon: "ពេលរសៀល",
        evening: "ពេលល្ងាច",
        night: "ពេលយប់"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ព្រឹក",
        pm: "ល្ងាច",
        midnight: "​ពេលកណ្ដាលអធ្រាត្រ",
        noon: "ពេលថ្ងៃត្រង់",
        morning: "ពេលព្រឹក",
        afternoon: "ពេលរសៀល",
        evening: "ពេលល្ងាច",
        night: "ពេលយប់"
      },
      abbreviated: {
        am: "ព្រឹក",
        pm: "ល្ងាច",
        midnight: "​ពេលកណ្ដាលអធ្រាត្រ",
        noon: "ពេលថ្ងៃត្រង់",
        morning: "ពេលព្រឹក",
        afternoon: "ពេលរសៀល",
        evening: "ពេលល្ងាច",
        night: "ពេលយប់"
      },
      wide: {
        am: "ព្រឹក",
        pm: "ល្ងាច",
        midnight: "​ពេលកណ្ដាលអធ្រាត្រ",
        noon: "ពេលថ្ងៃត្រង់",
        morning: "ពេលព្រឹក",
        afternoon: "ពេលរសៀល",
        evening: "ពេលល្ងាច",
        night: "ពេលយប់"
      }
    };
    var ordinalNumber = (dirtyNumber, _) => {
      const number = Number(dirtyNumber);
      return number.toString();
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/km/_lib/match.js
var require_match46 = __commonJS({
  "node_modules/date-fns/locale/km/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ម\.)?គស/i,
      abbreviated: /^(មុន)?គ\.ស/i,
      wide: /^(មុន|នៃ)គ្រិស្តសករាជ/i
    };
    var parseEraPatterns = {
      any: [/^(ម|មុន)គ\.?ស/i, /^(នៃ)?គ\.?ស/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^(ត្រីមាស)(ទី)?\s?[1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(ម\.ក|ក\.ម|មិ|ម\.ស|ឧ\.ស|ម\.ថ|ក\.ដ|សី|កញ|តុ|វិ|ធ)/i,
      abbreviated: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i,
      wide: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ម\.ក/i,
        /^ក\.ម/i,
        /^មិ/i,
        /^ម\.ស/i,
        /^ឧ\.ស/i,
        /^ម\.ថ/i,
        /^ក\.ដ/i,
        /^សី/i,
        /^កញ/i,
        /^តុ/i,
        /^វិ/i,
        /^ធ/i
      ],
      any: [
        /^មក/i,
        /^កុ/i,
        /^មីន/i,
        /^មេ/i,
        /^ឧស/i,
        /^មិថ/i,
        /^កក/i,
        /^សី/i,
        /^កញ/i,
        /^តុ/i,
        /^វិច/i,
        /^ធ/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
      short: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
      abbreviated: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
      wide: /^(អាទិត្យ|ចន្ទ|អង្គារ|ពុធ|ព្រហស្បតិ៍|សុក្រ|សៅរ៍)/i
    };
    var parseDayPatterns = {
      narrow: [/^អា/i, /^ច/i, /^អ/i, /^ព/i, /^ព្រ/i, /^សុ/i, /^ស/i],
      any: [/^អា/i, /^ច/i, /^អ/i, /^ព/i, /^ព្រ/i, /^សុ/i, /^សៅ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i,
      any: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ព្រឹក/i,
        pm: /^ល្ងាច/i,
        midnight: /^ពេលកណ្ដាលអធ្រាត្រ/i,
        noon: /^ពេលថ្ងៃត្រង់/i,
        morning: /ពេលព្រឹក/i,
        afternoon: /ពេលរសៀល/i,
        evening: /ពេលល្ងាច/i,
        night: /ពេលយប់/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/km.js
var require_km = __commonJS({
  "node_modules/date-fns/locale/km.js"(exports) {
    "use strict";
    exports.km = void 0;
    var _index = require_formatDistance48();
    var _index2 = require_formatLong55();
    var _index3 = require_formatRelative48();
    var _index4 = require_localize47();
    var _index5 = require_match46();
    var km = exports.km = {
      code: "km",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/kn/_lib/formatDistance.js
var require_formatDistance49 = __commonJS({
  "node_modules/date-fns/locale/kn/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          default: "1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ",
          future: "1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ",
          past: "1 ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ"
        },
        other: {
          default: "{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ",
          future: "{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ",
          past: "{{count}} ಸೆಕೆಂಡ್‌ಗಿಂತ ಕಡಿಮೆ"
        }
      },
      xSeconds: {
        one: {
          default: "1 ಸೆಕೆಂಡ್",
          future: "1 ಸೆಕೆಂಡ್‌ನಲ್ಲಿ",
          past: "1 ಸೆಕೆಂಡ್ ಹಿಂದೆ"
        },
        other: {
          default: "{{count}} ಸೆಕೆಂಡುಗಳು",
          future: "{{count}} ಸೆಕೆಂಡ್‌ಗಳಲ್ಲಿ",
          past: "{{count}} ಸೆಕೆಂಡ್ ಹಿಂದೆ"
        }
      },
      halfAMinute: {
        other: {
          default: "ಅರ್ಧ ನಿಮಿಷ",
          future: "ಅರ್ಧ ನಿಮಿಷದಲ್ಲಿ",
          past: "ಅರ್ಧ ನಿಮಿಷದ ಹಿಂದೆ"
        }
      },
      lessThanXMinutes: {
        one: {
          default: "1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ",
          future: "1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ",
          past: "1 ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ"
        },
        other: {
          default: "{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ",
          future: "{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ",
          past: "{{count}} ನಿಮಿಷಕ್ಕಿಂತ ಕಡಿಮೆ"
        }
      },
      xMinutes: {
        one: {
          default: "1 ನಿಮಿಷ",
          future: "1 ನಿಮಿಷದಲ್ಲಿ",
          past: "1 ನಿಮಿಷದ ಹಿಂದೆ"
        },
        other: {
          default: "{{count}} ನಿಮಿಷಗಳು",
          future: "{{count}} ನಿಮಿಷಗಳಲ್ಲಿ",
          past: "{{count}} ನಿಮಿಷಗಳ ಹಿಂದೆ"
        }
      },
      aboutXHours: {
        one: {
          default: "ಸುಮಾರು 1 ಗಂಟೆ",
          future: "ಸುಮಾರು 1 ಗಂಟೆಯಲ್ಲಿ",
          past: "ಸುಮಾರು 1 ಗಂಟೆ ಹಿಂದೆ"
        },
        other: {
          default: "ಸುಮಾರು {{count}} ಗಂಟೆಗಳು",
          future: "ಸುಮಾರು {{count}} ಗಂಟೆಗಳಲ್ಲಿ",
          past: "ಸುಮಾರು {{count}} ಗಂಟೆಗಳ ಹಿಂದೆ"
        }
      },
      xHours: {
        one: {
          default: "1 ಗಂಟೆ",
          future: "1 ಗಂಟೆಯಲ್ಲಿ",
          past: "1 ಗಂಟೆ ಹಿಂದೆ"
        },
        other: {
          default: "{{count}} ಗಂಟೆಗಳು",
          future: "{{count}} ಗಂಟೆಗಳಲ್ಲಿ",
          past: "{{count}} ಗಂಟೆಗಳ ಹಿಂದೆ"
        }
      },
      xDays: {
        one: {
          default: "1 ದಿನ",
          future: "1 ದಿನದಲ್ಲಿ",
          past: "1 ದಿನದ ಹಿಂದೆ"
        },
        other: {
          default: "{{count}} ದಿನಗಳು",
          future: "{{count}} ದಿನಗಳಲ್ಲಿ",
          past: "{{count}} ದಿನಗಳ ಹಿಂದೆ"
        }
      },
      // TODO
      // aboutXWeeks: {},
      // TODO
      // xWeeks: {},
      aboutXMonths: {
        one: {
          default: "ಸುಮಾರು 1 ತಿಂಗಳು",
          future: "ಸುಮಾರು 1 ತಿಂಗಳಲ್ಲಿ",
          past: "ಸುಮಾರು 1 ತಿಂಗಳ ಹಿಂದೆ"
        },
        other: {
          default: "ಸುಮಾರು {{count}} ತಿಂಗಳು",
          future: "ಸುಮಾರು {{count}} ತಿಂಗಳುಗಳಲ್ಲಿ",
          past: "ಸುಮಾರು {{count}} ತಿಂಗಳುಗಳ ಹಿಂದೆ"
        }
      },
      xMonths: {
        one: {
          default: "1 ತಿಂಗಳು",
          future: "1 ತಿಂಗಳಲ್ಲಿ",
          past: "1 ತಿಂಗಳ ಹಿಂದೆ"
        },
        other: {
          default: "{{count}} ತಿಂಗಳು",
          future: "{{count}} ತಿಂಗಳುಗಳಲ್ಲಿ",
          past: "{{count}} ತಿಂಗಳುಗಳ ಹಿಂದೆ"
        }
      },
      aboutXYears: {
        one: {
          default: "ಸುಮಾರು 1 ವರ್ಷ",
          future: "ಸುಮಾರು 1 ವರ್ಷದಲ್ಲಿ",
          past: "ಸುಮಾರು 1 ವರ್ಷದ ಹಿಂದೆ"
        },
        other: {
          default: "ಸುಮಾರು {{count}} ವರ್ಷಗಳು",
          future: "ಸುಮಾರು {{count}} ವರ್ಷಗಳಲ್ಲಿ",
          past: "ಸುಮಾರು {{count}} ವರ್ಷಗಳ ಹಿಂದೆ"
        }
      },
      xYears: {
        one: {
          default: "1 ವರ್ಷ",
          future: "1 ವರ್ಷದಲ್ಲಿ",
          past: "1 ವರ್ಷದ ಹಿಂದೆ"
        },
        other: {
          default: "{{count}} ವರ್ಷಗಳು",
          future: "{{count}} ವರ್ಷಗಳಲ್ಲಿ",
          past: "{{count}} ವರ್ಷಗಳ ಹಿಂದೆ"
        }
      },
      overXYears: {
        one: {
          default: "1 ವರ್ಷದ ಮೇಲೆ",
          future: "1 ವರ್ಷದ ಮೇಲೆ",
          past: "1 ವರ್ಷದ ಮೇಲೆ"
        },
        other: {
          default: "{{count}} ವರ್ಷಗಳ ಮೇಲೆ",
          future: "{{count}} ವರ್ಷಗಳ ಮೇಲೆ",
          past: "{{count}} ವರ್ಷಗಳ ಮೇಲೆ"
        }
      },
      almostXYears: {
        one: {
          default: "ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ",
          future: "ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ",
          past: "ಬಹುತೇಕ 1 ವರ್ಷದಲ್ಲಿ"
        },
        other: {
          default: "ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ",
          future: "ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ",
          past: "ಬಹುತೇಕ {{count}} ವರ್ಷಗಳಲ್ಲಿ"
        }
      }
    };
    function getResultByTense(parentToken, options) {
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return parentToken.future;
        } else {
          return parentToken.past;
        }
      }
      return parentToken.default;
    }
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (tokenValue.one && count === 1) {
        result = getResultByTense(tokenValue.one, options);
      } else {
        result = getResultByTense(tokenValue.other, options);
      }
      return result.replace("{{count}}", String(count));
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/kn/_lib/formatLong.js
var require_formatLong56 = __commonJS({
  "node_modules/date-fns/locale/kn/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM d, y",
      // CLDR 1816
      long: "MMMM d, y",
      // CLDR 1817
      medium: "MMM d, y",
      // CLDR 1818
      short: "d/M/yy"
      // CLDR 1819
    };
    var timeFormats = {
      full: "hh:mm:ss a zzzz",
      // CLDR 1820
      long: "hh:mm:ss a z",
      // CLDR 1821
      medium: "hh:mm:ss a",
      // CLDR 1822
      short: "hh:mm a"
      // CLDR 1823
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      // CLDR 1824
      long: "{{date}} {{time}}",
      // CLDR 1825
      medium: "{{date}} {{time}}",
      // CLDR 1826
      short: "{{date}} {{time}}"
      // CLDR 1827
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/kn/_lib/formatRelative.js
var require_formatRelative49 = __commonJS({
  "node_modules/date-fns/locale/kn/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'ಕಳೆದ' eeee p 'ಕ್ಕೆ'",
      yesterday: "'ನಿನ್ನೆ' p 'ಕ್ಕೆ'",
      today: "'ಇಂದು' p 'ಕ್ಕೆ'",
      tomorrow: "'ನಾಳೆ' p 'ಕ್ಕೆ'",
      nextWeek: "eeee p 'ಕ್ಕೆ'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/kn/_lib/localize.js
var require_localize48 = __commonJS({
  "node_modules/date-fns/locale/kn/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ಕ್ರಿ.ಪೂ", "ಕ್ರಿ.ಶ"],
      abbreviated: ["ಕ್ರಿ.ಪೂ", "ಕ್ರಿ.ಶ"],
      // CLDR #1618, #1620
      wide: ["ಕ್ರಿಸ್ತ ಪೂರ್ವ", "ಕ್ರಿಸ್ತ ಶಕ"]
      // CLDR #1614, #1616
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["ತ್ರೈ 1", "ತ್ರೈ 2", "ತ್ರೈ 3", "ತ್ರೈ 4"],
      // CLDR #1630 - #1638
      wide: ["1ನೇ ತ್ರೈಮಾಸಿಕ", "2ನೇ ತ್ರೈಮಾಸಿಕ", "3ನೇ ತ್ರೈಮಾಸಿಕ", "4ನೇ ತ್ರೈಮಾಸಿಕ"]
      // CLDR #1622 - #1629
    };
    var monthValues = {
      narrow: ["ಜ", "ಫೆ", "ಮಾ", "ಏ", "ಮೇ", "ಜೂ", "ಜು", "ಆ", "ಸೆ", "ಅ", "ನ", "ಡಿ"],
      abbreviated: [
        "ಜನ",
        "ಫೆಬ್ರ",
        "ಮಾರ್ಚ್",
        "ಏಪ್ರಿ",
        "ಮೇ",
        "ಜೂನ್",
        "ಜುಲೈ",
        "ಆಗ",
        "ಸೆಪ್ಟೆಂ",
        "ಅಕ್ಟೋ",
        "ನವೆಂ",
        "ಡಿಸೆಂ"
      ],
      wide: [
        "ಜನವರಿ",
        "ಫೆಬ್ರವರಿ",
        "ಮಾರ್ಚ್",
        "ಏಪ್ರಿಲ್",
        "ಮೇ",
        "ಜೂನ್",
        "ಜುಲೈ",
        "ಆಗಸ್ಟ್",
        "ಸೆಪ್ಟೆಂಬರ್",
        "ಅಕ್ಟೋಬರ್",
        "ನವೆಂಬರ್",
        "ಡಿಸೆಂಬರ್"
      ]
    };
    var dayValues = {
      narrow: ["ಭಾ", "ಸೋ", "ಮಂ", "ಬು", "ಗು", "ಶು", "ಶ"],
      short: ["ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", "ಶುಕ್ರ", "ಶನಿ"],
      abbreviated: ["ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", "ಶುಕ್ರ", "ಶನಿ"],
      wide: [
        "ಭಾನುವಾರ",
        "ಸೋಮವಾರ",
        "ಮಂಗಳವಾರ",
        "ಬುಧವಾರ",
        "ಗುರುವಾರ",
        "ಶುಕ್ರವಾರ",
        "ಶನಿವಾರ"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ಪೂರ್ವಾಹ್ನ",
        pm: "ಅಪರಾಹ್ನ",
        midnight: "ಮಧ್ಯರಾತ್ರಿ",
        noon: "ಮಧ್ಯಾಹ್ನ",
        morning: "ಬೆಳಗ್ಗೆ",
        afternoon: "ಮಧ್ಯಾಹ್ನ",
        evening: "ಸಂಜೆ",
        night: "ರಾತ್ರಿ"
      },
      abbreviated: {
        am: "ಪೂರ್ವಾಹ್ನ",
        pm: "ಅಪರಾಹ್ನ",
        midnight: "ಮಧ್ಯರಾತ್ರಿ",
        noon: "ಮಧ್ಯಾನ್ಹ",
        morning: "ಬೆಳಗ್ಗೆ",
        afternoon: "ಮಧ್ಯಾನ್ಹ",
        evening: "ಸಂಜೆ",
        night: "ರಾತ್ರಿ"
      },
      wide: {
        am: "ಪೂರ್ವಾಹ್ನ",
        pm: "ಅಪರಾಹ್ನ",
        midnight: "ಮಧ್ಯರಾತ್ರಿ",
        noon: "ಮಧ್ಯಾನ್ಹ",
        morning: "ಬೆಳಗ್ಗೆ",
        afternoon: "ಮಧ್ಯಾನ್ಹ",
        evening: "ಸಂಜೆ",
        night: "ರಾತ್ರಿ"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ಪೂ",
        pm: "ಅ",
        midnight: "ಮಧ್ಯರಾತ್ರಿ",
        noon: "ಮಧ್ಯಾನ್ಹ",
        morning: "ಬೆಳಗ್ಗೆ",
        afternoon: "ಮಧ್ಯಾನ್ಹ",
        evening: "ಸಂಜೆ",
        night: "ರಾತ್ರಿ"
      },
      abbreviated: {
        am: "ಪೂರ್ವಾಹ್ನ",
        pm: "ಅಪರಾಹ್ನ",
        midnight: "ಮಧ್ಯ ರಾತ್ರಿ",
        noon: "ಮಧ್ಯಾನ್ಹ",
        morning: "ಬೆಳಗ್ಗೆ",
        afternoon: "ಮಧ್ಯಾನ್ಹ",
        evening: "ಸಂಜೆ",
        night: "ರಾತ್ರಿ"
      },
      wide: {
        am: "ಪೂರ್ವಾಹ್ನ",
        pm: "ಅಪರಾಹ್ನ",
        midnight: "ಮಧ್ಯ ರಾತ್ರಿ",
        noon: "ಮಧ್ಯಾನ್ಹ",
        morning: "ಬೆಳಗ್ಗೆ",
        afternoon: "ಮಧ್ಯಾನ್ಹ",
        evening: "ಸಂಜೆ",
        night: "ರಾತ್ರಿ"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "ನೇ";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/kn/_lib/match.js
var require_match47 = __commonJS({
  "node_modules/date-fns/locale/kn/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(ನೇ|ನೆ)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ಕ್ರಿ.ಪೂ|ಕ್ರಿ.ಶ)/i,
      abbreviated: /^(ಕ್ರಿ\.?\s?ಪೂ\.?|ಕ್ರಿ\.?\s?ಶ\.?|ಪ್ರ\.?\s?ಶ\.?)/i,
      wide: /^(ಕ್ರಿಸ್ತ ಪೂರ್ವ|ಕ್ರಿಸ್ತ ಶಕ|ಪ್ರಸಕ್ತ ಶಕ)/i
    };
    var parseEraPatterns = {
      any: [/^ಪೂ/i, /^(ಶ|ಪ್ರ)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^ತ್ರೈ[1234]|ತ್ರೈ [1234]| [1234]ತ್ರೈ/i,
      wide: /^[1234](ನೇ)? ತ್ರೈಮಾಸಿಕ/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(ಜೂ|ಜು|ಜ|ಫೆ|ಮಾ|ಏ|ಮೇ|ಆ|ಸೆ|ಅ|ನ|ಡಿ)/i,
      abbreviated: /^(ಜನ|ಫೆಬ್ರ|ಮಾರ್ಚ್|ಏಪ್ರಿ|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗ|ಸೆಪ್ಟೆಂ|ಅಕ್ಟೋ|ನವೆಂ|ಡಿಸೆಂ)/i,
      wide: /^(ಜನವರಿ|ಫೆಬ್ರವರಿ|ಮಾರ್ಚ್|ಏಪ್ರಿಲ್|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗಸ್ಟ್|ಸೆಪ್ಟೆಂಬರ್|ಅಕ್ಟೋಬರ್|ನವೆಂಬರ್|ಡಿಸೆಂಬರ್)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ಜ$/i,
        /^ಫೆ/i,
        /^ಮಾ/i,
        /^ಏ/i,
        /^ಮೇ/i,
        /^ಜೂ/i,
        /^ಜು$/i,
        /^ಆ/i,
        /^ಸೆ/i,
        /^ಅ/i,
        /^ನ/i,
        /^ಡಿ/i
      ],
      any: [
        /^ಜನ/i,
        /^ಫೆ/i,
        /^ಮಾ/i,
        /^ಏ/i,
        /^ಮೇ/i,
        /^ಜೂನ್/i,
        /^ಜುಲೈ/i,
        /^ಆ/i,
        /^ಸೆ/i,
        /^ಅ/i,
        /^ನ/i,
        /^ಡಿ/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(ಭಾ|ಸೋ|ಮ|ಬು|ಗು|ಶು|ಶ)/i,
      short: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
      abbreviated: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
      wide: /^(ಭಾನುವಾರ|ಸೋಮವಾರ|ಮಂಗಳವಾರ|ಬುಧವಾರ|ಗುರುವಾರ|ಶುಕ್ರವಾರ|ಶನಿವಾರ)/i
    };
    var parseDayPatterns = {
      narrow: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i],
      any: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ಪೂ|ಅ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i,
      any: /^(ಪೂರ್ವಾಹ್ನ|ಅಪರಾಹ್ನ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ಪೂ/i,
        pm: /^ಅ/i,
        midnight: /ಮಧ್ಯರಾತ್ರಿ/i,
        noon: /ಮಧ್ಯಾನ್ಹ/i,
        morning: /ಬೆಳಗ್ಗೆ/i,
        afternoon: /ಮಧ್ಯಾನ್ಹ/i,
        evening: /ಸಂಜೆ/i,
        night: /ರಾತ್ರಿ/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/kn.js
var require_kn = __commonJS({
  "node_modules/date-fns/locale/kn.js"(exports) {
    "use strict";
    exports.kn = void 0;
    var _index = require_formatDistance49();
    var _index2 = require_formatLong56();
    var _index3 = require_formatRelative49();
    var _index4 = require_localize48();
    var _index5 = require_match47();
    var kn = exports.kn = {
      code: "kn",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ko/_lib/formatDistance.js
var require_formatDistance50 = __commonJS({
  "node_modules/date-fns/locale/ko/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "1초 미만",
        other: "{{count}}초 미만"
      },
      xSeconds: {
        one: "1초",
        other: "{{count}}초"
      },
      halfAMinute: "30초",
      lessThanXMinutes: {
        one: "1분 미만",
        other: "{{count}}분 미만"
      },
      xMinutes: {
        one: "1분",
        other: "{{count}}분"
      },
      aboutXHours: {
        one: "약 1시간",
        other: "약 {{count}}시간"
      },
      xHours: {
        one: "1시간",
        other: "{{count}}시간"
      },
      xDays: {
        one: "1일",
        other: "{{count}}일"
      },
      aboutXWeeks: {
        one: "약 1주",
        other: "약 {{count}}주"
      },
      xWeeks: {
        one: "1주",
        other: "{{count}}주"
      },
      aboutXMonths: {
        one: "약 1개월",
        other: "약 {{count}}개월"
      },
      xMonths: {
        one: "1개월",
        other: "{{count}}개월"
      },
      aboutXYears: {
        one: "약 1년",
        other: "약 {{count}}년"
      },
      xYears: {
        one: "1년",
        other: "{{count}}년"
      },
      overXYears: {
        one: "1년 이상",
        other: "{{count}}년 이상"
      },
      almostXYears: {
        one: "거의 1년",
        other: "거의 {{count}}년"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " 후";
        } else {
          return result + " 전";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ko/_lib/formatLong.js
var require_formatLong57 = __commonJS({
  "node_modules/date-fns/locale/ko/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y년 M월 d일 EEEE",
      long: "y년 M월 d일",
      medium: "y.MM.dd",
      short: "y.MM.dd"
    };
    var timeFormats = {
      full: "a H시 mm분 ss초 zzzz",
      long: "a H:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ko/_lib/formatRelative.js
var require_formatRelative50 = __commonJS({
  "node_modules/date-fns/locale/ko/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'지난' eeee p",
      yesterday: "'어제' p",
      today: "'오늘' p",
      tomorrow: "'내일' p",
      nextWeek: "'다음' eeee p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ko/_lib/localize.js
var require_localize49 = __commonJS({
  "node_modules/date-fns/locale/ko/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["BC", "AD"],
      abbreviated: ["BC", "AD"],
      wide: ["기원전", "서기"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1분기", "2분기", "3분기", "4분기"]
    };
    var monthValues = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: [
        "1월",
        "2월",
        "3월",
        "4월",
        "5월",
        "6월",
        "7월",
        "8월",
        "9월",
        "10월",
        "11월",
        "12월"
      ],
      wide: [
        "1월",
        "2월",
        "3월",
        "4월",
        "5월",
        "6월",
        "7월",
        "8월",
        "9월",
        "10월",
        "11월",
        "12월"
      ]
    };
    var dayValues = {
      narrow: ["일", "월", "화", "수", "목", "금", "토"],
      short: ["일", "월", "화", "수", "목", "금", "토"],
      abbreviated: ["일", "월", "화", "수", "목", "금", "토"],
      wide: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "오전",
        pm: "오후",
        midnight: "자정",
        noon: "정오",
        morning: "아침",
        afternoon: "오후",
        evening: "저녁",
        night: "밤"
      },
      abbreviated: {
        am: "오전",
        pm: "오후",
        midnight: "자정",
        noon: "정오",
        morning: "아침",
        afternoon: "오후",
        evening: "저녁",
        night: "밤"
      },
      wide: {
        am: "오전",
        pm: "오후",
        midnight: "자정",
        noon: "정오",
        morning: "아침",
        afternoon: "오후",
        evening: "저녁",
        night: "밤"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "오전",
        pm: "오후",
        midnight: "자정",
        noon: "정오",
        morning: "아침",
        afternoon: "오후",
        evening: "저녁",
        night: "밤"
      },
      abbreviated: {
        am: "오전",
        pm: "오후",
        midnight: "자정",
        noon: "정오",
        morning: "아침",
        afternoon: "오후",
        evening: "저녁",
        night: "밤"
      },
      wide: {
        am: "오전",
        pm: "오후",
        midnight: "자정",
        noon: "정오",
        morning: "아침",
        afternoon: "오후",
        evening: "저녁",
        night: "밤"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = String(options == null ? void 0 : options.unit);
      switch (unit) {
        case "minute":
        case "second":
          return String(number);
        case "date":
          return number + "일";
        default:
          return number + "번째";
      }
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ko/_lib/match.js
var require_match48 = __commonJS({
  "node_modules/date-fns/locale/ko/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(일|번째)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(기원전|서기)/i
    };
    var parseEraPatterns = {
      any: [/^(bc|기원전)/i, /^(ad|서기)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]사?분기/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(1[012]|[123456789])/,
      abbreviated: /^(1[012]|[123456789])월/i,
      wide: /^(1[012]|[123456789])월/i
    };
    var parseMonthPatterns = {
      any: [
        /^1월?$/,
        /^2/,
        /^3/,
        /^4/,
        /^5/,
        /^6/,
        /^7/,
        /^8/,
        /^9/,
        /^10/,
        /^11/,
        /^12/
      ]
    };
    var matchDayPatterns = {
      narrow: /^[일월화수목금토]/,
      short: /^[일월화수목금토]/,
      abbreviated: /^[일월화수목금토]/,
      wide: /^[일월화수목금토]요일/
    };
    var parseDayPatterns = {
      any: [/^일/, /^월/, /^화/, /^수/, /^목/, /^금/, /^토/]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|오전|오후|자정|정오|아침|저녁|밤)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(am|오전)/i,
        pm: /^(pm|오후)/i,
        midnight: /^자정/i,
        noon: /^정오/i,
        morning: /^아침/i,
        afternoon: /^오후/i,
        evening: /^저녁/i,
        night: /^밤/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ko.js
var require_ko = __commonJS({
  "node_modules/date-fns/locale/ko.js"(exports) {
    "use strict";
    exports.ko = void 0;
    var _index = require_formatDistance50();
    var _index2 = require_formatLong57();
    var _index3 = require_formatRelative50();
    var _index4 = require_localize49();
    var _index5 = require_match48();
    var ko = exports.ko = {
      code: "ko",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/lb/_lib/formatDistance.js
var require_formatDistance51 = __commonJS({
  "node_modules/date-fns/locale/lb/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: "manner wéi eng Sekonn",
          other: "manner wéi {{count}} Sekonnen"
        },
        withPreposition: {
          one: "manner wéi enger Sekonn",
          other: "manner wéi {{count}} Sekonnen"
        }
      },
      xSeconds: {
        standalone: {
          one: "eng Sekonn",
          other: "{{count}} Sekonnen"
        },
        withPreposition: {
          one: "enger Sekonn",
          other: "{{count}} Sekonnen"
        }
      },
      halfAMinute: {
        standalone: "eng hallef Minutt",
        withPreposition: "enger hallwer Minutt"
      },
      lessThanXMinutes: {
        standalone: {
          one: "manner wéi eng Minutt",
          other: "manner wéi {{count}} Minutten"
        },
        withPreposition: {
          one: "manner wéi enger Minutt",
          other: "manner wéi {{count}} Minutten"
        }
      },
      xMinutes: {
        standalone: {
          one: "eng Minutt",
          other: "{{count}} Minutten"
        },
        withPreposition: {
          one: "enger Minutt",
          other: "{{count}} Minutten"
        }
      },
      aboutXHours: {
        standalone: {
          one: "ongeféier eng Stonn",
          other: "ongeféier {{count}} Stonnen"
        },
        withPreposition: {
          one: "ongeféier enger Stonn",
          other: "ongeféier {{count}} Stonnen"
        }
      },
      xHours: {
        standalone: {
          one: "eng Stonn",
          other: "{{count}} Stonnen"
        },
        withPreposition: {
          one: "enger Stonn",
          other: "{{count}} Stonnen"
        }
      },
      xDays: {
        standalone: {
          one: "een Dag",
          other: "{{count}} Deeg"
        },
        withPreposition: {
          one: "engem Dag",
          other: "{{count}} Deeg"
        }
      },
      aboutXWeeks: {
        standalone: {
          one: "ongeféier eng Woch",
          other: "ongeféier {{count}} Wochen"
        },
        withPreposition: {
          one: "ongeféier enger Woche",
          other: "ongeféier {{count}} Wochen"
        }
      },
      xWeeks: {
        standalone: {
          one: "eng Woch",
          other: "{{count}} Wochen"
        },
        withPreposition: {
          one: "enger Woch",
          other: "{{count}} Wochen"
        }
      },
      aboutXMonths: {
        standalone: {
          one: "ongeféier ee Mount",
          other: "ongeféier {{count}} Méint"
        },
        withPreposition: {
          one: "ongeféier engem Mount",
          other: "ongeféier {{count}} Méint"
        }
      },
      xMonths: {
        standalone: {
          one: "ee Mount",
          other: "{{count}} Méint"
        },
        withPreposition: {
          one: "engem Mount",
          other: "{{count}} Méint"
        }
      },
      aboutXYears: {
        standalone: {
          one: "ongeféier ee Joer",
          other: "ongeféier {{count}} Joer"
        },
        withPreposition: {
          one: "ongeféier engem Joer",
          other: "ongeféier {{count}} Joer"
        }
      },
      xYears: {
        standalone: {
          one: "ee Joer",
          other: "{{count}} Joer"
        },
        withPreposition: {
          one: "engem Joer",
          other: "{{count}} Joer"
        }
      },
      overXYears: {
        standalone: {
          one: "méi wéi ee Joer",
          other: "méi wéi {{count}} Joer"
        },
        withPreposition: {
          one: "méi wéi engem Joer",
          other: "méi wéi {{count}} Joer"
        }
      },
      almostXYears: {
        standalone: {
          one: "bal ee Joer",
          other: "bal {{count}} Joer"
        },
        withPreposition: {
          one: "bal engem Joer",
          other: "bal {{count}} Joer"
        }
      }
    };
    var EXCEPTION_CONSONANTS = ["d", "h", "n", "t", "z"];
    var VOWELS = ["a,", "e", "i", "o", "u"];
    var DIGITS_SPOKEN_N_NEEDED = [0, 1, 2, 3, 8, 9];
    var FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED = [40, 50, 60, 70];
    function isFinalNNeeded(nextWords) {
      const firstLetter = nextWords.charAt(0).toLowerCase();
      if (VOWELS.indexOf(firstLetter) != -1 || EXCEPTION_CONSONANTS.indexOf(firstLetter) != -1) {
        return true;
      }
      const firstWord = nextWords.split(" ")[0];
      const number = parseInt(firstWord);
      if (!isNaN(number) && DIGITS_SPOKEN_N_NEEDED.indexOf(number % 10) != -1 && FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED.indexOf(
        parseInt(firstWord.substring(0, 2))
      ) == -1) {
        return true;
      }
      return false;
    }
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      const usageGroup = (options == null ? void 0 : options.addSuffix) ? tokenValue.withPreposition : tokenValue.standalone;
      if (typeof usageGroup === "string") {
        result = usageGroup;
      } else if (count === 1) {
        result = usageGroup.one;
      } else {
        result = usageGroup.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "a" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
        } else {
          return "viru" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/lb/_lib/formatLong.js
var require_formatLong58 = __commonJS({
  "node_modules/date-fns/locale/lb/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM y",
      // Méindeg, 7. Januar 2018
      long: "do MMMM y",
      // 7. Januar 2018
      medium: "do MMM y",
      // 7. Jan 2018
      short: "dd.MM.yy"
      // 07.01.18
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'um' {{time}}",
      long: "{{date}} 'um' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/lb/_lib/formatRelative.js
var require_formatRelative51 = __commonJS({
  "node_modules/date-fns/locale/lb/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        const day = date.getDay();
        let result = "'läschte";
        if (day === 2 || day === 4) {
          result += "n";
        }
        result += "' eeee 'um' p";
        return result;
      },
      yesterday: "'gëschter um' p",
      today: "'haut um' p",
      tomorrow: "'moien um' p",
      nextWeek: "eeee 'um' p",
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/lb/_lib/localize.js
var require_localize50 = __commonJS({
  "node_modules/date-fns/locale/lb/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["v.Chr.", "n.Chr."],
      abbreviated: ["v.Chr.", "n.Chr."],
      wide: ["viru Christus", "no Christus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Jan",
        "Feb",
        "Mäe",
        "Abr",
        "Mee",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Dez"
      ],
      wide: [
        "Januar",
        "Februar",
        "Mäerz",
        "Abrëll",
        "Mee",
        "Juni",
        "Juli",
        "August",
        "September",
        "Oktober",
        "November",
        "Dezember"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "D", "M", "D", "F", "S"],
      short: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"],
      abbreviated: ["So.", "Mé.", "Dë.", "Më.", "Do.", "Fr.", "Sa."],
      wide: [
        "Sonndeg",
        "Méindeg",
        "Dënschdeg",
        "Mëttwoch",
        "Donneschdeg",
        "Freideg",
        "Samschdeg"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "mo.",
        pm: "nomë.",
        midnight: "Mëtternuecht",
        noon: "Mëtteg",
        morning: "Moien",
        afternoon: "Nomëtteg",
        evening: "Owend",
        night: "Nuecht"
      },
      abbreviated: {
        am: "moies",
        pm: "nomëttes",
        midnight: "Mëtternuecht",
        noon: "Mëtteg",
        morning: "Moien",
        afternoon: "Nomëtteg",
        evening: "Owend",
        night: "Nuecht"
      },
      wide: {
        am: "moies",
        pm: "nomëttes",
        midnight: "Mëtternuecht",
        noon: "Mëtteg",
        morning: "Moien",
        afternoon: "Nomëtteg",
        evening: "Owend",
        night: "Nuecht"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "mo.",
        pm: "nom.",
        midnight: "Mëtternuecht",
        noon: "mëttes",
        morning: "moies",
        afternoon: "nomëttes",
        evening: "owes",
        night: "nuets"
      },
      abbreviated: {
        am: "moies",
        pm: "nomëttes",
        midnight: "Mëtternuecht",
        noon: "mëttes",
        morning: "moies",
        afternoon: "nomëttes",
        evening: "owes",
        night: "nuets"
      },
      wide: {
        am: "moies",
        pm: "nomëttes",
        midnight: "Mëtternuecht",
        noon: "mëttes",
        morning: "moies",
        afternoon: "nomëttes",
        evening: "owes",
        night: "nuets"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/lb/_lib/match.js
var require_match49 = __commonJS({
  "node_modules/date-fns/locale/lb/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
      wide: /^(viru Christus|virun eiser Zäitrechnung|no Christus|eiser Zäitrechnung)/i
    };
    var parseEraPatterns = {
      any: [/^v/i, /^n/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? Quartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mäe|abr|mee|jun|jul|aug|sep|okt|nov|dez)/i,
      wide: /^(januar|februar|mäerz|abrëll|mee|juni|juli|august|september|oktober|november|dezember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mä/i,
        /^ab/i,
        /^me/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smdf]/i,
      short: /^(so|mé|dë|më|do|fr|sa)/i,
      abbreviated: /^(son?|méi?|dën?|mët?|don?|fre?|sam?)\.?/i,
      wide: /^(sonndeg|méindeg|dënschdeg|mëttwoch|donneschdeg|freideg|samschdeg)/i
    };
    var parseDayPatterns = {
      any: [/^so/i, /^mé/i, /^dë/i, /^më/i, /^do/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(mo\.?|nomë\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
      abbreviated: /^(moi\.?|nomët\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
      wide: /^(moies|nomëttes|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^m/i,
        pm: /^n/i,
        midnight: /^Mëtter/i,
        noon: /^mëttes/i,
        morning: /moies/i,
        afternoon: /nomëttes/i,
        // will never be matched. Afternoon is matched by `pm`
        evening: /owes/i,
        night: /nuets/i
        // will never be matched. Night is matched by `pm`
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/lb.js
var require_lb = __commonJS({
  "node_modules/date-fns/locale/lb.js"(exports) {
    "use strict";
    exports.lb = void 0;
    var _index = require_formatDistance51();
    var _index2 = require_formatLong58();
    var _index3 = require_formatRelative51();
    var _index4 = require_localize50();
    var _index5 = require_match49();
    var lb = exports.lb = {
      code: "lb",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/lt/_lib/formatDistance.js
var require_formatDistance52 = __commonJS({
  "node_modules/date-fns/locale/lt/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var translations = {
      xseconds_other: "sekundė_sekundžių_sekundes",
      xminutes_one: "minutė_minutės_minutę",
      xminutes_other: "minutės_minučių_minutes",
      xhours_one: "valanda_valandos_valandą",
      xhours_other: "valandos_valandų_valandas",
      xdays_one: "diena_dienos_dieną",
      xdays_other: "dienos_dienų_dienas",
      xweeks_one: "savaitė_savaitės_savaitę",
      xweeks_other: "savaitės_savaičių_savaites",
      xmonths_one: "mėnuo_mėnesio_mėnesį",
      xmonths_other: "mėnesiai_mėnesių_mėnesius",
      xyears_one: "metai_metų_metus",
      xyears_other: "metai_metų_metus",
      about: "apie",
      over: "daugiau nei",
      almost: "beveik",
      lessthan: "mažiau nei"
    };
    var translateSeconds = (_number, addSuffix, _key, isFuture) => {
      if (!addSuffix) {
        return "kelios sekundės";
      } else {
        return isFuture ? "kelių sekundžių" : "kelias sekundes";
      }
    };
    var translateSingular = (_number, addSuffix, key, isFuture) => {
      return !addSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
    };
    var translate = (number, addSuffix, key, isFuture) => {
      const result = number + " ";
      if (number === 1) {
        return result + translateSingular(number, addSuffix, key, isFuture);
      } else if (!addSuffix) {
        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
      } else {
        if (isFuture) {
          return result + forms(key)[1];
        } else {
          return result + (special(number) ? forms(key)[1] : forms(key)[2]);
        }
      }
    };
    function special(number) {
      return number % 10 === 0 || number > 10 && number < 20;
    }
    function forms(key) {
      return translations[key].split("_");
    }
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: translateSeconds,
        other: translate
      },
      xSeconds: {
        one: translateSeconds,
        other: translate
      },
      halfAMinute: "pusė minutės",
      lessThanXMinutes: {
        one: translateSingular,
        other: translate
      },
      xMinutes: {
        one: translateSingular,
        other: translate
      },
      aboutXHours: {
        one: translateSingular,
        other: translate
      },
      xHours: {
        one: translateSingular,
        other: translate
      },
      xDays: {
        one: translateSingular,
        other: translate
      },
      aboutXWeeks: {
        one: translateSingular,
        other: translate
      },
      xWeeks: {
        one: translateSingular,
        other: translate
      },
      aboutXMonths: {
        one: translateSingular,
        other: translate
      },
      xMonths: {
        one: translateSingular,
        other: translate
      },
      aboutXYears: {
        one: translateSingular,
        other: translate
      },
      xYears: {
        one: translateSingular,
        other: translate
      },
      overXYears: {
        one: translateSingular,
        other: translate
      },
      almostXYears: {
        one: translateSingular,
        other: translate
      }
    };
    var formatDistance = (token, count, options) => {
      const adverb = token.match(/about|over|almost|lessthan/i);
      const unit = adverb ? token.replace(adverb[0], "") : token;
      const isFuture = (options == null ? void 0 : options.comparison) !== void 0 && options.comparison > 0;
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one(
          count,
          (options == null ? void 0 : options.addSuffix) === true,
          unit.toLowerCase() + "_one",
          isFuture
        );
      } else {
        result = tokenValue.other(
          count,
          (options == null ? void 0 : options.addSuffix) === true,
          unit.toLowerCase() + "_other",
          isFuture
        );
      }
      if (adverb) {
        const key = adverb[0].toLowerCase();
        result = translations[key] + " " + result;
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "po " + result;
        } else {
          return "prieš " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/lt/_lib/formatLong.js
var require_formatLong59 = __commonJS({
  "node_modules/date-fns/locale/lt/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y 'm'. MMMM d 'd'., EEEE",
      long: "y 'm'. MMMM d 'd'.",
      medium: "y-MM-dd",
      short: "y-MM-dd"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/lt/_lib/formatRelative.js
var require_formatRelative52 = __commonJS({
  "node_modules/date-fns/locale/lt/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'Praėjusį' eeee p",
      yesterday: "'Vakar' p",
      today: "'Šiandien' p",
      tomorrow: "'Rytoj' p",
      nextWeek: "eeee p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/lt/_lib/localize.js
var require_localize51 = __commonJS({
  "node_modules/date-fns/locale/lt/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["pr. Kr.", "po Kr."],
      abbreviated: ["pr. Kr.", "po Kr."],
      wide: ["prieš Kristų", "po Kristaus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["I ketv.", "II ketv.", "III ketv.", "IV ketv."],
      wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"]
    };
    var formattingQuarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["I k.", "II k.", "III k.", "IV k."],
      wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"]
    };
    var monthValues = {
      narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
      abbreviated: [
        "saus.",
        "vas.",
        "kov.",
        "bal.",
        "geg.",
        "birž.",
        "liep.",
        "rugp.",
        "rugs.",
        "spal.",
        "lapkr.",
        "gruod."
      ],
      wide: [
        "sausis",
        "vasaris",
        "kovas",
        "balandis",
        "gegužė",
        "birželis",
        "liepa",
        "rugpjūtis",
        "rugsėjis",
        "spalis",
        "lapkritis",
        "gruodis"
      ]
    };
    var formattingMonthValues = {
      narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
      abbreviated: [
        "saus.",
        "vas.",
        "kov.",
        "bal.",
        "geg.",
        "birž.",
        "liep.",
        "rugp.",
        "rugs.",
        "spal.",
        "lapkr.",
        "gruod."
      ],
      wide: [
        "sausio",
        "vasario",
        "kovo",
        "balandžio",
        "gegužės",
        "birželio",
        "liepos",
        "rugpjūčio",
        "rugsėjo",
        "spalio",
        "lapkričio",
        "gruodžio"
      ]
    };
    var dayValues = {
      narrow: ["S", "P", "A", "T", "K", "P", "Š"],
      short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
      abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "št"],
      wide: [
        "sekmadienis",
        "pirmadienis",
        "antradienis",
        "trečiadienis",
        "ketvirtadienis",
        "penktadienis",
        "šeštadienis"
      ]
    };
    var formattingDayValues = {
      narrow: ["S", "P", "A", "T", "K", "P", "Š"],
      short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
      abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "št"],
      wide: [
        "sekmadienį",
        "pirmadienį",
        "antradienį",
        "trečiadienį",
        "ketvirtadienį",
        "penktadienį",
        "šeštadienį"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "pr. p.",
        pm: "pop.",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
      },
      abbreviated: {
        am: "priešpiet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
      },
      wide: {
        am: "priešpiet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "pr. p.",
        pm: "pop.",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popietė",
        evening: "vakaras",
        night: "naktis"
      },
      abbreviated: {
        am: "priešpiet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popietė",
        evening: "vakaras",
        night: "naktis"
      },
      wide: {
        am: "priešpiet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popietė",
        evening: "vakaras",
        night: "naktis"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "-oji";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/lt/_lib/match.js
var require_match50 = __commonJS({
  "node_modules/date-fns/locale/lt/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-oji)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
      abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|mūsų eroje)/i,
      wide: /^(prieš Kristų|prieš mūsų erą|po Kristaus|mūsų eroje)/i
    };
    var parseEraPatterns = {
      wide: [/prieš/i, /(po|mūsų)/i],
      any: [/^pr/i, /^(po|m)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^([1234])/i,
      abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
      wide: /^(I|II|III|IV)\s?ketvirtis/i
    };
    var parseQuarterPatterns = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/I$/i, /II$/i, /III/i, /IV/i]
    };
    var matchMonthPatterns = {
      narrow: /^[svkbglr]/i,
      abbreviated: /^(saus\.|vas\.|kov\.|bal\.|geg\.|birž\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
      wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|balandž?i(s|o)|gegužės?|birželi(s|o)|liep(a|os)|rugpjū(t|č)i(s|o)|rugsėj(is|o)|spali(s|o)|lapkri(t|č)i(s|o)|gruodž?i(s|o))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^s/i,
        /^v/i,
        /^k/i,
        /^b/i,
        /^g/i,
        /^b/i,
        /^l/i,
        /^r/i,
        /^r/i,
        /^s/i,
        /^l/i,
        /^g/i
      ],
      any: [
        /^saus/i,
        /^vas/i,
        /^kov/i,
        /^bal/i,
        /^geg/i,
        /^birž/i,
        /^liep/i,
        /^rugp/i,
        /^rugs/i,
        /^spal/i,
        /^lapkr/i,
        /^gruod/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[spatkš]/i,
      short: /^(sk|pr|an|tr|kt|pn|št)/i,
      abbreviated: /^(sk|pr|an|tr|kt|pn|št)/i,
      wide: /^(sekmadien(is|į)|pirmadien(is|į)|antradien(is|į)|trečiadien(is|į)|ketvirtadien(is|į)|penktadien(is|į)|šeštadien(is|į))/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^p/i, /^a/i, /^t/i, /^k/i, /^p/i, /^š/i],
      wide: [/^se/i, /^pi/i, /^an/i, /^tr/i, /^ke/i, /^pe/i, /^še/i],
      any: [/^sk/i, /^pr/i, /^an/i, /^tr/i, /^kt/i, /^pn/i, /^št/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i,
      any: /^(priešpiet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^pr/i,
        pm: /^pop./i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietė)/i,
        evening: /vakaras/i,
        night: /naktis/i
      },
      any: {
        am: /^pr/i,
        pm: /^popiet$/i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietė)/i,
        evening: /vakaras/i,
        night: /naktis/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/lt.js
var require_lt = __commonJS({
  "node_modules/date-fns/locale/lt.js"(exports) {
    "use strict";
    exports.lt = void 0;
    var _index = require_formatDistance52();
    var _index2 = require_formatLong59();
    var _index3 = require_formatRelative52();
    var _index4 = require_localize51();
    var _index5 = require_match50();
    var lt = exports.lt = {
      code: "lt",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/lv/_lib/formatDistance.js
var require_formatDistance53 = __commonJS({
  "node_modules/date-fns/locale/lv/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function buildLocalizeTokenFn(schema) {
      return (count, options) => {
        if (count === 1) {
          if (options == null ? void 0 : options.addSuffix) {
            return schema.one[0].replace("{{time}}", schema.one[2]);
          } else {
            return schema.one[0].replace("{{time}}", schema.one[1]);
          }
        } else {
          const rem = count % 10 === 1 && count % 100 !== 11;
          if (options == null ? void 0 : options.addSuffix) {
            return schema.other[0].replace("{{time}}", rem ? schema.other[3] : schema.other[4]).replace("{{count}}", String(count));
          } else {
            return schema.other[0].replace("{{time}}", rem ? schema.other[1] : schema.other[2]).replace("{{count}}", String(count));
          }
        }
      };
    }
    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        one: ["mazāk par {{time}}", "sekundi", "sekundi"],
        other: [
          "mazāk nekā {{count}} {{time}}",
          "sekunde",
          "sekundes",
          "sekundes",
          "sekundēm"
        ]
      }),
      xSeconds: buildLocalizeTokenFn({
        one: ["1 {{time}}", "sekunde", "sekundes"],
        other: [
          "{{count}} {{time}}",
          "sekunde",
          "sekundes",
          "sekundes",
          "sekundēm"
        ]
      }),
      halfAMinute: (_count, options) => {
        if (options == null ? void 0 : options.addSuffix) {
          return "pusminūtes";
        } else {
          return "pusminūte";
        }
      },
      lessThanXMinutes: buildLocalizeTokenFn({
        one: ["mazāk par {{time}}", "minūti", "minūti"],
        other: [
          "mazāk nekā {{count}} {{time}}",
          "minūte",
          "minūtes",
          "minūtes",
          "minūtēm"
        ]
      }),
      xMinutes: buildLocalizeTokenFn({
        one: ["1 {{time}}", "minūte", "minūtes"],
        other: ["{{count}} {{time}}", "minūte", "minūtes", "minūtes", "minūtēm"]
      }),
      aboutXHours: buildLocalizeTokenFn({
        one: ["apmēram 1 {{time}}", "stunda", "stundas"],
        other: [
          "apmēram {{count}} {{time}}",
          "stunda",
          "stundas",
          "stundas",
          "stundām"
        ]
      }),
      xHours: buildLocalizeTokenFn({
        one: ["1 {{time}}", "stunda", "stundas"],
        other: ["{{count}} {{time}}", "stunda", "stundas", "stundas", "stundām"]
      }),
      xDays: buildLocalizeTokenFn({
        one: ["1 {{time}}", "diena", "dienas"],
        other: ["{{count}} {{time}}", "diena", "dienas", "dienas", "dienām"]
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        one: ["apmēram 1 {{time}}", "nedēļa", "nedēļas"],
        other: [
          "apmēram {{count}} {{time}}",
          "nedēļa",
          "nedēļu",
          "nedēļas",
          "nedēļām"
        ]
      }),
      xWeeks: buildLocalizeTokenFn({
        one: ["1 {{time}}", "nedēļa", "nedēļas"],
        other: [
          "{{count}} {{time}}",
          // TODO
          "nedēļa",
          "nedēļu",
          "nedēļas",
          "nedēļām"
        ]
      }),
      aboutXMonths: buildLocalizeTokenFn({
        one: ["apmēram 1 {{time}}", "mēnesis", "mēneša"],
        other: [
          "apmēram {{count}} {{time}}",
          "mēnesis",
          "mēneši",
          "mēneša",
          "mēnešiem"
        ]
      }),
      xMonths: buildLocalizeTokenFn({
        one: ["1 {{time}}", "mēnesis", "mēneša"],
        other: ["{{count}} {{time}}", "mēnesis", "mēneši", "mēneša", "mēnešiem"]
      }),
      aboutXYears: buildLocalizeTokenFn({
        one: ["apmēram 1 {{time}}", "gads", "gada"],
        other: ["apmēram {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      }),
      xYears: buildLocalizeTokenFn({
        one: ["1 {{time}}", "gads", "gada"],
        other: ["{{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      }),
      overXYears: buildLocalizeTokenFn({
        one: ["ilgāk par 1 {{time}}", "gadu", "gadu"],
        other: ["vairāk nekā {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      }),
      almostXYears: buildLocalizeTokenFn({
        one: ["gandrīz 1 {{time}}", "gads", "gada"],
        other: ["vairāk nekā {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
      })
    };
    var formatDistance = (token, count, options) => {
      const result = formatDistanceLocale[token](count, options);
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "pēc " + result;
        } else {
          return "pirms " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/lv/_lib/formatLong.js
var require_formatLong60 = __commonJS({
  "node_modules/date-fns/locale/lv/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, y. 'gada' d. MMMM",
      long: "y. 'gada' d. MMMM",
      medium: "dd.MM.y.",
      short: "dd.MM.y."
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'plkst.' {{time}}",
      long: "{{date}} 'plkst.' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/lv/_lib/formatRelative.js
var require_formatRelative53 = __commonJS({
  "node_modules/date-fns/locale/lv/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var weekdays = [
      "svētdienā",
      "pirmdienā",
      "otrdienā",
      "trešdienā",
      "ceturtdienā",
      "piektdienā",
      "sestdienā"
    ];
    var formatRelativeLocale = {
      lastWeek: (date, baseDate, options) => {
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return "eeee 'plkst.' p";
        }
        const weekday = weekdays[date.getDay()];
        return "'Pagājušā " + weekday + " plkst.' p";
      },
      yesterday: "'Vakar plkst.' p",
      today: "'Šodien plkst.' p",
      tomorrow: "'Rīt plkst.' p",
      nextWeek: (date, baseDate, options) => {
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return "eeee 'plkst.' p";
        }
        const weekday = weekdays[date.getDay()];
        return "'Nākamajā " + weekday + " plkst.' p";
      },
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/lv/_lib/localize.js
var require_localize52 = __commonJS({
  "node_modules/date-fns/locale/lv/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["p.m.ē", "m.ē"],
      abbreviated: ["p. m. ē.", "m. ē."],
      wide: ["pirms mūsu ēras", "mūsu ērā"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
      wide: [
        "pirmais ceturksnis",
        "otrais ceturksnis",
        "trešais ceturksnis",
        "ceturtais ceturksnis"
      ]
    };
    var formattingQuarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
      wide: [
        "pirmajā ceturksnī",
        "otrajā ceturksnī",
        "trešajā ceturksnī",
        "ceturtajā ceturksnī"
      ]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "janv.",
        "febr.",
        "marts",
        "apr.",
        "maijs",
        "jūn.",
        "jūl.",
        "aug.",
        "sept.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "janvāris",
        "februāris",
        "marts",
        "aprīlis",
        "maijs",
        "jūnijs",
        "jūlijs",
        "augusts",
        "septembris",
        "oktobris",
        "novembris",
        "decembris"
      ]
    };
    var formattingMonthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "janv.",
        "febr.",
        "martā",
        "apr.",
        "maijs",
        "jūn.",
        "jūl.",
        "aug.",
        "sept.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "janvārī",
        "februārī",
        "martā",
        "aprīlī",
        "maijā",
        "jūnijā",
        "jūlijā",
        "augustā",
        "septembrī",
        "oktobrī",
        "novembrī",
        "decembrī"
      ]
    };
    var dayValues = {
      narrow: ["S", "P", "O", "T", "C", "P", "S"],
      short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
      abbreviated: [
        "svētd.",
        "pirmd.",
        "otrd.",
        "trešd.",
        "ceturtd.",
        "piektd.",
        "sestd."
      ],
      wide: [
        "svētdiena",
        "pirmdiena",
        "otrdiena",
        "trešdiena",
        "ceturtdiena",
        "piektdiena",
        "sestdiena"
      ]
    };
    var formattingDayValues = {
      narrow: ["S", "P", "O", "T", "C", "P", "S"],
      short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
      abbreviated: [
        "svētd.",
        "pirmd.",
        "otrd.",
        "trešd.",
        "ceturtd.",
        "piektd.",
        "sestd."
      ],
      wide: [
        "svētdienā",
        "pirmdienā",
        "otrdienā",
        "trešdienā",
        "ceturtdienā",
        "piektdienā",
        "sestdienā"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rīts",
        afternoon: "diena",
        evening: "vakars",
        night: "nakts"
      },
      abbreviated: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rīts",
        afternoon: "pēcpusd.",
        evening: "vakars",
        night: "nakts"
      },
      wide: {
        am: "am",
        pm: "pm",
        midnight: "pusnakts",
        noon: "pusdienlaiks",
        morning: "rīts",
        afternoon: "pēcpusdiena",
        evening: "vakars",
        night: "nakts"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rītā",
        afternoon: "dienā",
        evening: "vakarā",
        night: "naktī"
      },
      abbreviated: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "rītā",
        afternoon: "pēcpusd.",
        evening: "vakarā",
        night: "naktī"
      },
      wide: {
        am: "am",
        pm: "pm",
        midnight: "pusnaktī",
        noon: "pusdienlaikā",
        morning: "rītā",
        afternoon: "pēcpusdienā",
        evening: "vakarā",
        night: "naktī"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/lv/_lib/match.js
var require_match51 = __commonJS({
  "node_modules/date-fns/locale/lv/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(p\.m\.ē|m\.ē)/i,
      abbreviated: /^(p\. m\. ē\.|m\. ē\.)/i,
      wide: /^(pirms mūsu ēras|mūsu ērā)/i
    };
    var parseEraPatterns = {
      any: [/^p/i, /^m/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](\. cet\.)/i,
      wide: /^(pirma(is|jā)|otra(is|jā)|treša(is|jā)|ceturta(is|jā)) ceturksn(is|ī)/i
    };
    var parseQuarterPatterns = {
      narrow: [/^1/i, /^2/i, /^3/i, /^4/i],
      abbreviated: [/^1/i, /^2/i, /^3/i, /^4/i],
      wide: [/^p/i, /^o/i, /^t/i, /^c/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(janv\.|febr\.|marts|apr\.|maijs|jūn\.|jūl\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
      wide: /^(janvār(is|ī)|februār(is|ī)|mart[sā]|aprīl(is|ī)|maij[sā]|jūnij[sā]|jūlij[sā]|august[sā]|septembr(is|ī)|oktobr(is|ī)|novembr(is|ī)|decembr(is|ī))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^jūn/i,
        /^jūl/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[spotc]/i,
      short: /^(sv|pi|o|t|c|pk|s)/i,
      abbreviated: /^(svētd\.|pirmd\.|otrd.\|trešd\.|ceturtd\.|piektd\.|sestd\.)/i,
      wide: /^(svētdien(a|ā)|pirmdien(a|ā)|otrdien(a|ā)|trešdien(a|ā)|ceturtdien(a|ā)|piektdien(a|ā)|sestdien(a|ā))/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^p/i, /^o/i, /^t/i, /^c/i, /^p/i, /^s/i],
      any: [/^sv/i, /^pi/i, /^o/i, /^t/i, /^c/i, /^p/i, /^se/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|dien(a|ā)|vakar(s|ā)|nakt(s|ī))/,
      abbreviated: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|pēcpusd\.|vakar(s|ā)|nakt(s|ī))/,
      wide: /^(am|pm|pusnakt(s|ī)|pusdienlaik(s|ā)|rīt(s|ā)|pēcpusdien(a|ā)|vakar(s|ā)|nakt(s|ī))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^pusn/i,
        noon: /^pusd/i,
        morning: /^r/i,
        afternoon: /^(d|pēc)/i,
        evening: /^v/i,
        night: /^n/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "wide",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/lv.js
var require_lv = __commonJS({
  "node_modules/date-fns/locale/lv.js"(exports) {
    "use strict";
    exports.lv = void 0;
    var _index = require_formatDistance53();
    var _index2 = require_formatLong60();
    var _index3 = require_formatRelative53();
    var _index4 = require_localize52();
    var _index5 = require_match51();
    var lv = exports.lv = {
      code: "lv",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/mk/_lib/formatDistance.js
var require_formatDistance54 = __commonJS({
  "node_modules/date-fns/locale/mk/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "помалку од секунда",
        other: "помалку од {{count}} секунди"
      },
      xSeconds: {
        one: "1 секунда",
        other: "{{count}} секунди"
      },
      halfAMinute: "половина минута",
      lessThanXMinutes: {
        one: "помалку од минута",
        other: "помалку од {{count}} минути"
      },
      xMinutes: {
        one: "1 минута",
        other: "{{count}} минути"
      },
      aboutXHours: {
        one: "околу 1 час",
        other: "околу {{count}} часа"
      },
      xHours: {
        one: "1 час",
        other: "{{count}} часа"
      },
      xDays: {
        one: "1 ден",
        other: "{{count}} дена"
      },
      aboutXWeeks: {
        one: "околу 1 недела",
        other: "околу {{count}} месеци"
      },
      xWeeks: {
        one: "1 недела",
        other: "{{count}} недели"
      },
      aboutXMonths: {
        one: "околу 1 месец",
        other: "околу {{count}} недели"
      },
      xMonths: {
        one: "1 месец",
        other: "{{count}} месеци"
      },
      aboutXYears: {
        one: "околу 1 година",
        other: "околу {{count}} години"
      },
      xYears: {
        one: "1 година",
        other: "{{count}} години"
      },
      overXYears: {
        one: "повеќе од 1 година",
        other: "повеќе од {{count}} години"
      },
      almostXYears: {
        one: "безмалку 1 година",
        other: "безмалку {{count}} години"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "за " + result;
        } else {
          return "пред " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/mk/_lib/formatLong.js
var require_formatLong61 = __commonJS({
  "node_modules/date-fns/locale/mk/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, dd MMMM yyyy",
      long: "dd MMMM yyyy",
      medium: "dd MMM yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      any: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/mk/_lib/formatRelative.js
var require_formatRelative54 = __commonJS({
  "node_modules/date-fns/locale/mk/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var weekdays = [
      "недела",
      "понеделник",
      "вторник",
      "среда",
      "четврток",
      "петок",
      "сабота"
    ];
    function lastWeek(day) {
      const weekday = weekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'минатата " + weekday + " во' p";
        case 1:
        case 2:
        case 4:
        case 5:
          return "'минатиот " + weekday + " во' p";
      }
    }
    function thisWeek(day) {
      const weekday = weekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'ова " + weekday + " вo' p";
        case 1:
        case 2:
        case 4:
        case 5:
          return "'овој " + weekday + " вo' p";
      }
    }
    function nextWeek(day) {
      const weekday = weekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'следната " + weekday + " вo' p";
        case 1:
        case 2:
        case 4:
        case 5:
          return "'следниот " + weekday + " вo' p";
      }
    }
    var formatRelativeLocale = {
      lastWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'вчера во' p",
      today: "'денес во' p",
      tomorrow: "'утре во' p",
      nextWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/mk/_lib/localize.js
var require_localize53 = __commonJS({
  "node_modules/date-fns/locale/mk/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["пр.н.е.", "н.е."],
      abbreviated: ["пред н. е.", "н. е."],
      wide: ["пред нашата ера", "нашата ера"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-ви кв.", "2-ри кв.", "3-ти кв.", "4-ти кв."],
      wide: ["1-ви квартал", "2-ри квартал", "3-ти квартал", "4-ти квартал"]
    };
    var monthValues = {
      abbreviated: [
        "јан",
        "фев",
        "мар",
        "апр",
        "мај",
        "јун",
        "јул",
        "авг",
        "септ",
        "окт",
        "ноем",
        "дек"
      ],
      wide: [
        "јануари",
        "февруари",
        "март",
        "април",
        "мај",
        "јуни",
        "јули",
        "август",
        "септември",
        "октомври",
        "ноември",
        "декември"
      ]
    };
    var dayValues = {
      narrow: ["Н", "П", "В", "С", "Ч", "П", "С"],
      short: ["не", "по", "вт", "ср", "че", "пе", "са"],
      abbreviated: ["нед", "пон", "вто", "сре", "чет", "пет", "саб"],
      wide: [
        "недела",
        "понеделник",
        "вторник",
        "среда",
        "четврток",
        "петок",
        "сабота"
      ]
    };
    var dayPeriodValues = {
      wide: {
        am: "претпладне",
        pm: "попладне",
        midnight: "полноќ",
        noon: "напладне",
        morning: "наутро",
        afternoon: "попладне",
        evening: "навечер",
        night: "ноќе"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      const rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + "-ви";
          case 2:
            return number + "-ри";
          case 7:
          case 8:
            return number + "-ми";
        }
      }
      return number + "-ти";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/mk/_lib/match.js
var require_match52 = __commonJS({
  "node_modules/date-fns/locale/mk/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?[врмт][и])?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((пр)?н\.?\s?е\.?)/i,
      abbreviated: /^((пр)?н\.?\s?е\.?)/i,
      wide: /^(пред нашата ера|нашата ера)/i
    };
    var parseEraPatterns = {
      any: [/^п/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[врт]?и?)? кв.?/i,
      wide: /^[1234](-?[врт]?и?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchDayPatterns = {
      narrow: /^[нпвсч]/i,
      short: /^(не|по|вт|ср|че|пе|са)/i,
      abbreviated: /^(нед|пон|вто|сре|чет|пет|саб)/i,
      wide: /^(недела|понеделник|вторник|среда|четврток|петок|сабота)/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[аб]/i]
    };
    var matchMonthPatterns = {
      abbreviated: /^(јан|фев|мар|апр|мај|јун|јул|авг|сеп|окт|ноем|дек)/i,
      wide: /^(јануари|февруари|март|април|мај|јуни|јули|август|септември|октомври|ноември|декември)/i
    };
    var parseMonthPatterns = {
      any: [
        /^ја/i,
        /^Ф/i,
        /^мар/i,
        /^ап/i,
        /^мај/i,
        /^јун/i,
        /^јул/i,
        /^ав/i,
        /^се/i,
        /^окт/i,
        /^но/i,
        /^де/i
      ]
    };
    var matchDayPeriodPatterns = {
      any: /^(претп|попл|полноќ|утро|пладне|вечер|ноќ)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /претпладне/i,
        pm: /попладне/i,
        midnight: /полноќ/i,
        noon: /напладне/i,
        morning: /наутро/i,
        afternoon: /попладне/i,
        evening: /навечер/i,
        night: /ноќе/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/mk.js
var require_mk = __commonJS({
  "node_modules/date-fns/locale/mk.js"(exports) {
    "use strict";
    exports.mk = void 0;
    var _index = require_formatDistance54();
    var _index2 = require_formatLong61();
    var _index3 = require_formatRelative54();
    var _index4 = require_localize53();
    var _index5 = require_match52();
    var mk = exports.mk = {
      code: "mk",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/mn/_lib/formatDistance.js
var require_formatDistance55 = __commonJS({
  "node_modules/date-fns/locale/mn/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "секунд хүрэхгүй",
        other: "{{count}} секунд хүрэхгүй"
      },
      xSeconds: {
        one: "1 секунд",
        other: "{{count}} секунд"
      },
      halfAMinute: "хагас минут",
      lessThanXMinutes: {
        one: "минут хүрэхгүй",
        other: "{{count}} минут хүрэхгүй"
      },
      xMinutes: {
        one: "1 минут",
        other: "{{count}} минут"
      },
      aboutXHours: {
        one: "ойролцоогоор 1 цаг",
        other: "ойролцоогоор {{count}} цаг"
      },
      xHours: {
        one: "1 цаг",
        other: "{{count}} цаг"
      },
      xDays: {
        one: "1 өдөр",
        other: "{{count}} өдөр"
      },
      aboutXWeeks: {
        one: "ойролцоогоор 1 долоо хоног",
        other: "ойролцоогоор {{count}} долоо хоног"
      },
      xWeeks: {
        one: "1 долоо хоног",
        other: "{{count}} долоо хоног"
      },
      aboutXMonths: {
        one: "ойролцоогоор 1 сар",
        other: "ойролцоогоор {{count}} сар"
      },
      xMonths: {
        one: "1 сар",
        other: "{{count}} сар"
      },
      aboutXYears: {
        one: "ойролцоогоор 1 жил",
        other: "ойролцоогоор {{count}} жил"
      },
      xYears: {
        one: "1 жил",
        other: "{{count}} жил"
      },
      overXYears: {
        one: "1 жил гаран",
        other: "{{count}} жил гаран"
      },
      almostXYears: {
        one: "бараг 1 жил",
        other: "бараг {{count}} жил"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        const words = result.split(" ");
        const lastword = words.pop();
        result = words.join(" ");
        switch (lastword) {
          case "секунд":
            result += " секундийн";
            break;
          case "минут":
            result += " минутын";
            break;
          case "цаг":
            result += " цагийн";
            break;
          case "өдөр":
            result += " өдрийн";
            break;
          case "сар":
            result += " сарын";
            break;
          case "жил":
            result += " жилийн";
            break;
          case "хоног":
            result += " хоногийн";
            break;
          case "гаран":
            result += " гараны";
            break;
          case "хүрэхгүй":
            result += " хүрэхгүй хугацааны";
            break;
          default:
            result += lastword + "-н";
        }
        if (options.comparison && options.comparison > 0) {
          return result + " дараа";
        } else {
          return result + " өмнө";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/mn/_lib/formatLong.js
var require_formatLong62 = __commonJS({
  "node_modules/date-fns/locale/mn/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y 'оны' MMMM'ын' d, EEEE 'гараг'",
      long: "y 'оны' MMMM'ын' d",
      medium: "y 'оны' MMM'ын' d",
      short: "y.MM.dd"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/mn/_lib/formatRelative.js
var require_formatRelative55 = __commonJS({
  "node_modules/date-fns/locale/mn/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'өнгөрсөн' eeee 'гарагийн' p 'цагт'",
      yesterday: "'өчигдөр' p 'цагт'",
      today: "'өнөөдөр' p 'цагт'",
      tomorrow: "'маргааш' p 'цагт'",
      nextWeek: "'ирэх' eeee 'гарагийн' p 'цагт'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/mn/_lib/localize.js
var require_localize54 = __commonJS({
  "node_modules/date-fns/locale/mn/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["НТӨ", "НТ"],
      abbreviated: ["НТӨ", "НТ"],
      wide: ["нийтийн тооллын өмнөх", "нийтийн тооллын"]
    };
    var quarterValues = {
      narrow: ["I", "II", "III", "IV"],
      abbreviated: ["I улирал", "II улирал", "III улирал", "IV улирал"],
      wide: ["1-р улирал", "2-р улирал", "3-р улирал", "4-р улирал"]
    };
    var monthValues = {
      narrow: [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII"
      ],
      abbreviated: [
        "1-р сар",
        "2-р сар",
        "3-р сар",
        "4-р сар",
        "5-р сар",
        "6-р сар",
        "7-р сар",
        "8-р сар",
        "9-р сар",
        "10-р сар",
        "11-р сар",
        "12-р сар"
      ],
      wide: [
        "Нэгдүгээр сар",
        "Хоёрдугаар сар",
        "Гуравдугаар сар",
        "Дөрөвдүгээр сар",
        "Тавдугаар сар",
        "Зургаадугаар сар",
        "Долоодугаар сар",
        "Наймдугаар сар",
        "Есдүгээр сар",
        "Аравдугаар сар",
        "Арваннэгдүгээр сар",
        "Арван хоёрдугаар сар"
      ]
    };
    var formattingMonthValues = {
      narrow: [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII"
      ],
      abbreviated: [
        "1-р сар",
        "2-р сар",
        "3-р сар",
        "4-р сар",
        "5-р сар",
        "6-р сар",
        "7-р сар",
        "8-р сар",
        "9-р сар",
        "10-р сар",
        "11-р сар",
        "12-р сар"
      ],
      wide: [
        "нэгдүгээр сар",
        "хоёрдугаар сар",
        "гуравдугаар сар",
        "дөрөвдүгээр сар",
        "тавдугаар сар",
        "зургаадугаар сар",
        "долоодугаар сар",
        "наймдугаар сар",
        "есдүгээр сар",
        "аравдугаар сар",
        "арваннэгдүгээр сар",
        "арван хоёрдугаар сар"
      ]
    };
    var dayValues = {
      narrow: ["Н", "Д", "М", "Л", "П", "Б", "Б"],
      short: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
      abbreviated: ["Ням", "Дав", "Мяг", "Лха", "Пүр", "Баа", "Бям"],
      wide: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"]
    };
    var formattingDayValues = {
      narrow: ["Н", "Д", "М", "Л", "П", "Б", "Б"],
      short: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
      abbreviated: ["Ням", "Дав", "Мяг", "Лха", "Пүр", "Баа", "Бям"],
      wide: ["ням", "даваа", "мягмар", "лхагва", "пүрэв", "баасан", "бямба"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ү.ө.",
        pm: "ү.х.",
        midnight: "шөнө дунд",
        noon: "үд дунд",
        morning: "өглөө",
        afternoon: "өдөр",
        evening: "орой",
        night: "шөнө"
      },
      abbreviated: {
        am: "ү.ө.",
        pm: "ү.х.",
        midnight: "шөнө дунд",
        noon: "үд дунд",
        morning: "өглөө",
        afternoon: "өдөр",
        evening: "орой",
        night: "шөнө"
      },
      wide: {
        am: "ү.ө.",
        pm: "ү.х.",
        midnight: "шөнө дунд",
        noon: "үд дунд",
        morning: "өглөө",
        afternoon: "өдөр",
        evening: "орой",
        night: "шөнө"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/mn/_lib/match.js
var require_match53 = __commonJS({
  "node_modules/date-fns/locale/mn/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /\d+/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(нтө|нт)/i,
      abbreviated: /^(нтө|нт)/i,
      wide: /^(нийтийн тооллын өмнө|нийтийн тооллын)/i
    };
    var parseEraPatterns = {
      any: [/^(нтө|нийтийн тооллын өмнө)/i, /^(нт|нийтийн тооллын)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^(iv|iii|ii|i)/i,
      abbreviated: /^(iv|iii|ii|i) улирал/i,
      wide: /^[1-4]-р улирал/i
    };
    var parseQuarterPatterns = {
      any: [/^(i(\s|$)|1)/i, /^(ii(\s|$)|2)/i, /^(iii(\s|$)|3)/i, /^(iv(\s|$)|4)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(xii|xi|x|ix|viii|vii|vi|v|iv|iii|ii|i)/i,
      abbreviated: /^(1-р сар|2-р сар|3-р сар|4-р сар|5-р сар|6-р сар|7-р сар|8-р сар|9-р сар|10-р сар|11-р сар|12-р сар)/i,
      wide: /^(нэгдүгээр сар|хоёрдугаар сар|гуравдугаар сар|дөрөвдүгээр сар|тавдугаар сар|зургаадугаар сар|долоодугаар сар|наймдугаар сар|есдүгээр сар|аравдугаар сар|арван нэгдүгээр сар|арван хоёрдугаар сар)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^i$/i,
        /^ii$/i,
        /^iii$/i,
        /^iv$/i,
        /^v$/i,
        /^vi$/i,
        /^vii$/i,
        /^viii$/i,
        /^ix$/i,
        /^x$/i,
        /^xi$/i,
        /^xii$/i
      ],
      any: [
        /^(1|нэгдүгээр)/i,
        /^(2|хоёрдугаар)/i,
        /^(3|гуравдугаар)/i,
        /^(4|дөрөвдүгээр)/i,
        /^(5|тавдугаар)/i,
        /^(6|зургаадугаар)/i,
        /^(7|долоодугаар)/i,
        /^(8|наймдугаар)/i,
        /^(9|есдүгээр)/i,
        /^(10|аравдугаар)/i,
        /^(11|арван нэгдүгээр)/i,
        /^(12|арван хоёрдугаар)/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[ндмлпбб]/i,
      short: /^(ня|да|мя|лх|пү|ба|бя)/i,
      abbreviated: /^(ням|дав|мяг|лха|пүр|баа|бям)/i,
      wide: /^(ням|даваа|мягмар|лхагва|пүрэв|баасан|бямба)/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^д/i, /^м/i, /^л/i, /^п/i, /^б/i, /^б/i],
      any: [/^ня/i, /^да/i, /^мя/i, /^лх/i, /^пү/i, /^ба/i, /^бя/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i,
      any: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ү\.ө\./i,
        pm: /^ү\.х\./i,
        midnight: /^шөнө дунд/i,
        noon: /^үд дунд/i,
        morning: /өглөө/i,
        afternoon: /өдөр/i,
        evening: /орой/i,
        night: /шөнө/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/mn.js
var require_mn = __commonJS({
  "node_modules/date-fns/locale/mn.js"(exports) {
    "use strict";
    exports.mn = void 0;
    var _index = require_formatDistance55();
    var _index2 = require_formatLong62();
    var _index3 = require_formatRelative55();
    var _index4 = require_localize54();
    var _index5 = require_match53();
    var mn = exports.mn = {
      code: "mn",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ms/_lib/formatDistance.js
var require_formatDistance56 = __commonJS({
  "node_modules/date-fns/locale/ms/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "kurang dari 1 saat",
        other: "kurang dari {{count}} saat"
      },
      xSeconds: {
        one: "1 saat",
        other: "{{count}} saat"
      },
      halfAMinute: "setengah minit",
      lessThanXMinutes: {
        one: "kurang dari 1 minit",
        other: "kurang dari {{count}} minit"
      },
      xMinutes: {
        one: "1 minit",
        other: "{{count}} minit"
      },
      aboutXHours: {
        one: "sekitar 1 jam",
        other: "sekitar {{count}} jam"
      },
      xHours: {
        one: "1 jam",
        other: "{{count}} jam"
      },
      xDays: {
        one: "1 hari",
        other: "{{count}} hari"
      },
      aboutXWeeks: {
        one: "sekitar 1 minggu",
        other: "sekitar {{count}} minggu"
      },
      xWeeks: {
        one: "1 minggu",
        other: "{{count}} minggu"
      },
      aboutXMonths: {
        one: "sekitar 1 bulan",
        other: "sekitar {{count}} bulan"
      },
      xMonths: {
        one: "1 bulan",
        other: "{{count}} bulan"
      },
      aboutXYears: {
        one: "sekitar 1 tahun",
        other: "sekitar {{count}} tahun"
      },
      xYears: {
        one: "1 tahun",
        other: "{{count}} tahun"
      },
      overXYears: {
        one: "lebih dari 1 tahun",
        other: "lebih dari {{count}} tahun"
      },
      almostXYears: {
        one: "hampir 1 tahun",
        other: "hampir {{count}} tahun"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "dalam masa " + result;
        } else {
          return result + " yang lalu";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ms/_lib/formatLong.js
var require_formatLong63 = __commonJS({
  "node_modules/date-fns/locale/ms/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "d/M/yyyy"
    };
    var timeFormats = {
      full: "HH.mm.ss",
      long: "HH.mm.ss",
      medium: "HH.mm",
      short: "HH.mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'pukul' {{time}}",
      long: "{{date}} 'pukul' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ms/_lib/formatRelative.js
var require_formatRelative56 = __commonJS({
  "node_modules/date-fns/locale/ms/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'lepas pada jam' p",
      yesterday: "'Semalam pada jam' p",
      today: "'Hari ini pada jam' p",
      tomorrow: "'Esok pada jam' p",
      nextWeek: "eeee 'pada jam' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ms/_lib/localize.js
var require_localize55 = __commonJS({
  "node_modules/date-fns/locale/ms/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["SM", "M"],
      abbreviated: ["SM", "M"],
      wide: ["Sebelum Masihi", "Masihi"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["S1", "S2", "S3", "S4"],
      wide: ["Suku pertama", "Suku kedua", "Suku ketiga", "Suku keempat"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"],
      abbreviated: [
        "Jan",
        "Feb",
        "Mac",
        "Apr",
        "Mei",
        "Jun",
        "Jul",
        "Ogo",
        "Sep",
        "Okt",
        "Nov",
        "Dis"
      ],
      wide: [
        "Januari",
        "Februari",
        "Mac",
        "April",
        "Mei",
        "Jun",
        "Julai",
        "Ogos",
        "September",
        "Oktober",
        "November",
        "Disember"
      ]
    };
    var dayValues = {
      narrow: ["A", "I", "S", "R", "K", "J", "S"],
      short: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
      abbreviated: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
      wide: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "tgh malam",
        noon: "tgh hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return "ke-" + Number(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ms/_lib/match.js
var require_match54 = __commonJS({
  "node_modules/date-fns/locale/ms/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^ke-(\d+)?/i;
    var parseOrdinalNumberPattern = /petama|\d+/i;
    var matchEraPatterns = {
      narrow: /^(sm|m)/i,
      abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
      wide: /^(sebelum masihi|masihi)/i
    };
    var parseEraPatterns = {
      any: [/^s/i, /^(m)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^S[1234]/i,
      wide: /Suku (pertama|kedua|ketiga|keempat)/i
    };
    var parseQuarterPatterns = {
      any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
      wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^o/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^ma/i,
        /^ap/i,
        /^me/i,
        /^jun/i,
        /^jul/i,
        /^og/i,
        /^s/i,
        /^ok/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[aisrkj]/i,
      short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
      abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
      wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
    };
    var parseDayPatterns = {
      narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
      any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
      any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pa/i,
        afternoon: /tengah h/i,
        evening: /pe/i,
        night: /m/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ms.js
var require_ms = __commonJS({
  "node_modules/date-fns/locale/ms.js"(exports) {
    "use strict";
    exports.ms = void 0;
    var _index = require_formatDistance56();
    var _index2 = require_formatLong63();
    var _index3 = require_formatRelative56();
    var _index4 = require_localize55();
    var _index5 = require_match54();
    var ms = exports.ms = {
      code: "ms",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/mt/_lib/formatDistance.js
var require_formatDistance57 = __commonJS({
  "node_modules/date-fns/locale/mt/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "inqas minn sekonda",
        other: "inqas minn {{count}} sekondi"
      },
      xSeconds: {
        one: "sekonda",
        other: "{{count}} sekondi"
      },
      halfAMinute: "nofs minuta",
      lessThanXMinutes: {
        one: "inqas minn minuta",
        other: "inqas minn {{count}} minuti"
      },
      xMinutes: {
        one: "minuta",
        other: "{{count}} minuti"
      },
      aboutXHours: {
        one: "madwar siegħa",
        other: "madwar {{count}} siegħat"
      },
      xHours: {
        one: "siegħa",
        other: "{{count}} siegħat"
      },
      xDays: {
        one: "ġurnata",
        other: "{{count}} ġranet"
      },
      aboutXWeeks: {
        one: "madwar ġimgħa",
        other: "madwar {{count}} ġimgħat"
      },
      xWeeks: {
        one: "ġimgħa",
        other: "{{count}} ġimgħat"
      },
      aboutXMonths: {
        one: "madwar xahar",
        other: "madwar {{count}} xhur"
      },
      xMonths: {
        one: "xahar",
        other: "{{count}} xhur"
      },
      aboutXYears: {
        one: "madwar sena",
        two: "madwar sentejn",
        other: "madwar {{count}} snin"
      },
      xYears: {
        one: "sena",
        two: "sentejn",
        other: "{{count}} snin"
      },
      overXYears: {
        one: "aktar minn sena",
        two: "aktar minn sentejn",
        other: "aktar minn {{count}} snin"
      },
      almostXYears: {
        one: "kważi sena",
        two: "kważi sentejn",
        other: "kważi {{count}} snin"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else if (count === 2 && tokenValue.two) {
        result = tokenValue.two;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "f'" + result;
        } else {
          return result + " ilu";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/mt/_lib/formatLong.js
var require_formatLong64 = __commonJS({
  "node_modules/date-fns/locale/mt/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/mt/_lib/formatRelative.js
var require_formatRelative57 = __commonJS({
  "node_modules/date-fns/locale/mt/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'li għadda' 'fil-'p",
      yesterday: "'Il-bieraħ fil-'p",
      today: "'Illum fil-'p",
      tomorrow: "'Għada fil-'p",
      nextWeek: "eeee 'fil-'p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/mt/_lib/localize.js
var require_localize56 = __commonJS({
  "node_modules/date-fns/locale/mt/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["Q", "W"],
      abbreviated: ["QK", "WK"],
      wide: ["qabel Kristu", "wara Kristu"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1. kwart", "2. kwart", "3. kwart", "4. kwart"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "Ġ", "L", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Jan",
        "Fra",
        "Mar",
        "Apr",
        "Mej",
        "Ġun",
        "Lul",
        "Aww",
        "Set",
        "Ott",
        "Nov",
        "Diċ"
      ],
      wide: [
        "Jannar",
        "Frar",
        "Marzu",
        "April",
        "Mejju",
        "Ġunju",
        "Lulju",
        "Awwissu",
        "Settembru",
        "Ottubru",
        "Novembru",
        "Diċembru"
      ]
    };
    var dayValues = {
      narrow: ["Ħ", "T", "T", "E", "Ħ", "Ġ", "S"],
      short: ["Ħa", "Tn", "Tl", "Er", "Ħa", "Ġi", "Si"],
      abbreviated: ["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"],
      wide: [
        "Il-Ħadd",
        "It-Tnejn",
        "It-Tlieta",
        "L-Erbgħa",
        "Il-Ħamis",
        "Il-Ġimgħa",
        "Is-Sibt"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "nofsillejl",
        noon: "nofsinhar",
        morning: "għodwa",
        afternoon: "wara nofsinhar",
        evening: "filgħaxija",
        night: "lejl"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "nofsillejl",
        noon: "nofsinhar",
        morning: "għodwa",
        afternoon: "wara nofsinhar",
        evening: "filgħaxija",
        night: "lejl"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "nofsillejl",
        noon: "nofsinhar",
        morning: "għodwa",
        afternoon: "wara nofsinhar",
        evening: "filgħaxija",
        night: "lejl"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: "filgħodu",
        afternoon: "wara nofsinhar",
        evening: "filgħaxija",
        night: "billejl"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: "filgħodu",
        afternoon: "wara nofsinhar",
        evening: "filgħaxija",
        night: "billejl"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: "filgħodu",
        afternoon: "wara nofsinhar",
        evening: "filgħaxija",
        night: "billejl"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "º";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/mt/_lib/match.js
var require_match55 = __commonJS({
  "node_modules/date-fns/locale/mt/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(q|w)/i,
      abbreviated: /^(q\.?\s?k\.?|b\.?\s?c\.?\s?e\.?|w\.?\s?k\.?)/i,
      wide: /^(qabel kristu|before common era|wara kristu|common era)/i
    };
    var parseEraPatterns = {
      any: [/^(q|b)/i, /^(w|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^k[1234]/i,
      wide: /^[1234](\.)? kwart/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmaglsond]/i,
      abbreviated: /^(jan|fra|mar|apr|mej|ġun|lul|aww|set|ott|nov|diċ)/i,
      wide: /^(jannar|frar|marzu|april|mejju|ġunju|lulju|awwissu|settembru|ottubru|novembru|diċembru)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^ġ/i,
        /^l/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mej/i,
        /^ġ/i,
        /^l/i,
        /^aw/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[ħteġs]/i,
      short: /^(ħa|tn|tl|er|ħa|ġi|si)/i,
      abbreviated: /^(ħad|tne|tli|erb|ħam|ġim|sib)/i,
      wide: /^(il-ħadd|it-tnejn|it-tlieta|l-erbgħa|il-ħamis|il-ġimgħa|is-sibt)/i
    };
    var parseDayPatterns = {
      narrow: [/^ħ/i, /^t/i, /^t/i, /^e/i, /^ħ/i, /^ġ/i, /^s/i],
      any: [
        /^(il-)?ħad/i,
        /^(it-)?tn/i,
        /^(it-)?tl/i,
        /^(l-)?er/i,
        /^(il-)?ham/i,
        /^(il-)?ġi/i,
        /^(is-)?si/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i,
      any: /^([ap]\.?\s?m\.?|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^f'nofsillejl/i,
        noon: /^f'nofsinhar/i,
        morning: /għodwa/i,
        afternoon: /wara(\s.*)nofsinhar/i,
        evening: /filgħaxija/i,
        night: /lejl/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/mt.js
var require_mt = __commonJS({
  "node_modules/date-fns/locale/mt.js"(exports) {
    "use strict";
    exports.mt = void 0;
    var _index = require_formatDistance57();
    var _index2 = require_formatLong64();
    var _index3 = require_formatRelative57();
    var _index4 = require_localize56();
    var _index5 = require_match55();
    var mt = exports.mt = {
      code: "mt",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/nb/_lib/formatDistance.js
var require_formatDistance58 = __commonJS({
  "node_modules/date-fns/locale/nb/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "mindre enn ett sekund",
        other: "mindre enn {{count}} sekunder"
      },
      xSeconds: {
        one: "ett sekund",
        other: "{{count}} sekunder"
      },
      halfAMinute: "et halvt minutt",
      lessThanXMinutes: {
        one: "mindre enn ett minutt",
        other: "mindre enn {{count}} minutter"
      },
      xMinutes: {
        one: "ett minutt",
        other: "{{count}} minutter"
      },
      aboutXHours: {
        one: "omtrent en time",
        other: "omtrent {{count}} timer"
      },
      xHours: {
        one: "en time",
        other: "{{count}} timer"
      },
      xDays: {
        one: "en dag",
        other: "{{count}} dager"
      },
      aboutXWeeks: {
        one: "omtrent en uke",
        other: "omtrent {{count}} uker"
      },
      xWeeks: {
        one: "en uke",
        other: "{{count}} uker"
      },
      aboutXMonths: {
        one: "omtrent en måned",
        other: "omtrent {{count}} måneder"
      },
      xMonths: {
        one: "en måned",
        other: "{{count}} måneder"
      },
      aboutXYears: {
        one: "omtrent ett år",
        other: "omtrent {{count}} år"
      },
      xYears: {
        one: "ett år",
        other: "{{count}} år"
      },
      overXYears: {
        one: "over ett år",
        other: "over {{count}} år"
      },
      almostXYears: {
        one: "nesten ett år",
        other: "nesten {{count}} år"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " siden";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/nb/_lib/formatLong.js
var require_formatLong65 = __commonJS({
  "node_modules/date-fns/locale/nb/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/nb/_lib/formatRelative.js
var require_formatRelative58 = __commonJS({
  "node_modules/date-fns/locale/nb/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'forrige' eeee 'kl.' p",
      yesterday: "'i går kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgen kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/nb/_lib/localize.js
var require_localize57 = __commonJS({
  "node_modules/date-fns/locale/nb/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["før Kristus", "etter Kristus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apr.",
        "mai",
        "juni",
        "juli",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "des."
      ],
      wide: [
        "januar",
        "februar",
        "mars",
        "april",
        "mai",
        "juni",
        "juli",
        "august",
        "september",
        "oktober",
        "november",
        "desember"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
      abbreviated: ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
      wide: [
        "søndag",
        "mandag",
        "tirsdag",
        "onsdag",
        "torsdag",
        "fredag",
        "lørdag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morg.",
        afternoon: "på etterm.",
        evening: "på kvelden",
        night: "på natten"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morg.",
        afternoon: "på etterm.",
        evening: "på kvelden",
        night: "på natten"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morgenen",
        afternoon: "på ettermiddagen",
        evening: "på kvelden",
        night: "på natten"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/nb/_lib/match.js
var require_match56 = __commonJS({
  "node_modules/date-fns/locale/nb/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^e/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
      wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(sø|ma|ti|on|to|fr|lø)/i,
      abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
      wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
    };
    var parseDayPatterns = {
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
      any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgen/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/nb.js
var require_nb = __commonJS({
  "node_modules/date-fns/locale/nb.js"(exports) {
    "use strict";
    exports.nb = void 0;
    var _index = require_formatDistance58();
    var _index2 = require_formatLong65();
    var _index3 = require_formatRelative58();
    var _index4 = require_localize57();
    var _index5 = require_match56();
    var nb = exports.nb = {
      code: "nb",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/nl/_lib/formatDistance.js
var require_formatDistance59 = __commonJS({
  "node_modules/date-fns/locale/nl/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "minder dan een seconde",
        other: "minder dan {{count}} seconden"
      },
      xSeconds: {
        one: "1 seconde",
        other: "{{count}} seconden"
      },
      halfAMinute: "een halve minuut",
      lessThanXMinutes: {
        one: "minder dan een minuut",
        other: "minder dan {{count}} minuten"
      },
      xMinutes: {
        one: "een minuut",
        other: "{{count}} minuten"
      },
      aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} uur"
      },
      xHours: {
        one: "1 uur",
        other: "{{count}} uur"
      },
      xDays: {
        one: "1 dag",
        other: "{{count}} dagen"
      },
      aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weken"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weken"
      },
      aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maanden"
      },
      xMonths: {
        one: "1 maand",
        other: "{{count}} maanden"
      },
      aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
      },
      xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
      },
      overXYears: {
        one: "meer dan 1 jaar",
        other: "meer dan {{count}} jaar"
      },
      almostXYears: {
        one: "bijna 1 jaar",
        other: "bijna {{count}} jaar"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "over " + result;
        } else {
          return result + " geleden";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/nl/_lib/formatLong.js
var require_formatLong66 = __commonJS({
  "node_modules/date-fns/locale/nl/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd-MM-y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/nl/_lib/formatRelative.js
var require_formatRelative59 = __commonJS({
  "node_modules/date-fns/locale/nl/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'afgelopen' eeee 'om' p",
      yesterday: "'gisteren om' p",
      today: "'vandaag om' p",
      tomorrow: "'morgen om' p",
      nextWeek: "eeee 'om' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/nl/_lib/localize.js
var require_localize58 = __commonJS({
  "node_modules/date-fns/locale/nl/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["v.C.", "n.C."],
      abbreviated: ["v.Chr.", "n.Chr."],
      wide: ["voor Christus", "na Christus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jan.",
        "feb.",
        "mrt.",
        "apr.",
        "mei",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "januari",
        "februari",
        "maart",
        "april",
        "mei",
        "juni",
        "juli",
        "augustus",
        "september",
        "oktober",
        "november",
        "december"
      ]
    };
    var dayValues = {
      narrow: ["Z", "M", "D", "W", "D", "V", "Z"],
      short: ["zo", "ma", "di", "wo", "do", "vr", "za"],
      abbreviated: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
      wide: [
        "zondag",
        "maandag",
        "dinsdag",
        "woensdag",
        "donderdag",
        "vrijdag",
        "zaterdag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "e";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/nl/_lib/match.js
var require_match57 = __commonJS({
  "node_modules/date-fns/locale/nl/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)e?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?Chr\.?)/,
      wide: /^((voor|na) Christus)/
    };
    var parseEraPatterns = {
      any: [/^v/, /^n/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234]e kwartaal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^jan/i,
        /^feb/i,
        /^m(r|a)/i,
        /^apr/i,
        /^mei/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^sep/i,
        /^okt/i,
        /^nov/i,
        /^dec/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[zmdwv]/i,
      short: /^(zo|ma|di|wo|do|vr|za)/i,
      abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
      wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
      any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^het middaguur/i,
        morning: /ochtend/i,
        afternoon: /middag/i,
        evening: /avond/i,
        night: /nacht/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/nl.js
var require_nl = __commonJS({
  "node_modules/date-fns/locale/nl.js"(exports) {
    "use strict";
    exports.nl = void 0;
    var _index = require_formatDistance59();
    var _index2 = require_formatLong66();
    var _index3 = require_formatRelative59();
    var _index4 = require_localize58();
    var _index5 = require_match57();
    var nl = exports.nl = {
      code: "nl",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/nl-BE/_lib/formatDistance.js
var require_formatDistance60 = __commonJS({
  "node_modules/date-fns/locale/nl-BE/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "minder dan een seconde",
        other: "minder dan {{count}} seconden"
      },
      xSeconds: {
        one: "1 seconde",
        other: "{{count}} seconden"
      },
      halfAMinute: "een halve minuut",
      lessThanXMinutes: {
        one: "minder dan een minuut",
        other: "minder dan {{count}} minuten"
      },
      xMinutes: {
        one: "een minuut",
        other: "{{count}} minuten"
      },
      aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} uur"
      },
      xHours: {
        one: "1 uur",
        other: "{{count}} uur"
      },
      xDays: {
        one: "1 dag",
        other: "{{count}} dagen"
      },
      aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weken"
      },
      xWeeks: {
        one: "1 week",
        other: "{{count}} weken"
      },
      aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maanden"
      },
      xMonths: {
        one: "1 maand",
        other: "{{count}} maanden"
      },
      aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
      },
      xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
      },
      overXYears: {
        one: "meer dan 1 jaar",
        other: "meer dan {{count}} jaar"
      },
      almostXYears: {
        one: "bijna 1 jaar",
        other: "bijna {{count}} jaar"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "over " + result;
        } else {
          return result + " geleden";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/nl-BE/_lib/formatLong.js
var require_formatLong67 = __commonJS({
  "node_modules/date-fns/locale/nl-BE/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'om' {{time}}",
      long: "{{date}} 'om' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/nl-BE/_lib/formatRelative.js
var require_formatRelative60 = __commonJS({
  "node_modules/date-fns/locale/nl-BE/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'vorige' eeee 'om' p",
      yesterday: "'gisteren om' p",
      today: "'vandaag om' p",
      tomorrow: "'morgen om' p",
      nextWeek: "eeee 'om' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/nl-BE/_lib/localize.js
var require_localize59 = __commonJS({
  "node_modules/date-fns/locale/nl-BE/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["v.C.", "n.C."],
      abbreviated: ["v.Chr.", "n.Chr."],
      wide: ["voor Christus", "na Christus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["K1", "K2", "K3", "K4"],
      wide: ["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jan.",
        "feb.",
        "mrt.",
        "apr.",
        "mei",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "januari",
        "februari",
        "maart",
        "april",
        "mei",
        "juni",
        "juli",
        "augustus",
        "september",
        "oktober",
        "november",
        "december"
      ]
    };
    var dayValues = {
      narrow: ["Z", "M", "D", "W", "D", "V", "Z"],
      short: ["zo", "ma", "di", "wo", "do", "vr", "za"],
      abbreviated: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
      wide: [
        "zondag",
        "maandag",
        "dinsdag",
        "woensdag",
        "donderdag",
        "vrijdag",
        "zaterdag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middag",
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middag",
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middag",
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "e";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/nl-BE/_lib/match.js
var require_match58 = __commonJS({
  "node_modules/date-fns/locale/nl-BE/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)e?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([vn]\.? ?C\.?)/,
      abbreviated: /^([vn]\. ?Chr\.?)/,
      wide: /^((voor|na) Christus)/
    };
    var parseEraPatterns = {
      any: [/^v/, /^n/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^K[1234]/i,
      wide: /^[1234]e kwartaal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
      wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^jan/i,
        /^feb/i,
        /^m(r|a)/i,
        /^apr/i,
        /^mei/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^sep/i,
        /^okt/i,
        /^nov/i,
        /^dec/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[zmdwv]/i,
      short: /^(zo|ma|di|wo|do|vr|za)/i,
      abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
      wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
    };
    var parseDayPatterns = {
      narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
      any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^het middaguur/i,
        morning: /ochtend/i,
        afternoon: /middag/i,
        evening: /avond/i,
        night: /nacht/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/nl-BE.js
var require_nl_BE = __commonJS({
  "node_modules/date-fns/locale/nl-BE.js"(exports) {
    "use strict";
    exports.nlBE = void 0;
    var _index = require_formatDistance60();
    var _index2 = require_formatLong67();
    var _index3 = require_formatRelative60();
    var _index4 = require_localize59();
    var _index5 = require_match58();
    var nlBE = exports.nlBE = {
      code: "nl-BE",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/nn/_lib/formatDistance.js
var require_formatDistance61 = __commonJS({
  "node_modules/date-fns/locale/nn/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "mindre enn eitt sekund",
        other: "mindre enn {{count}} sekund"
      },
      xSeconds: {
        one: "eitt sekund",
        other: "{{count}} sekund"
      },
      halfAMinute: "eit halvt minutt",
      lessThanXMinutes: {
        one: "mindre enn eitt minutt",
        other: "mindre enn {{count}} minutt"
      },
      xMinutes: {
        one: "eitt minutt",
        other: "{{count}} minutt"
      },
      aboutXHours: {
        one: "omtrent ein time",
        other: "omtrent {{count}} timar"
      },
      xHours: {
        one: "ein time",
        other: "{{count}} timar"
      },
      xDays: {
        one: "ein dag",
        other: "{{count}} dagar"
      },
      aboutXWeeks: {
        one: "omtrent ei veke",
        other: "omtrent {{count}} veker"
      },
      xWeeks: {
        one: "ei veke",
        other: "{{count}} veker"
      },
      aboutXMonths: {
        one: "omtrent ein månad",
        other: "omtrent {{count}} månader"
      },
      xMonths: {
        one: "ein månad",
        other: "{{count}} månader"
      },
      aboutXYears: {
        one: "omtrent eitt år",
        other: "omtrent {{count}} år"
      },
      xYears: {
        one: "eitt år",
        other: "{{count}} år"
      },
      overXYears: {
        one: "over eitt år",
        other: "over {{count}} år"
      },
      almostXYears: {
        one: "nesten eitt år",
        other: "nesten {{count}} år"
      }
    };
    var wordMapping = [
      "null",
      "ein",
      "to",
      "tre",
      "fire",
      "fem",
      "seks",
      "sju",
      "åtte",
      "ni",
      "ti",
      "elleve",
      "tolv"
    ];
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace(
          "{{count}}",
          count < 13 ? wordMapping[count] : String(count)
        );
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " sidan";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/nn/_lib/formatLong.js
var require_formatLong68 = __commonJS({
  "node_modules/date-fns/locale/nn/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d. MMMM y",
      long: "d. MMMM y",
      medium: "d. MMM y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/nn/_lib/formatRelative.js
var require_formatRelative61 = __commonJS({
  "node_modules/date-fns/locale/nn/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'førre' eeee 'kl.' p",
      yesterday: "'i går kl.' p",
      today: "'i dag kl.' p",
      tomorrow: "'i morgon kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/nn/_lib/localize.js
var require_localize60 = __commonJS({
  "node_modules/date-fns/locale/nn/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["før Kristus", "etter Kristus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apr.",
        "mai",
        "juni",
        "juli",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "des."
      ],
      wide: [
        "januar",
        "februar",
        "mars",
        "april",
        "mai",
        "juni",
        "juli",
        "august",
        "september",
        "oktober",
        "november",
        "desember"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["su", "må", "ty", "on", "to", "fr", "lau"],
      abbreviated: ["sun", "mån", "tys", "ons", "tor", "fre", "laur"],
      wide: [
        "sundag",
        "måndag",
        "tysdag",
        "onsdag",
        "torsdag",
        "fredag",
        "laurdag"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morg.",
        afternoon: "på etterm.",
        evening: "på kvelden",
        night: "på natta"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morg.",
        afternoon: "på etterm.",
        evening: "på kvelden",
        night: "på natta"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morgonen",
        afternoon: "på ettermiddagen",
        evening: "på kvelden",
        night: "på natta"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/nn/_lib/match.js
var require_match59 = __commonJS({
  "node_modules/date-fns/locale/nn/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
      wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^e/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
      wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(su|må|ty|on|to|fr|la)/i,
      abbreviated: /^(sun|mån|tys|ons|tor|fre|laur)/i,
      wide: /^(sundag|måndag|tysdag|onsdag|torsdag|fredag|laurdag)/i
    };
    var parseDayPatterns = {
      any: [/^s/i, /^m/i, /^ty/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
      any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/nn.js
var require_nn = __commonJS({
  "node_modules/date-fns/locale/nn.js"(exports) {
    "use strict";
    exports.nn = void 0;
    var _index = require_formatDistance61();
    var _index2 = require_formatLong68();
    var _index3 = require_formatRelative61();
    var _index4 = require_localize60();
    var _index5 = require_match59();
    var nn = exports.nn = {
      code: "nn",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/oc/_lib/formatDistance.js
var require_formatDistance62 = __commonJS({
  "node_modules/date-fns/locale/oc/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "mens d’una segonda",
        other: "mens de {{count}} segondas"
      },
      xSeconds: {
        one: "1 segonda",
        other: "{{count}} segondas"
      },
      halfAMinute: "30 segondas",
      lessThanXMinutes: {
        one: "mens d’una minuta",
        other: "mens de {{count}} minutas"
      },
      xMinutes: {
        one: "1 minuta",
        other: "{{count}} minutas"
      },
      aboutXHours: {
        one: "environ 1 ora",
        other: "environ {{count}} oras"
      },
      xHours: {
        one: "1 ora",
        other: "{{count}} oras"
      },
      xDays: {
        one: "1 jorn",
        other: "{{count}} jorns"
      },
      aboutXWeeks: {
        one: "environ 1 setmana",
        other: "environ {{count}} setmanas"
      },
      xWeeks: {
        one: "1 setmana",
        other: "{{count}} setmanas"
      },
      aboutXMonths: {
        one: "environ 1 mes",
        other: "environ {{count}} meses"
      },
      xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "environ 1 an",
        other: "environ {{count}} ans"
      },
      xYears: {
        one: "1 an",
        other: "{{count}} ans"
      },
      overXYears: {
        one: "mai d’un an",
        other: "mai de {{count}} ans"
      },
      almostXYears: {
        one: "gaireben un an",
        other: "gaireben {{count}} ans"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "d’aquí " + result;
        } else {
          return "fa " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/oc/_lib/formatLong.js
var require_formatLong69 = __commonJS({
  "node_modules/date-fns/locale/oc/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d 'de' MMMM y",
      long: "d 'de' MMMM y",
      medium: "d MMM y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'a' {{time}}",
      long: "{{date}} 'a' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/oc/_lib/formatRelative.js
var require_formatRelative62 = __commonJS({
  "node_modules/date-fns/locale/oc/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'passat a' p",
      yesterday: "'ièr a' p",
      today: "'uèi a' p",
      tomorrow: "'deman a' p",
      nextWeek: "eeee 'a' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/oc/_lib/localize.js
var require_localize61 = __commonJS({
  "node_modules/date-fns/locale/oc/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ab. J.C.", "apr. J.C."],
      abbreviated: ["ab. J.C.", "apr. J.C."],
      wide: ["abans Jèsus-Crist", "après Jèsus-Crist"]
    };
    var quarterValues = {
      narrow: ["T1", "T2", "T3", "T4"],
      abbreviated: ["1èr trim.", "2nd trim.", "3en trim.", "4en trim."],
      wide: ["1èr trimèstre", "2nd trimèstre", "3en trimèstre", "4en trimèstre"]
    };
    var monthValues = {
      narrow: [
        "GN",
        "FB",
        "MÇ",
        "AB",
        "MA",
        "JN",
        "JL",
        "AG",
        "ST",
        "OC",
        "NV",
        "DC"
      ],
      abbreviated: [
        "gen.",
        "febr.",
        "març",
        "abr.",
        "mai",
        "junh",
        "jul.",
        "ag.",
        "set.",
        "oct.",
        "nov.",
        "dec."
      ],
      wide: [
        "genièr",
        "febrièr",
        "març",
        "abril",
        "mai",
        "junh",
        "julhet",
        "agost",
        "setembre",
        "octòbre",
        "novembre",
        "decembre"
      ]
    };
    var dayValues = {
      narrow: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
      short: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
      abbreviated: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
      wide: [
        "dimenge",
        "diluns",
        "dimars",
        "dimècres",
        "dijòus",
        "divendres",
        "dissabte"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "mièjanuèch",
        noon: "miègjorn",
        morning: "matin",
        afternoon: "aprèp-miègjorn",
        evening: "vèspre",
        night: "nuèch"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "mièjanuèch",
        noon: "miègjorn",
        morning: "matin",
        afternoon: "aprèp-miègjorn",
        evening: "vèspre",
        night: "nuèch"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "mièjanuèch",
        noon: "miègjorn",
        morning: "matin",
        afternoon: "aprèp-miègjorn",
        evening: "vèspre",
        night: "nuèch"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "mièjanuèch",
        noon: "miègjorn",
        morning: "del matin",
        afternoon: "de l’aprèp-miègjorn",
        evening: "del ser",
        night: "de la nuèch"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mièjanuèch",
        noon: "miègjorn",
        morning: "del matin",
        afternoon: "de l’aprèp-miègjorn",
        evening: "del ser",
        night: "de la nuèch"
      },
      wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "mièjanuèch",
        noon: "miègjorn",
        morning: "del matin",
        afternoon: "de l’aprèp-miègjorn",
        evening: "del ser",
        night: "de la nuèch"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = options == null ? void 0 : options.unit;
      let ordinal;
      switch (number) {
        case 1:
          ordinal = "èr";
          break;
        case 2:
          ordinal = "nd";
          break;
        default:
          ordinal = "en";
      }
      if (unit === "year" || unit === "week" || unit === "hour" || unit === "minute" || unit === "second") {
        ordinal += "a";
      }
      return number + ordinal;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/oc/_lib/match.js
var require_match60 = __commonJS({
  "node_modules/date-fns/locale/oc/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(èr|nd|en)?[a]?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ab\.J\.C|apr\.J\.C|apr\.J\.-C)/i,
      abbreviated: /^(ab\.J\.-C|ab\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
      wide: /^(abans Jèsus-Crist|après Jèsus-Crist)/i
    };
    var parseEraPatterns = {
      any: [/^ab/i, /^ap/i]
    };
    var matchQuarterPatterns = {
      narrow: /^T[1234]/i,
      abbreviated: /^[1234](èr|nd|en)? trim\.?/i,
      wide: /^[1234](èr|nd|en)? trimèstre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(GN|FB|MÇ|AB|MA|JN|JL|AG|ST|OC|NV|DC)/i,
      abbreviated: /^(gen|febr|març|abr|mai|junh|jul|ag|set|oct|nov|dec)\.?/i,
      wide: /^(genièr|febrièr|març|abril|mai|junh|julhet|agost|setembre|octòbre|novembre|decembre)/i
    };
    var parseMonthPatterns = {
      any: [
        /^g/i,
        /^f/i,
        /^ma[r?]|MÇ/i,
        /^ab/i,
        /^ma[i?]/i,
        /^ju[n?]|JN/i,
        /^ju[l?]|JL/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^d[glmcjvs]\.?/i,
      short: /^d[glmcjvs]\.?/i,
      abbreviated: /^d[glmcjvs]\.?/i,
      wide: /^(dimenge|diluns|dimars|dimècres|dijòus|divendres|dissabte)/i
    };
    var parseDayPatterns = {
      narrow: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
      short: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
      abbreviated: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
      any: [
        /^dg|dime/i,
        /^dl|dil/i,
        /^dm|dima/i,
        /^dc|dimè/i,
        /^dj|dij/i,
        /^dv|div/i,
        /^ds|dis/i
      ]
    };
    var matchDayPeriodPatterns = {
      any: /(^(a\.?m|p\.?m))|(ante meridiem|post meridiem)|((del |de la |de l’)(matin|aprèp-miègjorn|vèspre|ser|nuèch))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /(^a)|ante meridiem/i,
        pm: /(^p)|post meridiem/i,
        midnight: /^mièj/i,
        noon: /^mièg/i,
        morning: /matin/i,
        afternoon: /aprèp-miègjorn/i,
        evening: /vèspre|ser/i,
        night: /nuèch/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/oc.js
var require_oc = __commonJS({
  "node_modules/date-fns/locale/oc.js"(exports) {
    "use strict";
    exports.oc = void 0;
    var _index = require_formatDistance62();
    var _index2 = require_formatLong69();
    var _index3 = require_formatRelative62();
    var _index4 = require_localize61();
    var _index5 = require_match60();
    var oc = exports.oc = {
      code: "oc",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/pl/_lib/formatDistance.js
var require_formatDistance63 = __commonJS({
  "node_modules/date-fns/locale/pl/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          regular: "mniej niż sekunda",
          past: "mniej niż sekundę",
          future: "mniej niż sekundę"
        },
        twoFour: "mniej niż {{count}} sekundy",
        other: "mniej niż {{count}} sekund"
      },
      xSeconds: {
        one: {
          regular: "sekunda",
          past: "sekundę",
          future: "sekundę"
        },
        twoFour: "{{count}} sekundy",
        other: "{{count}} sekund"
      },
      halfAMinute: {
        one: "pół minuty",
        twoFour: "pół minuty",
        other: "pół minuty"
      },
      lessThanXMinutes: {
        one: {
          regular: "mniej niż minuta",
          past: "mniej niż minutę",
          future: "mniej niż minutę"
        },
        twoFour: "mniej niż {{count}} minuty",
        other: "mniej niż {{count}} minut"
      },
      xMinutes: {
        one: {
          regular: "minuta",
          past: "minutę",
          future: "minutę"
        },
        twoFour: "{{count}} minuty",
        other: "{{count}} minut"
      },
      aboutXHours: {
        one: {
          regular: "około godziny",
          past: "około godziny",
          future: "około godzinę"
        },
        twoFour: "około {{count}} godziny",
        other: "około {{count}} godzin"
      },
      xHours: {
        one: {
          regular: "godzina",
          past: "godzinę",
          future: "godzinę"
        },
        twoFour: "{{count}} godziny",
        other: "{{count}} godzin"
      },
      xDays: {
        one: {
          regular: "dzień",
          past: "dzień",
          future: "1 dzień"
        },
        twoFour: "{{count}} dni",
        other: "{{count}} dni"
      },
      aboutXWeeks: {
        one: "około tygodnia",
        twoFour: "około {{count}} tygodni",
        other: "około {{count}} tygodni"
      },
      xWeeks: {
        one: "tydzień",
        twoFour: "{{count}} tygodnie",
        other: "{{count}} tygodni"
      },
      aboutXMonths: {
        one: "około miesiąc",
        twoFour: "około {{count}} miesiące",
        other: "około {{count}} miesięcy"
      },
      xMonths: {
        one: "miesiąc",
        twoFour: "{{count}} miesiące",
        other: "{{count}} miesięcy"
      },
      aboutXYears: {
        one: "około rok",
        twoFour: "około {{count}} lata",
        other: "około {{count}} lat"
      },
      xYears: {
        one: "rok",
        twoFour: "{{count}} lata",
        other: "{{count}} lat"
      },
      overXYears: {
        one: "ponad rok",
        twoFour: "ponad {{count}} lata",
        other: "ponad {{count}} lat"
      },
      almostXYears: {
        one: "prawie rok",
        twoFour: "prawie {{count}} lata",
        other: "prawie {{count}} lat"
      }
    };
    function declensionGroup(scheme, count) {
      if (count === 1) {
        return scheme.one;
      }
      const rem100 = count % 100;
      if (rem100 <= 20 && rem100 > 10) {
        return scheme.other;
      }
      const rem10 = rem100 % 10;
      if (rem10 >= 2 && rem10 <= 4) {
        return scheme.twoFour;
      }
      return scheme.other;
    }
    function declension(scheme, count, time) {
      const group = declensionGroup(scheme, count);
      const finalText = typeof group === "string" ? group : group[time];
      return finalText.replace("{{count}}", String(count));
    }
    var formatDistance = (token, count, options) => {
      const scheme = formatDistanceLocale[token];
      if (!(options == null ? void 0 : options.addSuffix)) {
        return declension(scheme, count, "regular");
      }
      if (options.comparison && options.comparison > 0) {
        return "za " + declension(scheme, count, "future");
      } else {
        return declension(scheme, count, "past") + " temu";
      }
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/pl/_lib/formatLong.js
var require_formatLong70 = __commonJS({
  "node_modules/date-fns/locale/pl/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM y",
      long: "do MMMM y",
      medium: "do MMM y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/pl/_lib/formatRelative.js
var require_formatRelative63 = __commonJS({
  "node_modules/date-fns/locale/pl/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var adjectivesLastWeek = {
      masculine: "ostatni",
      feminine: "ostatnia"
    };
    var adjectivesThisWeek = {
      masculine: "ten",
      feminine: "ta"
    };
    var adjectivesNextWeek = {
      masculine: "następny",
      feminine: "następna"
    };
    var dayGrammaticalGender = {
      0: "feminine",
      1: "masculine",
      2: "masculine",
      3: "feminine",
      4: "masculine",
      5: "masculine",
      6: "feminine"
    };
    function dayAndTimeWithAdjective(token, date, baseDate, options) {
      let adjectives;
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        adjectives = adjectivesThisWeek;
      } else if (token === "lastWeek") {
        adjectives = adjectivesLastWeek;
      } else if (token === "nextWeek") {
        adjectives = adjectivesNextWeek;
      } else {
        throw new Error(`Cannot determine adjectives for token ${token}`);
      }
      const day = date.getDay();
      const grammaticalGender = dayGrammaticalGender[day];
      const adjective = adjectives[grammaticalGender];
      return `'${adjective}' eeee 'o' p`;
    }
    var formatRelativeLocale = {
      lastWeek: dayAndTimeWithAdjective,
      yesterday: "'wczoraj o' p",
      today: "'dzisiaj o' p",
      tomorrow: "'jutro o' p",
      nextWeek: dayAndTimeWithAdjective,
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(token, date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/pl/_lib/localize.js
var require_localize62 = __commonJS({
  "node_modules/date-fns/locale/pl/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["p.n.e.", "n.e."],
      abbreviated: ["p.n.e.", "n.e."],
      wide: ["przed naszą erą", "naszej ery"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["I kw.", "II kw.", "III kw.", "IV kw."],
      wide: ["I kwartał", "II kwartał", "III kwartał", "IV kwartał"]
    };
    var monthValues = {
      narrow: ["S", "L", "M", "K", "M", "C", "L", "S", "W", "P", "L", "G"],
      abbreviated: [
        "sty",
        "lut",
        "mar",
        "kwi",
        "maj",
        "cze",
        "lip",
        "sie",
        "wrz",
        "paź",
        "lis",
        "gru"
      ],
      wide: [
        "styczeń",
        "luty",
        "marzec",
        "kwiecień",
        "maj",
        "czerwiec",
        "lipiec",
        "sierpień",
        "wrzesień",
        "październik",
        "listopad",
        "grudzień"
      ]
    };
    var monthFormattingValues = {
      narrow: ["s", "l", "m", "k", "m", "c", "l", "s", "w", "p", "l", "g"],
      abbreviated: [
        "sty",
        "lut",
        "mar",
        "kwi",
        "maj",
        "cze",
        "lip",
        "sie",
        "wrz",
        "paź",
        "lis",
        "gru"
      ],
      wide: [
        "stycznia",
        "lutego",
        "marca",
        "kwietnia",
        "maja",
        "czerwca",
        "lipca",
        "sierpnia",
        "września",
        "października",
        "listopada",
        "grudnia"
      ]
    };
    var dayValues = {
      narrow: ["N", "P", "W", "Ś", "C", "P", "S"],
      short: ["nie", "pon", "wto", "śro", "czw", "pią", "sob"],
      abbreviated: ["niedz.", "pon.", "wt.", "śr.", "czw.", "pt.", "sob."],
      wide: [
        "niedziela",
        "poniedziałek",
        "wtorek",
        "środa",
        "czwartek",
        "piątek",
        "sobota"
      ]
    };
    var dayFormattingValues = {
      narrow: ["n", "p", "w", "ś", "c", "p", "s"],
      short: ["nie", "pon", "wto", "śro", "czw", "pią", "sob"],
      abbreviated: ["niedz.", "pon.", "wt.", "śr.", "czw.", "pt.", "sob."],
      wide: [
        "niedziela",
        "poniedziałek",
        "wtorek",
        "środa",
        "czwartek",
        "piątek",
        "sobota"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "półn.",
        noon: "poł",
        morning: "rano",
        afternoon: "popoł.",
        evening: "wiecz.",
        night: "noc"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "północ",
        noon: "południe",
        morning: "rano",
        afternoon: "popołudnie",
        evening: "wieczór",
        night: "noc"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "północ",
        noon: "południe",
        morning: "rano",
        afternoon: "popołudnie",
        evening: "wieczór",
        night: "noc"
      }
    };
    var dayPeriodFormattingValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "o półn.",
        noon: "w poł.",
        morning: "rano",
        afternoon: "po poł.",
        evening: "wiecz.",
        night: "w nocy"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "o północy",
        noon: "w południe",
        morning: "rano",
        afternoon: "po południu",
        evening: "wieczorem",
        night: "w nocy"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "o północy",
        noon: "w południe",
        morning: "rano",
        afternoon: "po południu",
        evening: "wieczorem",
        night: "w nocy"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: monthFormattingValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: dayFormattingValues,
        defaultFormattingWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: dayPeriodFormattingValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/pl/_lib/match.js
var require_match61 = __commonJS({
  "node_modules/date-fns/locale/pl/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
      abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
      wide: /^(przed\s*nasz(ą|a)\s*er(ą|a)|naszej\s*ery)/i
    };
    var parseEraPatterns = {
      any: [/^p/i, /^n/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
      wide: /^(I|II|III|IV)\s*kwarta(ł|l)/i
    };
    var parseQuarterPatterns = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
    };
    var matchMonthPatterns = {
      narrow: /^[slmkcwpg]/i,
      abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(ź|z)|lis|gru)/i,
      wide: /^(stycznia|stycze(ń|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(ń|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(ń|n)|wrze(ś|s)nia|wrzesie(ń|n)|pa(ź|z)dziernika|pa(ź|z)dziernik|listopada|listopad|grudnia|grudzie(ń|n))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^s/i,
        /^l/i,
        /^m/i,
        /^k/i,
        /^m/i,
        /^c/i,
        /^l/i,
        /^s/i,
        /^w/i,
        /^p/i,
        /^l/i,
        /^g/i
      ],
      any: [
        /^st/i,
        /^lu/i,
        /^mar/i,
        /^k/i,
        /^maj/i,
        /^c/i,
        /^lip/i,
        /^si/i,
        /^w/i,
        /^p/i,
        /^lis/i,
        /^g/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[npwścs]/i,
      short: /^(nie|pon|wto|(ś|s)ro|czw|pi(ą|a)|sob)/i,
      abbreviated: /^(niedz|pon|wt|(ś|s)r|czw|pt|sob)\.?/i,
      wide: /^(niedziela|poniedzia(ł|l)ek|wtorek|(ś|s)roda|czwartek|pi(ą|a)tek|sobota)/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^w/i, /^ś/i, /^c/i, /^p/i, /^s/i],
      abbreviated: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pt/i, /^so/i],
      any: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pi/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(^a$|^p$|pó(ł|l)n\.?|o\s*pó(ł|l)n\.?|po(ł|l)\.?|w\s*po(ł|l)\.?|po\s*po(ł|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
      any: /^(am|pm|pó(ł|l)noc|o\s*pó(ł|l)nocy|po(ł|l)udnie|w\s*po(ł|l)udnie|popo(ł|l)udnie|po\s*po(ł|l)udniu|rano|wieczór|wieczorem|noc|w\s*nocy)/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^a$/i,
        pm: /^p$/i,
        midnight: /pó(ł|l)n/i,
        noon: /po(ł|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(ł|l)/i,
        evening: /wiecz/i,
        night: /noc/i
      },
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /pó(ł|l)n/i,
        noon: /po(ł|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(ł|l)/i,
        evening: /wiecz/i,
        night: /noc/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/pl.js
var require_pl = __commonJS({
  "node_modules/date-fns/locale/pl.js"(exports) {
    "use strict";
    exports.pl = void 0;
    var _index = require_formatDistance63();
    var _index2 = require_formatLong70();
    var _index3 = require_formatRelative63();
    var _index4 = require_localize62();
    var _index5 = require_match61();
    var pl = exports.pl = {
      code: "pl",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/pt/_lib/formatDistance.js
var require_formatDistance64 = __commonJS({
  "node_modules/date-fns/locale/pt/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "menos de um segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "meio minuto",
      lessThanXMinutes: {
        one: "menos de um minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "aproximadamente 1 hora",
        other: "aproximadamente {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 dia",
        other: "{{count}} dias"
      },
      aboutXWeeks: {
        one: "aproximadamente 1 semana",
        other: "aproximadamente {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "aproximadamente 1 mês",
        other: "aproximadamente {{count}} meses"
      },
      xMonths: {
        one: "1 mês",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "aproximadamente 1 ano",
        other: "aproximadamente {{count}} anos"
      },
      xYears: {
        one: "1 ano",
        other: "{{count}} anos"
      },
      overXYears: {
        one: "mais de 1 ano",
        other: "mais de {{count}} anos"
      },
      almostXYears: {
        one: "quase 1 ano",
        other: "quase {{count}} anos"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "daqui a " + result;
        } else {
          return "há " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/pt/_lib/formatLong.js
var require_formatLong71 = __commonJS({
  "node_modules/date-fns/locale/pt/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: "d 'de' MMM 'de' y",
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'às' {{time}}",
      long: "{{date}} 'às' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/pt/_lib/formatRelative.js
var require_formatRelative64 = __commonJS({
  "node_modules/date-fns/locale/pt/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        const weekday = date.getDay();
        const last = weekday === 0 || weekday === 6 ? "último" : "última";
        return "'" + last + "' eeee 'às' p";
      },
      yesterday: "'ontem às' p",
      today: "'hoje às' p",
      tomorrow: "'amanhã às' p",
      nextWeek: "eeee 'às' p",
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/pt/_lib/localize.js
var require_localize63 = __commonJS({
  "node_modules/date-fns/locale/pt/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["aC", "dC"],
      abbreviated: ["a.C.", "d.C."],
      wide: ["antes de Cristo", "depois de Cristo"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1º trimestre", "2º trimestre", "3º trimestre", "4º trimestre"]
    };
    var monthValues = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "jan",
        "fev",
        "mar",
        "abr",
        "mai",
        "jun",
        "jul",
        "ago",
        "set",
        "out",
        "nov",
        "dez"
      ],
      wide: [
        "janeiro",
        "fevereiro",
        "março",
        "abril",
        "maio",
        "junho",
        "julho",
        "agosto",
        "setembro",
        "outubro",
        "novembro",
        "dezembro"
      ]
    };
    var dayValues = {
      narrow: ["d", "s", "t", "q", "q", "s", "s"],
      short: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
      abbreviated: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
      wide: [
        "domingo",
        "segunda-feira",
        "terça-feira",
        "quarta-feira",
        "quinta-feira",
        "sexta-feira",
        "sábado"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manhã",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manhã",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manhã",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manhã",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manhã",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manhã",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "º";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/pt/_lib/match.js
var require_match62 = __commonJS({
  "node_modules/date-fns/locale/pt/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(º|ª)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
      wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [
        /^(antes de cristo|antes da era comum)/i,
        /^(depois de cristo|era comum)/i
      ]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º|ª)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
      wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ab/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dstq]/i,
      short: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
      abbreviated: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
      wide: /^(domingo|segunda-?\s?feira|terça-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[áa]bado)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
      any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[áa]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i,
      any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^meia/i,
        noon: /^meio/i,
        morning: /manh[ãa]/i,
        afternoon: /tarde/i,
        evening: /noite/i,
        night: /madrugada/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/pt.js
var require_pt = __commonJS({
  "node_modules/date-fns/locale/pt.js"(exports) {
    "use strict";
    exports.pt = void 0;
    var _index = require_formatDistance64();
    var _index2 = require_formatLong71();
    var _index3 = require_formatRelative64();
    var _index4 = require_localize63();
    var _index5 = require_match62();
    var pt = exports.pt = {
      code: "pt",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/pt-BR/_lib/formatDistance.js
var require_formatDistance65 = __commonJS({
  "node_modules/date-fns/locale/pt-BR/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "menos de um segundo",
        other: "menos de {{count}} segundos"
      },
      xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
      },
      halfAMinute: "meio minuto",
      lessThanXMinutes: {
        one: "menos de um minuto",
        other: "menos de {{count}} minutos"
      },
      xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
      },
      aboutXHours: {
        one: "cerca de 1 hora",
        other: "cerca de {{count}} horas"
      },
      xHours: {
        one: "1 hora",
        other: "{{count}} horas"
      },
      xDays: {
        one: "1 dia",
        other: "{{count}} dias"
      },
      aboutXWeeks: {
        one: "cerca de 1 semana",
        other: "cerca de {{count}} semanas"
      },
      xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
      },
      aboutXMonths: {
        one: "cerca de 1 mês",
        other: "cerca de {{count}} meses"
      },
      xMonths: {
        one: "1 mês",
        other: "{{count}} meses"
      },
      aboutXYears: {
        one: "cerca de 1 ano",
        other: "cerca de {{count}} anos"
      },
      xYears: {
        one: "1 ano",
        other: "{{count}} anos"
      },
      overXYears: {
        one: "mais de 1 ano",
        other: "mais de {{count}} anos"
      },
      almostXYears: {
        one: "quase 1 ano",
        other: "quase {{count}} anos"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "em " + result;
        } else {
          return "há " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/pt-BR/_lib/formatLong.js
var require_formatLong72 = __commonJS({
  "node_modules/date-fns/locale/pt-BR/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d 'de' MMMM 'de' y",
      long: "d 'de' MMMM 'de' y",
      medium: "d MMM y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'às' {{time}}",
      long: "{{date}} 'às' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/pt-BR/_lib/formatRelative.js
var require_formatRelative65 = __commonJS({
  "node_modules/date-fns/locale/pt-BR/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        const weekday = date.getDay();
        const last = weekday === 0 || weekday === 6 ? "último" : "última";
        return "'" + last + "' eeee 'às' p";
      },
      yesterday: "'ontem às' p",
      today: "'hoje às' p",
      tomorrow: "'amanhã às' p",
      nextWeek: "eeee 'às' p",
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/pt-BR/_lib/localize.js
var require_localize64 = __commonJS({
  "node_modules/date-fns/locale/pt-BR/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["AC", "DC"],
      abbreviated: ["AC", "DC"],
      wide: ["antes de cristo", "depois de cristo"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: ["1º trimestre", "2º trimestre", "3º trimestre", "4º trimestre"]
    };
    var monthValues = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "jan",
        "fev",
        "mar",
        "abr",
        "mai",
        "jun",
        "jul",
        "ago",
        "set",
        "out",
        "nov",
        "dez"
      ],
      wide: [
        "janeiro",
        "fevereiro",
        "março",
        "abril",
        "maio",
        "junho",
        "julho",
        "agosto",
        "setembro",
        "outubro",
        "novembro",
        "dezembro"
      ]
    };
    var dayValues = {
      narrow: ["D", "S", "T", "Q", "Q", "S", "S"],
      short: ["dom", "seg", "ter", "qua", "qui", "sex", "sab"],
      abbreviated: [
        "domingo",
        "segunda",
        "terça",
        "quarta",
        "quinta",
        "sexta",
        "sábado"
      ],
      wide: [
        "domingo",
        "segunda-feira",
        "terça-feira",
        "quarta-feira",
        "quinta-feira",
        "sexta-feira",
        "sábado"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "manhã",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manhã",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manhã",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "da manhã",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manhã",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manhã",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      if ((options == null ? void 0 : options.unit) === "week") {
        return number + "ª";
      }
      return number + "º";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/pt-BR/_lib/match.js
var require_match63 = __commonJS({
  "node_modules/date-fns/locale/pt-BR/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)[ºªo]?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ac|dc|a|d)/i,
      abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
      wide: /^(antes de cristo|depois de cristo)/i
    };
    var parseEraPatterns = {
      any: [/^ac/i, /^dc/i],
      wide: [/^antes de cristo/i, /^depois de cristo/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmajsond]/i,
      abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
      wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^fev/i,
        /^mar/i,
        /^abr/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^ago/i,
        /^set/i,
        /^out/i,
        /^nov/i,
        /^dez/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(dom|[23456]ª?|s[aá]b)/i,
      short: /^(dom|[23456]ª?|s[aá]b)/i,
      abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aá]b)/i,
      wide: /^(domingo|(segunda|ter[cç]a|quarta|quinta|sexta)([- ]feira)?|s[aá]bado)/i
    };
    var parseDayPatterns = {
      short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
      narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
      any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[aá]b/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|md|(da) (manhã|tarde|noite))/i,
      any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhã|tarde|noite))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn|^meia[-\s]noite/i,
        noon: /^md|^meio[-\s]dia/i,
        morning: /manhã/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noite/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/pt-BR.js
var require_pt_BR = __commonJS({
  "node_modules/date-fns/locale/pt-BR.js"(exports) {
    "use strict";
    exports.ptBR = void 0;
    var _index = require_formatDistance65();
    var _index2 = require_formatLong72();
    var _index3 = require_formatRelative65();
    var _index4 = require_localize64();
    var _index5 = require_match63();
    var ptBR = exports.ptBR = {
      code: "pt-BR",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ro/_lib/formatDistance.js
var require_formatDistance66 = __commonJS({
  "node_modules/date-fns/locale/ro/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "mai puțin de o secundă",
        other: "mai puțin de {{count}} secunde"
      },
      xSeconds: {
        one: "1 secundă",
        other: "{{count}} secunde"
      },
      halfAMinute: "jumătate de minut",
      lessThanXMinutes: {
        one: "mai puțin de un minut",
        other: "mai puțin de {{count}} minute"
      },
      xMinutes: {
        one: "1 minut",
        other: "{{count}} minute"
      },
      aboutXHours: {
        one: "circa 1 oră",
        other: "circa {{count}} ore"
      },
      xHours: {
        one: "1 oră",
        other: "{{count}} ore"
      },
      xDays: {
        one: "1 zi",
        other: "{{count}} zile"
      },
      aboutXWeeks: {
        one: "circa o săptămână",
        other: "circa {{count}} săptămâni"
      },
      xWeeks: {
        one: "1 săptămână",
        other: "{{count}} săptămâni"
      },
      aboutXMonths: {
        one: "circa 1 lună",
        other: "circa {{count}} luni"
      },
      xMonths: {
        one: "1 lună",
        other: "{{count}} luni"
      },
      aboutXYears: {
        one: "circa 1 an",
        other: "circa {{count}} ani"
      },
      xYears: {
        one: "1 an",
        other: "{{count}} ani"
      },
      overXYears: {
        one: "peste 1 an",
        other: "peste {{count}} ani"
      },
      almostXYears: {
        one: "aproape 1 an",
        other: "aproape {{count}} ani"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "în " + result;
        } else {
          return result + " în urmă";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ro/_lib/formatLong.js
var require_formatLong73 = __commonJS({
  "node_modules/date-fns/locale/ro/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM yyyy",
      long: "d MMMM yyyy",
      medium: "d MMM yyyy",
      short: "dd.MM.yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'la' {{time}}",
      long: "{{date}} 'la' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ro/_lib/formatRelative.js
var require_formatRelative66 = __commonJS({
  "node_modules/date-fns/locale/ro/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'trecută la' p",
      yesterday: "'ieri la' p",
      today: "'astăzi la' p",
      tomorrow: "'mâine la' p",
      nextWeek: "eeee 'viitoare la' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ro/_lib/localize.js
var require_localize65 = __commonJS({
  "node_modules/date-fns/locale/ro/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["Î", "D"],
      abbreviated: ["Î.d.C.", "D.C."],
      wide: ["Înainte de Cristos", "După Cristos"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["T1", "T2", "T3", "T4"],
      wide: [
        "primul trimestru",
        "al doilea trimestru",
        "al treilea trimestru",
        "al patrulea trimestru"
      ]
    };
    var monthValues = {
      narrow: ["I", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"],
      abbreviated: [
        "ian",
        "feb",
        "mar",
        "apr",
        "mai",
        "iun",
        "iul",
        "aug",
        "sep",
        "oct",
        "noi",
        "dec"
      ],
      wide: [
        "ianuarie",
        "februarie",
        "martie",
        "aprilie",
        "mai",
        "iunie",
        "iulie",
        "august",
        "septembrie",
        "octombrie",
        "noiembrie",
        "decembrie"
      ]
    };
    var dayValues = {
      narrow: ["d", "l", "m", "m", "j", "v", "s"],
      short: ["du", "lu", "ma", "mi", "jo", "vi", "sâ"],
      abbreviated: ["dum", "lun", "mar", "mie", "joi", "vin", "sâm"],
      wide: ["duminică", "luni", "marți", "miercuri", "joi", "vineri", "sâmbătă"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "ami",
        morning: "dim",
        afternoon: "da",
        evening: "s",
        night: "n"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "miezul nopții",
        noon: "amiază",
        morning: "dimineață",
        afternoon: "după-amiază",
        evening: "seară",
        night: "noapte"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "miezul nopții",
        noon: "amiază",
        morning: "dimineață",
        afternoon: "după-amiază",
        evening: "seară",
        night: "noapte"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "amiază",
        morning: "dimineață",
        afternoon: "după-amiază",
        evening: "seară",
        night: "noapte"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "miezul nopții",
        noon: "amiază",
        morning: "dimineață",
        afternoon: "după-amiază",
        evening: "seară",
        night: "noapte"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "miezul nopții",
        noon: "amiază",
        morning: "dimineață",
        afternoon: "după-amiază",
        evening: "seară",
        night: "noapte"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ro/_lib/match.js
var require_match64 = __commonJS({
  "node_modules/date-fns/locale/ro/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(Î|D)/i,
      abbreviated: /^(Î\.?\s?d\.?\s?C\.?|Î\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
      wide: /^(Înainte de Cristos|Înaintea erei noastre|După Cristos|Era noastră)/i
    };
    var parseEraPatterns = {
      any: [/^ÎC/i, /^DC/i],
      wide: [
        /^(Înainte de Cristos|Înaintea erei noastre)/i,
        /^(După Cristos|Era noastră)/i
      ]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^T[1234]/i,
      wide: /^trimestrul [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[ifmaasond]/i,
      abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
      wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^i/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^i/i,
        /^i/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ia/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^iun/i,
        /^iul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dlmjvs]/i,
      short: /^(d|l|ma|mi|j|v|s)/i,
      abbreviated: /^(dum|lun|mar|mie|jo|vi|sâ)/i,
      wide: /^(duminica|luni|marţi|miercuri|joi|vineri|sâmbătă)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
      any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mn|a|(dimineaţa|după-amiaza|seara|noaptea))/i,
      any: /^([ap]\.?\s?m\.?|miezul nopții|amiaza|(dimineaţa|după-amiaza|seara|noaptea))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /amiaza/i,
        morning: /dimineaţa/i,
        afternoon: /după-amiaza/i,
        evening: /seara/i,
        night: /noaptea/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ro.js
var require_ro = __commonJS({
  "node_modules/date-fns/locale/ro.js"(exports) {
    "use strict";
    exports.ro = void 0;
    var _index = require_formatDistance66();
    var _index2 = require_formatLong73();
    var _index3 = require_formatRelative66();
    var _index4 = require_localize65();
    var _index5 = require_match64();
    var ro = exports.ro = {
      code: "ro",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ru/_lib/formatDistance.js
var require_formatDistance67 = __commonJS({
  "node_modules/date-fns/locale/ru/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function declension(scheme, count) {
      if (scheme.one !== void 0 && count === 1) {
        return scheme.one;
      }
      const rem10 = count % 10;
      const rem100 = count % 100;
      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace("{{count}}", String(count));
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace("{{count}}", String(count));
      } else {
        return scheme.pluralGenitive.replace("{{count}}", String(count));
      }
    }
    function buildLocalizeTokenFn(scheme) {
      return (count, options) => {
        if (options == null ? void 0 : options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return "через " + declension(scheme.regular, count);
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + " назад";
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }
    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: "меньше секунды",
          singularNominative: "меньше {{count}} секунды",
          singularGenitive: "меньше {{count}} секунд",
          pluralGenitive: "меньше {{count}} секунд"
        },
        future: {
          one: "меньше, чем через секунду",
          singularNominative: "меньше, чем через {{count}} секунду",
          singularGenitive: "меньше, чем через {{count}} секунды",
          pluralGenitive: "меньше, чем через {{count}} секунд"
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} секунда",
          singularGenitive: "{{count}} секунды",
          pluralGenitive: "{{count}} секунд"
        },
        past: {
          singularNominative: "{{count}} секунду назад",
          singularGenitive: "{{count}} секунды назад",
          pluralGenitive: "{{count}} секунд назад"
        },
        future: {
          singularNominative: "через {{count}} секунду",
          singularGenitive: "через {{count}} секунды",
          pluralGenitive: "через {{count}} секунд"
        }
      }),
      halfAMinute: (_count, options) => {
        if (options == null ? void 0 : options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            return "через полминуты";
          } else {
            return "полминуты назад";
          }
        }
        return "полминуты";
      },
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: "меньше минуты",
          singularNominative: "меньше {{count}} минуты",
          singularGenitive: "меньше {{count}} минут",
          pluralGenitive: "меньше {{count}} минут"
        },
        future: {
          one: "меньше, чем через минуту",
          singularNominative: "меньше, чем через {{count}} минуту",
          singularGenitive: "меньше, чем через {{count}} минуты",
          pluralGenitive: "меньше, чем через {{count}} минут"
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} минута",
          singularGenitive: "{{count}} минуты",
          pluralGenitive: "{{count}} минут"
        },
        past: {
          singularNominative: "{{count}} минуту назад",
          singularGenitive: "{{count}} минуты назад",
          pluralGenitive: "{{count}} минут назад"
        },
        future: {
          singularNominative: "через {{count}} минуту",
          singularGenitive: "через {{count}} минуты",
          pluralGenitive: "через {{count}} минут"
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "около {{count}} часа",
          singularGenitive: "около {{count}} часов",
          pluralGenitive: "около {{count}} часов"
        },
        future: {
          singularNominative: "приблизительно через {{count}} час",
          singularGenitive: "приблизительно через {{count}} часа",
          pluralGenitive: "приблизительно через {{count}} часов"
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} час",
          singularGenitive: "{{count}} часа",
          pluralGenitive: "{{count}} часов"
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} день",
          singularGenitive: "{{count}} дня",
          pluralGenitive: "{{count}} дней"
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "около {{count}} недели",
          singularGenitive: "около {{count}} недель",
          pluralGenitive: "около {{count}} недель"
        },
        future: {
          singularNominative: "приблизительно через {{count}} неделю",
          singularGenitive: "приблизительно через {{count}} недели",
          pluralGenitive: "приблизительно через {{count}} недель"
        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} неделя",
          singularGenitive: "{{count}} недели",
          pluralGenitive: "{{count}} недель"
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "около {{count}} месяца",
          singularGenitive: "около {{count}} месяцев",
          pluralGenitive: "около {{count}} месяцев"
        },
        future: {
          singularNominative: "приблизительно через {{count}} месяц",
          singularGenitive: "приблизительно через {{count}} месяца",
          pluralGenitive: "приблизительно через {{count}} месяцев"
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} месяц",
          singularGenitive: "{{count}} месяца",
          pluralGenitive: "{{count}} месяцев"
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "около {{count}} года",
          singularGenitive: "около {{count}} лет",
          pluralGenitive: "около {{count}} лет"
        },
        future: {
          singularNominative: "приблизительно через {{count}} год",
          singularGenitive: "приблизительно через {{count}} года",
          pluralGenitive: "приблизительно через {{count}} лет"
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} год",
          singularGenitive: "{{count}} года",
          pluralGenitive: "{{count}} лет"
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "больше {{count}} года",
          singularGenitive: "больше {{count}} лет",
          pluralGenitive: "больше {{count}} лет"
        },
        future: {
          singularNominative: "больше, чем через {{count}} год",
          singularGenitive: "больше, чем через {{count}} года",
          pluralGenitive: "больше, чем через {{count}} лет"
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "почти {{count}} год",
          singularGenitive: "почти {{count}} года",
          pluralGenitive: "почти {{count}} лет"
        },
        future: {
          singularNominative: "почти через {{count}} год",
          singularGenitive: "почти через {{count}} года",
          pluralGenitive: "почти через {{count}} лет"
        }
      })
    };
    var formatDistance = (token, count, options) => {
      return formatDistanceLocale[token](count, options);
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ru/_lib/formatLong.js
var require_formatLong74 = __commonJS({
  "node_modules/date-fns/locale/ru/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM y 'г.'",
      long: "d MMMM y 'г.'",
      medium: "d MMM y 'г.'",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      any: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ru/_lib/formatRelative.js
var require_formatRelative67 = __commonJS({
  "node_modules/date-fns/locale/ru/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var accusativeWeekdays = [
      "воскресенье",
      "понедельник",
      "вторник",
      "среду",
      "четверг",
      "пятницу",
      "субботу"
    ];
    function lastWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
          return "'в прошлое " + weekday + " в' p";
        case 1:
        case 2:
        case 4:
          return "'в прошлый " + weekday + " в' p";
        case 3:
        case 5:
        case 6:
          return "'в прошлую " + weekday + " в' p";
      }
    }
    function thisWeek(day) {
      const weekday = accusativeWeekdays[day];
      if (day === 2) {
        return "'во " + weekday + " в' p";
      } else {
        return "'в " + weekday + " в' p";
      }
    }
    function nextWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
          return "'в следующее " + weekday + " в' p";
        case 1:
        case 2:
        case 4:
          return "'в следующий " + weekday + " в' p";
        case 3:
        case 5:
        case 6:
          return "'в следующую " + weekday + " в' p";
      }
    }
    var formatRelativeLocale = {
      lastWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'вчера в' p",
      today: "'сегодня в' p",
      tomorrow: "'завтра в' p",
      nextWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ru/_lib/localize.js
var require_localize66 = __commonJS({
  "node_modules/date-fns/locale/ru/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["до н.э.", "н.э."],
      abbreviated: ["до н. э.", "н. э."],
      wide: ["до нашей эры", "нашей эры"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-й кв.", "2-й кв.", "3-й кв.", "4-й кв."],
      wide: ["1-й квартал", "2-й квартал", "3-й квартал", "4-й квартал"]
    };
    var monthValues = {
      narrow: ["Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д"],
      abbreviated: [
        "янв.",
        "фев.",
        "март",
        "апр.",
        "май",
        "июнь",
        "июль",
        "авг.",
        "сент.",
        "окт.",
        "нояб.",
        "дек."
      ],
      wide: [
        "январь",
        "февраль",
        "март",
        "апрель",
        "май",
        "июнь",
        "июль",
        "август",
        "сентябрь",
        "октябрь",
        "ноябрь",
        "декабрь"
      ]
    };
    var formattingMonthValues = {
      narrow: ["Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д"],
      abbreviated: [
        "янв.",
        "фев.",
        "мар.",
        "апр.",
        "мая",
        "июн.",
        "июл.",
        "авг.",
        "сент.",
        "окт.",
        "нояб.",
        "дек."
      ],
      wide: [
        "января",
        "февраля",
        "марта",
        "апреля",
        "мая",
        "июня",
        "июля",
        "августа",
        "сентября",
        "октября",
        "ноября",
        "декабря"
      ]
    };
    var dayValues = {
      narrow: ["В", "П", "В", "С", "Ч", "П", "С"],
      short: ["вс", "пн", "вт", "ср", "чт", "пт", "сб"],
      abbreviated: ["вск", "пнд", "втр", "срд", "чтв", "птн", "суб"],
      wide: [
        "воскресенье",
        "понедельник",
        "вторник",
        "среда",
        "четверг",
        "пятница",
        "суббота"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "полн.",
        noon: "полд.",
        morning: "утро",
        afternoon: "день",
        evening: "веч.",
        night: "ночь"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "полн.",
        noon: "полд.",
        morning: "утро",
        afternoon: "день",
        evening: "веч.",
        night: "ночь"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "полночь",
        noon: "полдень",
        morning: "утро",
        afternoon: "день",
        evening: "вечер",
        night: "ночь"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "полн.",
        noon: "полд.",
        morning: "утра",
        afternoon: "дня",
        evening: "веч.",
        night: "ночи"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "полн.",
        noon: "полд.",
        morning: "утра",
        afternoon: "дня",
        evening: "веч.",
        night: "ночи"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "полночь",
        noon: "полдень",
        morning: "утра",
        afternoon: "дня",
        evening: "вечера",
        night: "ночи"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = options == null ? void 0 : options.unit;
      let suffix;
      if (unit === "date") {
        suffix = "-е";
      } else if (unit === "week" || unit === "minute" || unit === "second") {
        suffix = "-я";
      } else {
        suffix = "-й";
      }
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ru/_lib/match.js
var require_match65 = __commonJS({
  "node_modules/date-fns/locale/ru/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((до )?н\.?\s?э\.?)/i,
      abbreviated: /^((до )?н\.?\s?э\.?)/i,
      wide: /^(до нашей эры|нашей эры|наша эра)/i
    };
    var parseEraPatterns = {
      any: [/^д/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,
      wide: /^[1234](-?[ыои]?й?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[яфмаисонд]/i,
      abbreviated: /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\.?/i,
      wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^я/i,
        /^ф/i,
        /^м/i,
        /^а/i,
        /^м/i,
        /^и/i,
        /^и/i,
        /^а/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^я/i
      ],
      any: [
        /^я/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^ма[йя]/i,
        /^июн/i,
        /^июл/i,
        /^ав/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[впсч]/i,
      short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\.?/i,
      abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,
      wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i
    };
    var parseDayPatterns = {
      narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
      abbreviated: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
      wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^полн/i,
        noon: /^полд/i,
        morning: /^у/i,
        afternoon: /^д[ен]/i,
        evening: /^в/i,
        night: /^н/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ru.js
var require_ru = __commonJS({
  "node_modules/date-fns/locale/ru.js"(exports) {
    "use strict";
    exports.ru = void 0;
    var _index = require_formatDistance67();
    var _index2 = require_formatLong74();
    var _index3 = require_formatRelative67();
    var _index4 = require_localize66();
    var _index5 = require_match65();
    var ru = exports.ru = {
      code: "ru",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/se/_lib/formatDistance.js
var require_formatDistance68 = __commonJS({
  "node_modules/date-fns/locale/se/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "unnit go ovtta sekundda",
        other: "unnit go {{count}} sekundda"
      },
      xSeconds: {
        one: "sekundda",
        other: "{{count}} sekundda"
      },
      halfAMinute: "bealle minuhta",
      lessThanXMinutes: {
        one: "unnit go bealle minuhta",
        other: "unnit go {{count}} minuhta"
      },
      xMinutes: {
        one: "minuhta",
        other: "{{count}} minuhta"
      },
      aboutXHours: {
        one: "sullii ovtta diimmu",
        other: "sullii {{count}} diimmu"
      },
      xHours: {
        one: "diimmu",
        other: "{{count}} diimmu"
      },
      xDays: {
        one: "beaivvi",
        other: "{{count}} beaivvi"
      },
      aboutXWeeks: {
        one: "sullii ovtta vahku",
        other: "sullii {{count}} vahku"
      },
      xWeeks: {
        one: "vahku",
        other: "{{count}} vahku"
      },
      aboutXMonths: {
        one: "sullii ovtta mánu",
        other: "sullii {{count}} mánu"
      },
      xMonths: {
        one: "mánu",
        other: "{{count}} mánu"
      },
      aboutXYears: {
        one: "sullii ovtta jagi",
        other: "sullii {{count}} jagi"
      },
      xYears: {
        one: "jagi",
        other: "{{count}} jagi"
      },
      overXYears: {
        one: "guhkit go jagi",
        other: "guhkit go {{count}} jagi"
      },
      almostXYears: {
        one: "measta jagi",
        other: "measta {{count}} jagi"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "geahčen " + result;
        } else {
          return result + " áigi";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/se/_lib/formatLong.js
var require_formatLong75 = __commonJS({
  "node_modules/date-fns/locale/se/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE MMMM d. 'b.' y",
      long: "MMMM d. 'b.' y",
      medium: "MMM d. 'b.' y",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "'dii.' HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'dii.' {{time}}",
      long: "{{date}} 'dii.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/se/_lib/formatRelative.js
var require_formatRelative68 = __commonJS({
  "node_modules/date-fns/locale/se/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'ovddit' eeee 'dii.' p",
      yesterday: "'ikte dii.' p",
      today: "'odne dii.' p",
      tomorrow: "'ihtin dii.' p",
      nextWeek: "EEEE 'dii.' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/se/_lib/localize.js
var require_localize67 = __commonJS({
  "node_modules/date-fns/locale/se/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["o.Kr.", "m.Kr."],
      abbreviated: ["o.Kr.", "m.Kr."],
      wide: ["ovdal Kristusa", "maŋŋel Kristusa"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. kvartála", "2. kvartála", "3. kvartála", "4. kvartála"]
    };
    var monthValues = {
      narrow: ["O", "G", "N", "C", "M", "G", "S", "B", "Č", "G", "S", "J"],
      abbreviated: [
        "ođđa",
        "guov",
        "njuk",
        "cuo",
        "mies",
        "geas",
        "suoi",
        "borg",
        "čakč",
        "golg",
        "skáb",
        "juov"
      ],
      wide: [
        "ođđajagemánnu",
        "guovvamánnu",
        "njukčamánnu",
        "cuoŋománnu",
        "miessemánnu",
        "geassemánnu",
        "suoidnemánnu",
        "borgemánnu",
        "čakčamánnu",
        "golggotmánnu",
        "skábmamánnu",
        "juovlamánnu"
      ]
    };
    var dayValues = {
      narrow: ["S", "V", "M", "G", "D", "B", "L"],
      short: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
      abbreviated: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
      wide: [
        "sotnabeaivi",
        "vuossárga",
        "maŋŋebárga",
        "gaskavahkku",
        "duorastat",
        "bearjadat",
        "lávvardat"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "gaskaidja",
        noon: "gaskabeaivi",
        morning: "iđđes",
        afternoon: "maŋŋel gaska.",
        evening: "eahkes",
        night: "ihkku"
      },
      abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gaskaidja",
        noon: "gaskabeaivvi",
        morning: "iđđes",
        afternoon: "maŋŋel gaskabea.",
        evening: "eahkes",
        night: "ihkku"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gaskaidja",
        noon: "gaskabeavvi",
        morning: "iđđes",
        afternoon: "maŋŋel gaskabeaivvi",
        evening: "eahkes",
        night: "ihkku"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/se/_lib/match.js
var require_match66 = __commonJS({
  "node_modules/date-fns/locale/se/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(o\.? ?Kr\.?|m\.? ?Kr\.?)/i,
      abbreviated: /^(o\.? ?Kr\.?|m\.? ?Kr\.?)/i,
      wide: /^(ovdal Kristusa|ovdal min áiggi|maŋŋel Kristusa|min áigi)/i
    };
    var parseEraPatterns = {
      any: [/^o/i, /^m/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](\.)? kvartála/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[ogncmsbčj]/i,
      abbreviated: /^(ođđa|guov|njuk|cuo|mies|geas|suoi|borg|čakč|golg|skáb|juov)\.?/i,
      wide: /^(ođđajagemánnu|guovvamánnu|njukčamánnu|cuoŋománnu|miessemánnu|geassemánnu|suoidnemánnu|borgemánnu|čakčamánnu|golggotmánnu|skábmamánnu|juovlamánnu)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^o/i,
        /^g/i,
        /^n/i,
        /^c/i,
        /^m/i,
        /^g/i,
        /^s/i,
        /^b/i,
        /^č/i,
        /^g/i,
        /^s/i,
        /^j/i
      ],
      any: [
        /^o/i,
        /^gu/i,
        /^n/i,
        /^c/i,
        /^m/i,
        /^ge/i,
        /^su/i,
        /^b/i,
        /^č/i,
        /^go/i,
        /^sk/i,
        /^j/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[svmgdbl]/i,
      short: /^(sotn|vuos|maŋ|gask|duor|bear|láv)/i,
      abbreviated: /^(sotn|vuos|maŋ|gask|duor|bear|láv)/i,
      wide: /^(sotnabeaivi|vuossárga|maŋŋebárga|gaskavahkku|duorastat|bearjadat|lávvardat)/i
    };
    var parseDayPatterns = {
      any: [/^s/i, /^v/i, /^m/i, /^g/i, /^d/i, /^b/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(gaskaidja|gaskabeaivvi|(på) (iđđes|maŋŋel gaskabeaivvi|eahkes|ihkku)|[ap])/i,
      any: /^([ap]\.?\s?m\.?|gaskaidja|gaskabeaivvi|(på) (iđđes|maŋŋel gaskabeaivvi|eahkes|ihkku))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^gaskai/i,
        noon: /^gaskab/i,
        morning: /iđđes/i,
        afternoon: /maŋŋel gaskabeaivvi/i,
        evening: /eahkes/i,
        night: /ihkku/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/se.js
var require_se = __commonJS({
  "node_modules/date-fns/locale/se.js"(exports) {
    "use strict";
    exports.se = void 0;
    var _index = require_formatDistance68();
    var _index2 = require_formatLong75();
    var _index3 = require_formatRelative68();
    var _index4 = require_localize67();
    var _index5 = require_match66();
    var se = exports.se = {
      code: "se",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/sk/_lib/formatDistance.js
var require_formatDistance69 = __commonJS({
  "node_modules/date-fns/locale/sk/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function declensionGroup(scheme, count) {
      if (count === 1 && scheme.one) {
        return scheme.one;
      }
      if (count >= 2 && count <= 4 && scheme.twoFour) {
        return scheme.twoFour;
      }
      return scheme.other;
    }
    function declension(scheme, count, time) {
      const group = declensionGroup(scheme, count);
      const finalText = group[time];
      return finalText.replace("{{count}}", String(count));
    }
    function extractPreposition(token) {
      const result = ["lessThan", "about", "over", "almost"].filter(
        function(preposition) {
          return !!token.match(new RegExp("^" + preposition));
        }
      );
      return result[0];
    }
    function prefixPreposition(preposition) {
      let translation = "";
      if (preposition === "almost") {
        translation = "takmer";
      }
      if (preposition === "about") {
        translation = "približne";
      }
      return translation.length > 0 ? translation + " " : "";
    }
    function suffixPreposition(preposition) {
      let translation = "";
      if (preposition === "lessThan") {
        translation = "menej než";
      }
      if (preposition === "over") {
        translation = "viac než";
      }
      return translation.length > 0 ? translation + " " : "";
    }
    function lowercaseFirstLetter(string) {
      return string.charAt(0).toLowerCase() + string.slice(1);
    }
    var formatDistanceLocale = {
      xSeconds: {
        one: {
          present: "sekunda",
          past: "sekundou",
          future: "sekundu"
        },
        twoFour: {
          present: "{{count}} sekundy",
          past: "{{count}} sekundami",
          future: "{{count}} sekundy"
        },
        other: {
          present: "{{count}} sekúnd",
          past: "{{count}} sekundami",
          future: "{{count}} sekúnd"
        }
      },
      halfAMinute: {
        other: {
          present: "pol minúty",
          past: "pol minútou",
          future: "pol minúty"
        }
      },
      xMinutes: {
        one: {
          present: "minúta",
          past: "minútou",
          future: "minútu"
        },
        twoFour: {
          present: "{{count}} minúty",
          past: "{{count}} minútami",
          future: "{{count}} minúty"
        },
        other: {
          present: "{{count}} minút",
          past: "{{count}} minútami",
          future: "{{count}} minút"
        }
      },
      xHours: {
        one: {
          present: "hodina",
          past: "hodinou",
          future: "hodinu"
        },
        twoFour: {
          present: "{{count}} hodiny",
          past: "{{count}} hodinami",
          future: "{{count}} hodiny"
        },
        other: {
          present: "{{count}} hodín",
          past: "{{count}} hodinami",
          future: "{{count}} hodín"
        }
      },
      xDays: {
        one: {
          present: "deň",
          past: "dňom",
          future: "deň"
        },
        twoFour: {
          present: "{{count}} dni",
          past: "{{count}} dňami",
          future: "{{count}} dni"
        },
        other: {
          present: "{{count}} dní",
          past: "{{count}} dňami",
          future: "{{count}} dní"
        }
      },
      xWeeks: {
        one: {
          present: "týždeň",
          past: "týždňom",
          future: "týždeň"
        },
        twoFour: {
          present: "{{count}} týždne",
          past: "{{count}} týždňami",
          future: "{{count}} týždne"
        },
        other: {
          present: "{{count}} týždňov",
          past: "{{count}} týždňami",
          future: "{{count}} týždňov"
        }
      },
      xMonths: {
        one: {
          present: "mesiac",
          past: "mesiacom",
          future: "mesiac"
        },
        twoFour: {
          present: "{{count}} mesiace",
          past: "{{count}} mesiacmi",
          future: "{{count}} mesiace"
        },
        other: {
          present: "{{count}} mesiacov",
          past: "{{count}} mesiacmi",
          future: "{{count}} mesiacov"
        }
      },
      xYears: {
        one: {
          present: "rok",
          past: "rokom",
          future: "rok"
        },
        twoFour: {
          present: "{{count}} roky",
          past: "{{count}} rokmi",
          future: "{{count}} roky"
        },
        other: {
          present: "{{count}} rokov",
          past: "{{count}} rokmi",
          future: "{{count}} rokov"
        }
      }
    };
    var formatDistance = (token, count, options) => {
      const preposition = extractPreposition(token) || "";
      const key = lowercaseFirstLetter(token.substring(preposition.length));
      const scheme = formatDistanceLocale[key];
      if (!(options == null ? void 0 : options.addSuffix)) {
        return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, "present");
      }
      if (options.comparison && options.comparison > 0) {
        return prefixPreposition(preposition) + "o " + suffixPreposition(preposition) + declension(scheme, count, "future");
      } else {
        return prefixPreposition(preposition) + "pred " + suffixPreposition(preposition) + declension(scheme, count, "past");
      }
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/sk/_lib/formatLong.js
var require_formatLong76 = __commonJS({
  "node_modules/date-fns/locale/sk/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d. MMMM y",
      long: "d. MMMM y",
      medium: "d. M. y",
      short: "d. M. y"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}}, {{time}}",
      long: "{{date}}, {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/sk/_lib/formatRelative.js
var require_formatRelative69 = __commonJS({
  "node_modules/date-fns/locale/sk/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var accusativeWeekdays = [
      "nedeľu",
      "pondelok",
      "utorok",
      "stredu",
      "štvrtok",
      "piatok",
      "sobotu"
    ];
    function lastWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 6:
          return "'minulú " + weekday + " o' p";
        default:
          return "'minulý' eeee 'o' p";
      }
    }
    function thisWeek(day) {
      const weekday = accusativeWeekdays[day];
      if (day === 4) {
        return "'vo' eeee 'o' p";
      } else {
        return "'v " + weekday + " o' p";
      }
    }
    function nextWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 4:
        case 6:
          return "'budúcu " + weekday + " o' p";
        default:
          return "'budúci' eeee 'o' p";
      }
    }
    var formatRelativeLocale = {
      lastWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return lastWeek(day);
        }
      },
      yesterday: "'včera o' p",
      today: "'dnes o' p",
      tomorrow: "'zajtra o' p",
      nextWeek: (date, baseDate, options) => {
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) {
          return thisWeek(day);
        } else {
          return nextWeek(day);
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/sk/_lib/localize.js
var require_localize68 = __commonJS({
  "node_modules/date-fns/locale/sk/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["pred Kr.", "po Kr."],
      abbreviated: ["pred Kr.", "po Kr."],
      wide: ["pred Kristom", "po Kristovi"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1. štvrťrok", "2. štvrťrok", "3. štvrťrok", "4. štvrťrok"]
    };
    var monthValues = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "máj",
        "jún",
        "júl",
        "aug",
        "sep",
        "okt",
        "nov",
        "dec"
      ],
      wide: [
        "január",
        "február",
        "marec",
        "apríl",
        "máj",
        "jún",
        "júl",
        "august",
        "september",
        "október",
        "november",
        "december"
      ]
    };
    var formattingMonthValues = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "máj",
        "jún",
        "júl",
        "aug",
        "sep",
        "okt",
        "nov",
        "dec"
      ],
      wide: [
        "januára",
        "februára",
        "marca",
        "apríla",
        "mája",
        "júna",
        "júla",
        "augusta",
        "septembra",
        "októbra",
        "novembra",
        "decembra"
      ]
    };
    var dayValues = {
      narrow: ["n", "p", "u", "s", "š", "p", "s"],
      short: ["ne", "po", "ut", "st", "št", "pi", "so"],
      abbreviated: ["ne", "po", "ut", "st", "št", "pi", "so"],
      wide: [
        "nedeľa",
        "pondelok",
        "utorok",
        "streda",
        "štvrtok",
        "piatok",
        "sobota"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "poln.",
        noon: "pol.",
        morning: "ráno",
        afternoon: "pop.",
        evening: "več.",
        night: "noc"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "poln.",
        noon: "pol.",
        morning: "ráno",
        afternoon: "popol.",
        evening: "večer",
        night: "noc"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "polnoc",
        noon: "poludnie",
        morning: "ráno",
        afternoon: "popoludnie",
        evening: "večer",
        night: "noc"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "o poln.",
        noon: "nap.",
        morning: "ráno",
        afternoon: "pop.",
        evening: "več.",
        night: "v n."
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "o poln.",
        noon: "napol.",
        morning: "ráno",
        afternoon: "popol.",
        evening: "večer",
        night: "v noci"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "o polnoci",
        noon: "napoludnie",
        morning: "ráno",
        afternoon: "popoludní",
        evening: "večer",
        night: "v noci"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/sk/_lib/match.js
var require_match67 = __commonJS({
  "node_modules/date-fns/locale/sk/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\.?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
      abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
      wide: /^(pred Kristom|pred na[šs][íi]m letopo[čc]tom|po Kristovi|n[áa][šs]ho letopo[čc]tu)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|n)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]\. [šs]tvr[ťt]rok/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|m[áa]j|j[úu]n|j[úu]l|aug|sep|okt|nov|dec)/i,
      wide: /^(janu[áa]ra?|febru[áa]ra?|(marec|marca)|apr[íi]la?|m[áa]ja?|j[úu]na?|j[úu]la?|augusta?|(september|septembra)|(okt[óo]ber|okt[óo]bra)|(november|novembra)|(december|decembra))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^m[áa]j/i,
        /^j[úu]n/i,
        /^j[úu]l/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[npusšp]/i,
      short: /^(ne|po|ut|st|št|pi|so)/i,
      abbreviated: /^(ne|po|ut|st|št|pi|so)/i,
      wide: /^(nede[ľl]a|pondelok|utorok|streda|[šs]tvrtok|piatok|sobota])/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^š/i, /^p/i, /^s/i],
      any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(št|stv)/i, /^pi/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]\.?|(v n\.?|noc))/i,
      abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]er|(v )?noci?)/i,
      any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[áa]no|popoludn(ie|í|i)|ve[čc]er|(v )?noci?)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /poln/i,
        noon: /^(nap|(na)?pol(\.|u))/i,
        morning: /^r[áa]no/i,
        afternoon: /^pop/i,
        evening: /^ve[čc]/i,
        night: /^(noc|v n\.)/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/sk.js
var require_sk = __commonJS({
  "node_modules/date-fns/locale/sk.js"(exports) {
    "use strict";
    exports.sk = void 0;
    var _index = require_formatDistance69();
    var _index2 = require_formatLong76();
    var _index3 = require_formatRelative69();
    var _index4 = require_localize68();
    var _index5 = require_match67();
    var sk = exports.sk = {
      code: "sk",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/sl/_lib/formatDistance.js
var require_formatDistance70 = __commonJS({
  "node_modules/date-fns/locale/sl/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function isPluralType(val) {
      return val.one !== void 0;
    }
    var formatDistanceLocale = {
      lessThanXSeconds: {
        present: {
          one: "manj kot {{count}} sekunda",
          two: "manj kot {{count}} sekundi",
          few: "manj kot {{count}} sekunde",
          other: "manj kot {{count}} sekund"
        },
        past: {
          one: "manj kot {{count}} sekundo",
          two: "manj kot {{count}} sekundama",
          few: "manj kot {{count}} sekundami",
          other: "manj kot {{count}} sekundami"
        },
        future: {
          one: "manj kot {{count}} sekundo",
          two: "manj kot {{count}} sekundi",
          few: "manj kot {{count}} sekunde",
          other: "manj kot {{count}} sekund"
        }
      },
      xSeconds: {
        present: {
          one: "{{count}} sekunda",
          two: "{{count}} sekundi",
          few: "{{count}} sekunde",
          other: "{{count}} sekund"
        },
        past: {
          one: "{{count}} sekundo",
          two: "{{count}} sekundama",
          few: "{{count}} sekundami",
          other: "{{count}} sekundami"
        },
        future: {
          one: "{{count}} sekundo",
          two: "{{count}} sekundi",
          few: "{{count}} sekunde",
          other: "{{count}} sekund"
        }
      },
      halfAMinute: "pol minute",
      lessThanXMinutes: {
        present: {
          one: "manj kot {{count}} minuta",
          two: "manj kot {{count}} minuti",
          few: "manj kot {{count}} minute",
          other: "manj kot {{count}} minut"
        },
        past: {
          one: "manj kot {{count}} minuto",
          two: "manj kot {{count}} minutama",
          few: "manj kot {{count}} minutami",
          other: "manj kot {{count}} minutami"
        },
        future: {
          one: "manj kot {{count}} minuto",
          two: "manj kot {{count}} minuti",
          few: "manj kot {{count}} minute",
          other: "manj kot {{count}} minut"
        }
      },
      xMinutes: {
        present: {
          one: "{{count}} minuta",
          two: "{{count}} minuti",
          few: "{{count}} minute",
          other: "{{count}} minut"
        },
        past: {
          one: "{{count}} minuto",
          two: "{{count}} minutama",
          few: "{{count}} minutami",
          other: "{{count}} minutami"
        },
        future: {
          one: "{{count}} minuto",
          two: "{{count}} minuti",
          few: "{{count}} minute",
          other: "{{count}} minut"
        }
      },
      aboutXHours: {
        present: {
          one: "približno {{count}} ura",
          two: "približno {{count}} uri",
          few: "približno {{count}} ure",
          other: "približno {{count}} ur"
        },
        past: {
          one: "približno {{count}} uro",
          two: "približno {{count}} urama",
          few: "približno {{count}} urami",
          other: "približno {{count}} urami"
        },
        future: {
          one: "približno {{count}} uro",
          two: "približno {{count}} uri",
          few: "približno {{count}} ure",
          other: "približno {{count}} ur"
        }
      },
      xHours: {
        present: {
          one: "{{count}} ura",
          two: "{{count}} uri",
          few: "{{count}} ure",
          other: "{{count}} ur"
        },
        past: {
          one: "{{count}} uro",
          two: "{{count}} urama",
          few: "{{count}} urami",
          other: "{{count}} urami"
        },
        future: {
          one: "{{count}} uro",
          two: "{{count}} uri",
          few: "{{count}} ure",
          other: "{{count}} ur"
        }
      },
      xDays: {
        present: {
          one: "{{count}} dan",
          two: "{{count}} dni",
          few: "{{count}} dni",
          other: "{{count}} dni"
        },
        past: {
          one: "{{count}} dnem",
          two: "{{count}} dnevoma",
          few: "{{count}} dnevi",
          other: "{{count}} dnevi"
        },
        future: {
          one: "{{count}} dan",
          two: "{{count}} dni",
          few: "{{count}} dni",
          other: "{{count}} dni"
        }
      },
      // no tenses for weeks?
      aboutXWeeks: {
        one: "približno {{count}} teden",
        two: "približno {{count}} tedna",
        few: "približno {{count}} tedne",
        other: "približno {{count}} tednov"
      },
      // no tenses for weeks?
      xWeeks: {
        one: "{{count}} teden",
        two: "{{count}} tedna",
        few: "{{count}} tedne",
        other: "{{count}} tednov"
      },
      aboutXMonths: {
        present: {
          one: "približno {{count}} mesec",
          two: "približno {{count}} meseca",
          few: "približno {{count}} mesece",
          other: "približno {{count}} mesecev"
        },
        past: {
          one: "približno {{count}} mesecem",
          two: "približno {{count}} mesecema",
          few: "približno {{count}} meseci",
          other: "približno {{count}} meseci"
        },
        future: {
          one: "približno {{count}} mesec",
          two: "približno {{count}} meseca",
          few: "približno {{count}} mesece",
          other: "približno {{count}} mesecev"
        }
      },
      xMonths: {
        present: {
          one: "{{count}} mesec",
          two: "{{count}} meseca",
          few: "{{count}} meseci",
          other: "{{count}} mesecev"
        },
        past: {
          one: "{{count}} mesecem",
          two: "{{count}} mesecema",
          few: "{{count}} meseci",
          other: "{{count}} meseci"
        },
        future: {
          one: "{{count}} mesec",
          two: "{{count}} meseca",
          few: "{{count}} mesece",
          other: "{{count}} mesecev"
        }
      },
      aboutXYears: {
        present: {
          one: "približno {{count}} leto",
          two: "približno {{count}} leti",
          few: "približno {{count}} leta",
          other: "približno {{count}} let"
        },
        past: {
          one: "približno {{count}} letom",
          two: "približno {{count}} letoma",
          few: "približno {{count}} leti",
          other: "približno {{count}} leti"
        },
        future: {
          one: "približno {{count}} leto",
          two: "približno {{count}} leti",
          few: "približno {{count}} leta",
          other: "približno {{count}} let"
        }
      },
      xYears: {
        present: {
          one: "{{count}} leto",
          two: "{{count}} leti",
          few: "{{count}} leta",
          other: "{{count}} let"
        },
        past: {
          one: "{{count}} letom",
          two: "{{count}} letoma",
          few: "{{count}} leti",
          other: "{{count}} leti"
        },
        future: {
          one: "{{count}} leto",
          two: "{{count}} leti",
          few: "{{count}} leta",
          other: "{{count}} let"
        }
      },
      overXYears: {
        present: {
          one: "več kot {{count}} leto",
          two: "več kot {{count}} leti",
          few: "več kot {{count}} leta",
          other: "več kot {{count}} let"
        },
        past: {
          one: "več kot {{count}} letom",
          two: "več kot {{count}} letoma",
          few: "več kot {{count}} leti",
          other: "več kot {{count}} leti"
        },
        future: {
          one: "več kot {{count}} leto",
          two: "več kot {{count}} leti",
          few: "več kot {{count}} leta",
          other: "več kot {{count}} let"
        }
      },
      almostXYears: {
        present: {
          one: "skoraj {{count}} leto",
          two: "skoraj {{count}} leti",
          few: "skoraj {{count}} leta",
          other: "skoraj {{count}} let"
        },
        past: {
          one: "skoraj {{count}} letom",
          two: "skoraj {{count}} letoma",
          few: "skoraj {{count}} leti",
          other: "skoraj {{count}} leti"
        },
        future: {
          one: "skoraj {{count}} leto",
          two: "skoraj {{count}} leti",
          few: "skoraj {{count}} leta",
          other: "skoraj {{count}} let"
        }
      }
    };
    function getFormFromCount(count) {
      switch (count % 100) {
        case 1:
          return "one";
        case 2:
          return "two";
        case 3:
        case 4:
          return "few";
        default:
          return "other";
      }
    }
    var formatDistance = (token, count, options) => {
      let result = "";
      let tense = "present";
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          tense = "future";
          result = "čez ";
        } else {
          tense = "past";
          result = "pred ";
        }
      }
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result += tokenValue;
      } else {
        const form = getFormFromCount(count);
        if (isPluralType(tokenValue)) {
          result += tokenValue[form].replace("{{count}}", String(count));
        } else {
          result += tokenValue[tense][form].replace("{{count}}", String(count));
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/sl/_lib/formatLong.js
var require_formatLong77 = __commonJS({
  "node_modules/date-fns/locale/sl/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, dd. MMMM y",
      long: "dd. MMMM y",
      medium: "d. MMM y",
      short: "d. MM. yy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/sl/_lib/formatRelative.js
var require_formatRelative70 = __commonJS({
  "node_modules/date-fns/locale/sl/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        const day = date.getDay();
        switch (day) {
          case 0:
            return "'prejšnjo nedeljo ob' p";
          case 3:
            return "'prejšnjo sredo ob' p";
          case 6:
            return "'prejšnjo soboto ob' p";
          default:
            return "'prejšnji' EEEE 'ob' p";
        }
      },
      yesterday: "'včeraj ob' p",
      today: "'danes ob' p",
      tomorrow: "'jutri ob' p",
      nextWeek: (date) => {
        const day = date.getDay();
        switch (day) {
          case 0:
            return "'naslednjo nedeljo ob' p";
          case 3:
            return "'naslednjo sredo ob' p";
          case 6:
            return "'naslednjo soboto ob' p";
          default:
            return "'naslednji' EEEE 'ob' p";
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/sl/_lib/localize.js
var require_localize69 = __commonJS({
  "node_modules/date-fns/locale/sl/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["pr. n. št.", "po n. št."],
      abbreviated: ["pr. n. št.", "po n. št."],
      wide: ["pred našim štetjem", "po našem štetju"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1. čet.", "2. čet.", "3. čet.", "4. čet."],
      wide: ["1. četrtletje", "2. četrtletje", "3. četrtletje", "4. četrtletje"]
    };
    var monthValues = {
      narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
      abbreviated: [
        "jan.",
        "feb.",
        "mar.",
        "apr.",
        "maj",
        "jun.",
        "jul.",
        "avg.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "januar",
        "februar",
        "marec",
        "april",
        "maj",
        "junij",
        "julij",
        "avgust",
        "september",
        "oktober",
        "november",
        "december"
      ]
    };
    var dayValues = {
      narrow: ["n", "p", "t", "s", "č", "p", "s"],
      short: ["ned.", "pon.", "tor.", "sre.", "čet.", "pet.", "sob."],
      abbreviated: ["ned.", "pon.", "tor.", "sre.", "čet.", "pet.", "sob."],
      wide: [
        "nedelja",
        "ponedeljek",
        "torek",
        "sreda",
        "četrtek",
        "petek",
        "sobota"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "d",
        pm: "p",
        midnight: "24.00",
        noon: "12.00",
        morning: "j",
        afternoon: "p",
        evening: "v",
        night: "n"
      },
      abbreviated: {
        am: "dop.",
        pm: "pop.",
        midnight: "poln.",
        noon: "pold.",
        morning: "jut.",
        afternoon: "pop.",
        evening: "več.",
        night: "noč"
      },
      wide: {
        am: "dop.",
        pm: "pop.",
        midnight: "polnoč",
        noon: "poldne",
        morning: "jutro",
        afternoon: "popoldne",
        evening: "večer",
        night: "noč"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "d",
        pm: "p",
        midnight: "24.00",
        noon: "12.00",
        morning: "zj",
        afternoon: "p",
        evening: "zv",
        night: "po"
      },
      abbreviated: {
        am: "dop.",
        pm: "pop.",
        midnight: "opoln.",
        noon: "opold.",
        morning: "zjut.",
        afternoon: "pop.",
        evening: "zveč.",
        night: "ponoči"
      },
      wide: {
        am: "dop.",
        pm: "pop.",
        midnight: "opolnoči",
        noon: "opoldne",
        morning: "zjutraj",
        afternoon: "popoldan",
        evening: "zvečer",
        night: "ponoči"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/sl/_lib/match.js
var require_match68 = __commonJS({
  "node_modules/date-fns/locale/sl/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      abbreviated: /^(pr\. n\. št\.|po n\. št\.)/i,
      wide: /^(pred Kristusom|pred na[sš]im [sš]tetjem|po Kristusu|po na[sš]em [sš]tetju|na[sš]ega [sš]tetja)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|na[sš]em)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?[čc]et\.?/i,
      wide: /^[1234]\. [čc]etrtletje/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
      wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      abbreviated: [
        /^ja/i,
        /^fe/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^av/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      wide: [
        /^ja/i,
        /^fe/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^av/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[nptsčc]/i,
      short: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
      abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
      wide: /^(nedelja|ponedeljek|torek|sreda|[cč]etrtek|petek|sobota)/i
    };
    var parseDayPatterns = {
      narrow: [/^n/i, /^p/i, /^t/i, /^s/i, /^[cč]/i, /^p/i, /^s/i],
      any: [/^n/i, /^po/i, /^t/i, /^sr/i, /^[cč]/i, /^pe/i, /^so/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
      any: /^(dop\.|pop\.|o?poln(\.|o[cč]i?)|o?pold(\.|ne)|z?ve[cč](\.|er)|(po)?no[cč]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i
    };
    var parseDayPeriodPatterns = {
      narrow: {
        am: /^d/i,
        pm: /^p/i,
        midnight: /^24/i,
        noon: /^12/i,
        morning: /^(z?j)/i,
        afternoon: /^p/i,
        evening: /^(z?v)/i,
        night: /^(n|po)/i
      },
      any: {
        am: /^dop\./i,
        pm: /^pop\./i,
        midnight: /^o?poln/i,
        noon: /^o?pold/i,
        morning: /j/i,
        afternoon: /^pop\./i,
        evening: /^z?ve/i,
        night: /(po)?no/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/sl.js
var require_sl = __commonJS({
  "node_modules/date-fns/locale/sl.js"(exports) {
    "use strict";
    exports.sl = void 0;
    var _index = require_formatDistance70();
    var _index2 = require_formatLong77();
    var _index3 = require_formatRelative70();
    var _index4 = require_localize69();
    var _index5 = require_match68();
    var sl = exports.sl = {
      code: "sl",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/sq/_lib/formatDistance.js
var require_formatDistance71 = __commonJS({
  "node_modules/date-fns/locale/sq/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "më pak se një sekondë",
        other: "më pak se {{count}} sekonda"
      },
      xSeconds: {
        one: "1 sekondë",
        other: "{{count}} sekonda"
      },
      halfAMinute: "gjysëm minuti",
      lessThanXMinutes: {
        one: "më pak se një minute",
        other: "më pak se {{count}} minuta"
      },
      xMinutes: {
        one: "1 minutë",
        other: "{{count}} minuta"
      },
      aboutXHours: {
        one: "rreth 1 orë",
        other: "rreth {{count}} orë"
      },
      xHours: {
        one: "1 orë",
        other: "{{count}} orë"
      },
      xDays: {
        one: "1 ditë",
        other: "{{count}} ditë"
      },
      aboutXWeeks: {
        one: "rreth 1 javë",
        other: "rreth {{count}} javë"
      },
      xWeeks: {
        one: "1 javë",
        other: "{{count}} javë"
      },
      aboutXMonths: {
        one: "rreth 1 muaj",
        other: "rreth {{count}} muaj"
      },
      xMonths: {
        one: "1 muaj",
        other: "{{count}} muaj"
      },
      aboutXYears: {
        one: "rreth 1 vit",
        other: "rreth {{count}} vite"
      },
      xYears: {
        one: "1 vit",
        other: "{{count}} vite"
      },
      overXYears: {
        one: "mbi 1 vit",
        other: "mbi {{count}} vite"
      },
      almostXYears: {
        one: "pothuajse 1 vit",
        other: "pothuajse {{count}} vite"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "në " + result;
        } else {
          return result + " më parë";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/sq/_lib/formatLong.js
var require_formatLong78 = __commonJS({
  "node_modules/date-fns/locale/sq/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'në' {{time}}",
      long: "{{date}} 'në' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/sq/_lib/formatRelative.js
var require_formatRelative71 = __commonJS({
  "node_modules/date-fns/locale/sq/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'të' eeee 'e shkuar në' p",
      yesterday: "'dje në' p",
      today: "'sot në' p",
      tomorrow: "'nesër në' p",
      nextWeek: "eeee 'at' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/sq/_lib/localize.js
var require_localize70 = __commonJS({
  "node_modules/date-fns/locale/sq/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["P", "M"],
      abbreviated: ["PK", "MK"],
      wide: ["Para Krishtit", "Mbas Krishtit"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["4-mujori I", "4-mujori II", "4-mujori III", "4-mujori IV"]
    };
    var monthValues = {
      narrow: ["J", "S", "M", "P", "M", "Q", "K", "G", "S", "T", "N", "D"],
      abbreviated: [
        "Jan",
        "Shk",
        "Mar",
        "Pri",
        "Maj",
        "Qer",
        "Kor",
        "Gus",
        "Sht",
        "Tet",
        "Nën",
        "Dhj"
      ],
      wide: [
        "Janar",
        "Shkurt",
        "Mars",
        "Prill",
        "Maj",
        "Qershor",
        "Korrik",
        "Gusht",
        "Shtator",
        "Tetor",
        "Nëntor",
        "Dhjetor"
      ]
    };
    var dayValues = {
      narrow: ["D", "H", "M", "M", "E", "P", "S"],
      short: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"],
      abbreviated: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"],
      wide: ["Dielë", "Hënë", "Martë", "Mërkurë", "Enjte", "Premte", "Shtunë"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "p",
        pm: "m",
        midnight: "m",
        noon: "d",
        morning: "mëngjes",
        afternoon: "dite",
        evening: "mbrëmje",
        night: "natë"
      },
      abbreviated: {
        am: "PD",
        pm: "MD",
        midnight: "mesnëtë",
        noon: "drek",
        morning: "mëngjes",
        afternoon: "mbasdite",
        evening: "mbrëmje",
        night: "natë"
      },
      wide: {
        am: "p.d.",
        pm: "m.d.",
        midnight: "mesnëtë",
        noon: "drek",
        morning: "mëngjes",
        afternoon: "mbasdite",
        evening: "mbrëmje",
        night: "natë"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "p",
        pm: "m",
        midnight: "m",
        noon: "d",
        morning: "në mëngjes",
        afternoon: "në mbasdite",
        evening: "në mbrëmje",
        night: "në mesnatë"
      },
      abbreviated: {
        am: "PD",
        pm: "MD",
        midnight: "mesnatë",
        noon: "drek",
        morning: "në mëngjes",
        afternoon: "në mbasdite",
        evening: "në mbrëmje",
        night: "në mesnatë"
      },
      wide: {
        am: "p.d.",
        pm: "m.d.",
        midnight: "mesnatë",
        noon: "drek",
        morning: "në mëngjes",
        afternoon: "në mbasdite",
        evening: "në mbrëmje",
        night: "në mesnatë"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      if ((options == null ? void 0 : options.unit) === "hour")
        return String(number);
      if (number === 1)
        return number + "-rë";
      if (number === 4)
        return number + "t";
      return number + "-të";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/sq/_lib/match.js
var require_match69 = __commonJS({
  "node_modules/date-fns/locale/sq/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-rë|-të|t|)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(p|m)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(para krishtit|mbas krishtit)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(p|m)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234]-mujori (i{1,3}|iv)/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jsmpqkftnd]/i,
      abbreviated: /^(jan|shk|mar|pri|maj|qer|kor|gus|sht|tet|nën|dhj)/i,
      wide: /^(janar|shkurt|mars|prill|maj|qershor|korrik|gusht|shtator|tetor|nëntor|dhjetor)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^s/i,
        /^m/i,
        /^p/i,
        /^m/i,
        /^q/i,
        /^k/i,
        /^g/i,
        /^s/i,
        /^t/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^shk/i,
        /^mar/i,
        /^pri/i,
        /^maj/i,
        /^qer/i,
        /^kor/i,
        /^gu/i,
        /^sht/i,
        /^tet/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[dhmeps]/i,
      short: /^(di|hë|ma|më|en|pr|sh)/i,
      abbreviated: /^(die|hën|mar|mër|enj|pre|sht)/i,
      wide: /^(dielë|hënë|martë|mërkurë|enjte|premte|shtunë)/i
    };
    var parseDayPatterns = {
      narrow: [/^d/i, /^h/i, /^m/i, /^m/i, /^e/i, /^p/i, /^s/i],
      any: [/^d/i, /^h/i, /^ma/i, /^më/i, /^e/i, /^p/i, /^s/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(p|m|me|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i,
      any: /^([pm]\.?\s?d\.?|drek|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^p/i,
        pm: /^m/i,
        midnight: /^me/i,
        noon: /^dr/i,
        morning: /mëngjes/i,
        afternoon: /mbasdite/i,
        evening: /mbrëmje/i,
        night: /natë/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/sq.js
var require_sq = __commonJS({
  "node_modules/date-fns/locale/sq.js"(exports) {
    "use strict";
    exports.sq = void 0;
    var _index = require_formatDistance71();
    var _index2 = require_formatLong78();
    var _index3 = require_formatRelative71();
    var _index4 = require_localize70();
    var _index5 = require_match69();
    var sq = exports.sq = {
      code: "sq",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/sr/_lib/formatDistance.js
var require_formatDistance72 = __commonJS({
  "node_modules/date-fns/locale/sr/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          standalone: "мање од 1 секунде",
          withPrepositionAgo: "мање од 1 секунде",
          withPrepositionIn: "мање од 1 секунду"
        },
        dual: "мање од {{count}} секунде",
        other: "мање од {{count}} секунди"
      },
      xSeconds: {
        one: {
          standalone: "1 секунда",
          withPrepositionAgo: "1 секунде",
          withPrepositionIn: "1 секунду"
        },
        dual: "{{count}} секунде",
        other: "{{count}} секунди"
      },
      halfAMinute: "пола минуте",
      lessThanXMinutes: {
        one: {
          standalone: "мање од 1 минуте",
          withPrepositionAgo: "мање од 1 минуте",
          withPrepositionIn: "мање од 1 минуту"
        },
        dual: "мање од {{count}} минуте",
        other: "мање од {{count}} минута"
      },
      xMinutes: {
        one: {
          standalone: "1 минута",
          withPrepositionAgo: "1 минуте",
          withPrepositionIn: "1 минуту"
        },
        dual: "{{count}} минуте",
        other: "{{count}} минута"
      },
      aboutXHours: {
        one: {
          standalone: "око 1 сат",
          withPrepositionAgo: "око 1 сат",
          withPrepositionIn: "око 1 сат"
        },
        dual: "око {{count}} сата",
        other: "око {{count}} сати"
      },
      xHours: {
        one: {
          standalone: "1 сат",
          withPrepositionAgo: "1 сат",
          withPrepositionIn: "1 сат"
        },
        dual: "{{count}} сата",
        other: "{{count}} сати"
      },
      xDays: {
        one: {
          standalone: "1 дан",
          withPrepositionAgo: "1 дан",
          withPrepositionIn: "1 дан"
        },
        dual: "{{count}} дана",
        other: "{{count}} дана"
      },
      aboutXWeeks: {
        one: {
          standalone: "око 1 недељу",
          withPrepositionAgo: "око 1 недељу",
          withPrepositionIn: "око 1 недељу"
        },
        dual: "око {{count}} недеље",
        other: "око {{count}} недеље"
      },
      xWeeks: {
        one: {
          standalone: "1 недељу",
          withPrepositionAgo: "1 недељу",
          withPrepositionIn: "1 недељу"
        },
        dual: "{{count}} недеље",
        other: "{{count}} недеље"
      },
      aboutXMonths: {
        one: {
          standalone: "око 1 месец",
          withPrepositionAgo: "око 1 месец",
          withPrepositionIn: "око 1 месец"
        },
        dual: "око {{count}} месеца",
        other: "око {{count}} месеци"
      },
      xMonths: {
        one: {
          standalone: "1 месец",
          withPrepositionAgo: "1 месец",
          withPrepositionIn: "1 месец"
        },
        dual: "{{count}} месеца",
        other: "{{count}} месеци"
      },
      aboutXYears: {
        one: {
          standalone: "око 1 годину",
          withPrepositionAgo: "око 1 годину",
          withPrepositionIn: "око 1 годину"
        },
        dual: "око {{count}} године",
        other: "око {{count}} година"
      },
      xYears: {
        one: {
          standalone: "1 година",
          withPrepositionAgo: "1 године",
          withPrepositionIn: "1 годину"
        },
        dual: "{{count}} године",
        other: "{{count}} година"
      },
      overXYears: {
        one: {
          standalone: "преко 1 годину",
          withPrepositionAgo: "преко 1 годину",
          withPrepositionIn: "преко 1 годину"
        },
        dual: "преко {{count}} године",
        other: "преко {{count}} година"
      },
      almostXYears: {
        one: {
          standalone: "готово 1 годину",
          withPrepositionAgo: "готово 1 годину",
          withPrepositionIn: "готово 1 годину"
        },
        dual: "готово {{count}} године",
        other: "готово {{count}} година"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options == null ? void 0 : options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            result = tokenValue.one.withPrepositionIn;
          } else {
            result = tokenValue.one.withPrepositionAgo;
          }
        } else {
          result = tokenValue.one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== "1") {
        result = tokenValue.dual.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "за " + result;
        } else {
          return "пре " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/sr/_lib/formatLong.js
var require_formatLong79 = __commonJS({
  "node_modules/date-fns/locale/sr/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d. MMMM yyyy.",
      long: "d. MMMM yyyy.",
      medium: "d. MMM yy.",
      short: "dd. MM. yy."
    };
    var timeFormats = {
      full: "HH:mm:ss (zzzz)",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'у' {{time}}",
      long: "{{date}} 'у' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/sr/_lib/formatRelative.js
var require_formatRelative72 = __commonJS({
  "node_modules/date-fns/locale/sr/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        const day = date.getDay();
        switch (day) {
          case 0:
            return "'прошле недеље у' p";
          case 3:
            return "'прошле среде у' p";
          case 6:
            return "'прошле суботе у' p";
          default:
            return "'прошли' EEEE 'у' p";
        }
      },
      yesterday: "'јуче у' p",
      today: "'данас у' p",
      tomorrow: "'сутра у' p",
      nextWeek: (date) => {
        const day = date.getDay();
        switch (day) {
          case 0:
            return "'следеће недеље у' p";
          case 3:
            return "'следећу среду у' p";
          case 6:
            return "'следећу суботу у' p";
          default:
            return "'следећи' EEEE 'у' p";
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/sr/_lib/localize.js
var require_localize71 = __commonJS({
  "node_modules/date-fns/locale/sr/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["пр.н.е.", "АД"],
      abbreviated: ["пр. Хр.", "по. Хр."],
      wide: ["Пре Христа", "После Христа"]
    };
    var quarterValues = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. кв.", "2. кв.", "3. кв.", "4. кв."],
      wide: ["1. квартал", "2. квартал", "3. квартал", "4. квартал"]
    };
    var monthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "јан",
        "феб",
        "мар",
        "апр",
        "мај",
        "јун",
        "јул",
        "авг",
        "сеп",
        "окт",
        "нов",
        "дец"
      ],
      wide: [
        "јануар",
        "фебруар",
        "март",
        "април",
        "мај",
        "јун",
        "јул",
        "август",
        "септембар",
        "октобар",
        "новембар",
        "децембар"
      ]
    };
    var formattingMonthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "јан",
        "феб",
        "мар",
        "апр",
        "мај",
        "јун",
        "јул",
        "авг",
        "сеп",
        "окт",
        "нов",
        "дец"
      ],
      wide: [
        "јануар",
        "фебруар",
        "март",
        "април",
        "мај",
        "јун",
        "јул",
        "август",
        "септембар",
        "октобар",
        "новембар",
        "децембар"
      ]
    };
    var dayValues = {
      narrow: ["Н", "П", "У", "С", "Ч", "П", "С"],
      short: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
      abbreviated: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
      wide: [
        "недеља",
        "понедељак",
        "уторак",
        "среда",
        "четвртак",
        "петак",
        "субота"
      ]
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "АМ",
        pm: "ПМ",
        midnight: "поноћ",
        noon: "подне",
        morning: "ујутру",
        afternoon: "поподне",
        evening: "увече",
        night: "ноћу"
      },
      abbreviated: {
        am: "АМ",
        pm: "ПМ",
        midnight: "поноћ",
        noon: "подне",
        morning: "ујутру",
        afternoon: "поподне",
        evening: "увече",
        night: "ноћу"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "поноћ",
        noon: "подне",
        morning: "ујутру",
        afternoon: "после подне",
        evening: "увече",
        night: "ноћу"
      }
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "поноћ",
        noon: "подне",
        morning: "ујутру",
        afternoon: "поподне",
        evening: "увече",
        night: "ноћу"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "поноћ",
        noon: "подне",
        morning: "ујутру",
        afternoon: "поподне",
        evening: "увече",
        night: "ноћу"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "поноћ",
        noon: "подне",
        morning: "ујутру",
        afternoon: "после подне",
        evening: "увече",
        night: "ноћу"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/sr/_lib/match.js
var require_match70 = __commonJS({
  "node_modules/date-fns/locale/sr/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(пр\.н\.е\.|АД)/i,
      abbreviated: /^(пр\.\s?Хр\.|по\.\s?Хр\.)/i,
      wide: /^(Пре Христа|пре нове ере|После Христа|нова ера)/i
    };
    var parseEraPatterns = {
      any: [/^пр/i, /^(по|нова)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?кв\.?/i,
      wide: /^[1234]\. квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(јан|феб|мар|апр|мај|јун|јул|авг|сеп|окт|нов|дец)/i,
      wide: /^((јануар|јануара)|(фебруар|фебруара)|(март|марта)|(април|априла)|(мја|маја)|(јун|јуна)|(јул|јула)|(август|августа)|(септембар|септембра)|(октобар|октобра)|(новембар|новембра)|(децембар|децембра))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
      ],
      any: [
        /^ја/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^мај/i,
        /^јун/i,
        /^јул/i,
        /^авг/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[пусчн]/i,
      short: /^(нед|пон|уто|сре|чет|пет|суб)/i,
      abbreviated: /^(нед|пон|уто|сре|чет|пет|суб)/i,
      wide: /^(недеља|понедељак|уторак|среда|четвртак|петак|субота)/i
    };
    var parseDayPatterns = {
      narrow: [/^п/i, /^у/i, /^с/i, /^ч/i, /^п/i, /^с/i, /^н/i],
      any: [/^нед/i, /^пон/i, /^уто/i, /^сре/i, /^чет/i, /^пет/i, /^суб/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(ам|пм|поноћ|(по)?подне|увече|ноћу|после подне|ујутру)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^поно/i,
        noon: /^под/i,
        morning: /ујутру/i,
        afternoon: /(после\s|по)+подне/i,
        evening: /(увече)/i,
        night: /(ноћу)/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/sr.js
var require_sr = __commonJS({
  "node_modules/date-fns/locale/sr.js"(exports) {
    "use strict";
    exports.sr = void 0;
    var _index = require_formatDistance72();
    var _index2 = require_formatLong79();
    var _index3 = require_formatRelative72();
    var _index4 = require_localize71();
    var _index5 = require_match70();
    var sr = exports.sr = {
      code: "sr",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/sr-Latn/_lib/formatDistance.js
var require_formatDistance73 = __commonJS({
  "node_modules/date-fns/locale/sr-Latn/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          standalone: "manje od 1 sekunde",
          withPrepositionAgo: "manje od 1 sekunde",
          withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
      },
      xSeconds: {
        one: {
          standalone: "1 sekunda",
          withPrepositionAgo: "1 sekunde",
          withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
      },
      halfAMinute: "pola minute",
      lessThanXMinutes: {
        one: {
          standalone: "manje od 1 minute",
          withPrepositionAgo: "manje od 1 minute",
          withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
      },
      xMinutes: {
        one: {
          standalone: "1 minuta",
          withPrepositionAgo: "1 minute",
          withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
      },
      aboutXHours: {
        one: {
          standalone: "oko 1 sat",
          withPrepositionAgo: "oko 1 sat",
          withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
      },
      xHours: {
        one: {
          standalone: "1 sat",
          withPrepositionAgo: "1 sat",
          withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
      },
      xDays: {
        one: {
          standalone: "1 dan",
          withPrepositionAgo: "1 dan",
          withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
      },
      aboutXWeeks: {
        one: {
          standalone: "oko 1 nedelju",
          withPrepositionAgo: "oko 1 nedelju",
          withPrepositionIn: "oko 1 nedelju"
        },
        dual: "oko {{count}} nedelje",
        other: "oko {{count}} nedelje"
      },
      xWeeks: {
        one: {
          standalone: "1 nedelju",
          withPrepositionAgo: "1 nedelju",
          withPrepositionIn: "1 nedelju"
        },
        dual: "{{count}} nedelje",
        other: "{{count}} nedelje"
      },
      aboutXMonths: {
        one: {
          standalone: "oko 1 mesec",
          withPrepositionAgo: "oko 1 mesec",
          withPrepositionIn: "oko 1 mesec"
        },
        dual: "oko {{count}} meseca",
        other: "oko {{count}} meseci"
      },
      xMonths: {
        one: {
          standalone: "1 mesec",
          withPrepositionAgo: "1 mesec",
          withPrepositionIn: "1 mesec"
        },
        dual: "{{count}} meseca",
        other: "{{count}} meseci"
      },
      aboutXYears: {
        one: {
          standalone: "oko 1 godinu",
          withPrepositionAgo: "oko 1 godinu",
          withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
      },
      xYears: {
        one: {
          standalone: "1 godina",
          withPrepositionAgo: "1 godine",
          withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
      },
      overXYears: {
        one: {
          standalone: "preko 1 godinu",
          withPrepositionAgo: "preko 1 godinu",
          withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
      },
      almostXYears: {
        one: {
          standalone: "gotovo 1 godinu",
          withPrepositionAgo: "gotovo 1 godinu",
          withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        if (options == null ? void 0 : options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            result = tokenValue.one.withPrepositionIn;
          } else {
            result = tokenValue.one.withPrepositionAgo;
          }
        } else {
          result = tokenValue.one.standalone;
        }
      } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
      String(count).substr(-2, 1) !== "1") {
        result = tokenValue.dual.replace("{{count}}", String(count));
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "za " + result;
        } else {
          return "pre " + result;
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/sr-Latn/_lib/formatLong.js
var require_formatLong80 = __commonJS({
  "node_modules/date-fns/locale/sr-Latn/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d. MMMM yyyy.",
      long: "d. MMMM yyyy.",
      medium: "d. MMM yy.",
      short: "dd. MM. yy."
    };
    var timeFormats = {
      full: "HH:mm:ss (zzzz)",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'u' {{time}}",
      long: "{{date}} 'u' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/sr-Latn/_lib/formatRelative.js
var require_formatRelative73 = __commonJS({
  "node_modules/date-fns/locale/sr-Latn/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: (date) => {
        switch (date.getDay()) {
          case 0:
            return "'prošle nedelje u' p";
          case 3:
            return "'prošle srede u' p";
          case 6:
            return "'prošle subote u' p";
          default:
            return "'prošli' EEEE 'u' p";
        }
      },
      yesterday: "'juče u' p",
      today: "'danas u' p",
      tomorrow: "'sutra u' p",
      nextWeek: (date) => {
        switch (date.getDay()) {
          case 0:
            return "'sledeće nedelje u' p";
          case 3:
            return "'sledeću sredu u' p";
          case 6:
            return "'sledeću subotu u' p";
          default:
            return "'sledeći' EEEE 'u' p";
        }
      },
      other: "P"
    };
    var formatRelative = (token, date, _baseDate, _options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/sr-Latn/_lib/localize.js
var require_localize72 = __commonJS({
  "node_modules/date-fns/locale/sr-Latn/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["pr.n.e.", "AD"],
      abbreviated: ["pr. Hr.", "po. Hr."],
      wide: ["Pre Hrista", "Posle Hrista"]
    };
    var quarterValues = {
      narrow: ["1.", "2.", "3.", "4."],
      abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
      wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
    };
    var monthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
      ],
      wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "jun",
        "jul",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
      ]
    };
    var formattingMonthValues = {
      narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
      ],
      abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
      ],
      wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "jun",
        "jul",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
      ]
    };
    var dayValues = {
      narrow: ["N", "P", "U", "S", "Č", "P", "S"],
      short: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
      abbreviated: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
      wide: [
        "nedelja",
        "ponedeljak",
        "utorak",
        "sreda",
        "četvrtak",
        "petak",
        "subota"
      ]
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "posle podne",
        evening: "uveče",
        night: "noću"
      }
    };
    var dayPeriodValues = {
      narrow: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uveče",
        night: "noću"
      },
      wide: {
        am: "AM",
        pm: "PM",
        midnight: "ponoć",
        noon: "podne",
        morning: "ujutru",
        afternoon: "posle podne",
        evening: "uveče",
        night: "noću"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/sr-Latn/_lib/match.js
var require_match71 = __commonJS({
  "node_modules/date-fns/locale/sr-Latn/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)\./i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(pr\.n\.e\.|AD)/i,
      abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
      wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i
    };
    var parseEraPatterns = {
      any: [/^pr/i, /^(po|nova)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]\.\s?kv\.?/i,
      wide: /^[1234]\. kvartal/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(10|11|12|[123456789])\./i,
      abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
      wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^avg/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[npusčc]/i,
      short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
      abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
      wide: /^(nedelja|ponedeljak|utorak|sreda|(četvrtak|cetvrtak)|petak|subota)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|posle podne|ujutru)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(posle\s|po)+podne/i,
        evening: /(uvece|uveče)/i,
        night: /(nocu|noću)/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/sr-Latn.js
var require_sr_Latn = __commonJS({
  "node_modules/date-fns/locale/sr-Latn.js"(exports) {
    "use strict";
    exports.srLatn = void 0;
    var _index = require_formatDistance73();
    var _index2 = require_formatLong80();
    var _index3 = require_formatRelative73();
    var _index4 = require_localize72();
    var _index5 = require_match71();
    var srLatn = exports.srLatn = {
      code: "sr-Latn",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/sv/_lib/formatDistance.js
var require_formatDistance74 = __commonJS({
  "node_modules/date-fns/locale/sv/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "mindre än en sekund",
        other: "mindre än {{count}} sekunder"
      },
      xSeconds: {
        one: "en sekund",
        other: "{{count}} sekunder"
      },
      halfAMinute: "en halv minut",
      lessThanXMinutes: {
        one: "mindre än en minut",
        other: "mindre än {{count}} minuter"
      },
      xMinutes: {
        one: "en minut",
        other: "{{count}} minuter"
      },
      aboutXHours: {
        one: "ungefär en timme",
        other: "ungefär {{count}} timmar"
      },
      xHours: {
        one: "en timme",
        other: "{{count}} timmar"
      },
      xDays: {
        one: "en dag",
        other: "{{count}} dagar"
      },
      aboutXWeeks: {
        one: "ungefär en vecka",
        other: "ungefär {{count}} veckor"
      },
      xWeeks: {
        one: "en vecka",
        other: "{{count}} veckor"
      },
      aboutXMonths: {
        one: "ungefär en månad",
        other: "ungefär {{count}} månader"
      },
      xMonths: {
        one: "en månad",
        other: "{{count}} månader"
      },
      aboutXYears: {
        one: "ungefär ett år",
        other: "ungefär {{count}} år"
      },
      xYears: {
        one: "ett år",
        other: "{{count}} år"
      },
      overXYears: {
        one: "över ett år",
        other: "över {{count}} år"
      },
      almostXYears: {
        one: "nästan ett år",
        other: "nästan {{count}} år"
      }
    };
    var wordMapping = [
      "noll",
      "en",
      "två",
      "tre",
      "fyra",
      "fem",
      "sex",
      "sju",
      "åtta",
      "nio",
      "tio",
      "elva",
      "tolv"
    ];
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace(
          "{{count}}",
          count < 13 ? wordMapping[count] : String(count)
        );
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "om " + result;
        } else {
          return result + " sedan";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/sv/_lib/formatLong.js
var require_formatLong81 = __commonJS({
  "node_modules/date-fns/locale/sv/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE d MMMM y",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "y-MM-dd"
    };
    var timeFormats = {
      full: "'kl'. HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'kl.' {{time}}",
      long: "{{date}} 'kl.' {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/sv/_lib/formatRelative.js
var require_formatRelative74 = __commonJS({
  "node_modules/date-fns/locale/sv/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'i' EEEE's kl.' p",
      yesterday: "'igår kl.' p",
      today: "'idag kl.' p",
      tomorrow: "'imorgon kl.' p",
      nextWeek: "EEEE 'kl.' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/sv/_lib/localize.js
var require_localize73 = __commonJS({
  "node_modules/date-fns/locale/sv/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["f.Kr.", "e.Kr."],
      abbreviated: ["f.Kr.", "e.Kr."],
      wide: ["före Kristus", "efter Kristus"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["1:a kvartalet", "2:a kvartalet", "3:e kvartalet", "4:e kvartalet"]
    };
    var monthValues = {
      narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
      abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apr.",
        "maj",
        "juni",
        "juli",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
      ],
      wide: [
        "januari",
        "februari",
        "mars",
        "april",
        "maj",
        "juni",
        "juli",
        "augusti",
        "september",
        "oktober",
        "november",
        "december"
      ]
    };
    var dayValues = {
      narrow: ["S", "M", "T", "O", "T", "F", "L"],
      short: ["sö", "må", "ti", "on", "to", "fr", "lö"],
      abbreviated: ["sön", "mån", "tis", "ons", "tors", "fre", "lör"],
      wide: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "morg.",
        afternoon: "efterm.",
        evening: "kväll",
        night: "natt"
      },
      abbreviated: {
        am: "f.m.",
        pm: "e.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "morgon",
        afternoon: "efterm.",
        evening: "kväll",
        night: "natt"
      },
      wide: {
        am: "förmiddag",
        pm: "eftermiddag",
        midnight: "midnatt",
        noon: "middag",
        morning: "morgon",
        afternoon: "eftermiddag",
        evening: "kväll",
        night: "natt"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morg.",
        afternoon: "på efterm.",
        evening: "på kvällen",
        night: "på natten"
      },
      abbreviated: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morg.",
        afternoon: "på efterm.",
        evening: "på kvällen",
        night: "på natten"
      },
      wide: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "på morgonen",
        afternoon: "på eftermiddagen",
        evening: "på kvällen",
        night: "på natten"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      const rem100 = number % 100;
      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
          case 2:
            return number + ":a";
        }
      }
      return number + ":e";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/sv/_lib/match.js
var require_match72 = __commonJS({
  "node_modules/date-fns/locale/sv/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(:a|:e)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
      abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
      wide: /^(före Kristus|före vår tid|efter Kristus|vår tid)/i
    };
    var parseEraPatterns = {
      any: [/^f/i, /^[ev]/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](:a|:e)? kvartalet/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar[s]?|apr|maj|jun[i]?|jul[i]?|aug|sep|okt|nov|dec)\.?/i,
      wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[smtofl]/i,
      short: /^(sö|må|ti|on|to|fr|lö)/i,
      abbreviated: /^(sön|mån|tis|ons|tors|fre|lör)/i,
      wide: /^(söndag|måndag|tisdag|onsdag|torsdag|fredag|lördag)/i
    };
    var parseDayPatterns = {
      any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
    };
    var matchDayPeriodPatterns = {
      any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(på) (morgonen|eftermiddagen|kvällen|natten))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /eftermiddag/i,
        evening: /kväll/i,
        night: /natt/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/sv.js
var require_sv = __commonJS({
  "node_modules/date-fns/locale/sv.js"(exports) {
    "use strict";
    exports.sv = void 0;
    var _index = require_formatDistance74();
    var _index2 = require_formatLong81();
    var _index3 = require_formatRelative74();
    var _index4 = require_localize73();
    var _index5 = require_match72();
    var sv = exports.sv = {
      code: "sv",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/ta/_lib/formatDistance.js
var require_formatDistance75 = __commonJS({
  "node_modules/date-fns/locale/ta/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function isPluralType(val) {
      return val.one !== void 0;
    }
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: {
          default: "ஒரு வினாடிக்கு குறைவாக",
          in: "ஒரு வினாடிக்குள்",
          ago: "ஒரு வினாடிக்கு முன்பு"
        },
        other: {
          default: "{{count}} வினாடிகளுக்கு குறைவாக",
          in: "{{count}} வினாடிகளுக்குள்",
          ago: "{{count}} வினாடிகளுக்கு முன்பு"
        }
      },
      xSeconds: {
        one: {
          default: "1 வினாடி",
          in: "1 வினாடியில்",
          ago: "1 வினாடி முன்பு"
        },
        other: {
          default: "{{count}} விநாடிகள்",
          in: "{{count}} வினாடிகளில்",
          ago: "{{count}} விநாடிகளுக்கு முன்பு"
        }
      },
      halfAMinute: {
        default: "அரை நிமிடம்",
        in: "அரை நிமிடத்தில்",
        ago: "அரை நிமிடம் முன்பு"
      },
      lessThanXMinutes: {
        one: {
          default: "ஒரு நிமிடத்திற்கும் குறைவாக",
          in: "ஒரு நிமிடத்திற்குள்",
          ago: "ஒரு நிமிடத்திற்கு முன்பு"
        },
        other: {
          default: "{{count}} நிமிடங்களுக்கும் குறைவாக",
          in: "{{count}} நிமிடங்களுக்குள்",
          ago: "{{count}} நிமிடங்களுக்கு முன்பு"
        }
      },
      xMinutes: {
        one: {
          default: "1 நிமிடம்",
          in: "1 நிமிடத்தில்",
          ago: "1 நிமிடம் முன்பு"
        },
        other: {
          default: "{{count}} நிமிடங்கள்",
          in: "{{count}} நிமிடங்களில்",
          ago: "{{count}} நிமிடங்களுக்கு முன்பு"
        }
      },
      aboutXHours: {
        one: {
          default: "சுமார் 1 மணி நேரம்",
          in: "சுமார் 1 மணி நேரத்தில்",
          ago: "சுமார் 1 மணி நேரத்திற்கு முன்பு"
        },
        other: {
          default: "சுமார் {{count}} மணி நேரம்",
          in: "சுமார் {{count}} மணி நேரத்திற்கு முன்பு",
          ago: "சுமார் {{count}} மணி நேரத்தில்"
        }
      },
      xHours: {
        one: {
          default: "1 மணி நேரம்",
          in: "1 மணி நேரத்தில்",
          ago: "1 மணி நேரத்திற்கு முன்பு"
        },
        other: {
          default: "{{count}} மணி நேரம்",
          in: "{{count}} மணி நேரத்தில்",
          ago: "{{count}} மணி நேரத்திற்கு முன்பு"
        }
      },
      xDays: {
        one: {
          default: "1 நாள்",
          in: "1 நாளில்",
          ago: "1 நாள் முன்பு"
        },
        other: {
          default: "{{count}} நாட்கள்",
          in: "{{count}} நாட்களில்",
          ago: "{{count}} நாட்களுக்கு முன்பு"
        }
      },
      aboutXWeeks: {
        one: {
          default: "சுமார் 1 வாரம்",
          in: "சுமார் 1 வாரத்தில்",
          ago: "சுமார் 1 வாரம் முன்பு"
        },
        other: {
          default: "சுமார் {{count}} வாரங்கள்",
          in: "சுமார் {{count}} வாரங்களில்",
          ago: "சுமார் {{count}} வாரங்களுக்கு முன்பு"
        }
      },
      xWeeks: {
        one: {
          default: "1 வாரம்",
          in: "1 வாரத்தில்",
          ago: "1 வாரம் முன்பு"
        },
        other: {
          default: "{{count}} வாரங்கள்",
          in: "{{count}} வாரங்களில்",
          ago: "{{count}} வாரங்களுக்கு முன்பு"
        }
      },
      aboutXMonths: {
        one: {
          default: "சுமார் 1 மாதம்",
          in: "சுமார் 1 மாதத்தில்",
          ago: "சுமார் 1 மாதத்திற்கு முன்பு"
        },
        other: {
          default: "சுமார் {{count}} மாதங்கள்",
          in: "சுமார் {{count}} மாதங்களில்",
          ago: "சுமார் {{count}} மாதங்களுக்கு முன்பு"
        }
      },
      xMonths: {
        one: {
          default: "1 மாதம்",
          in: "1 மாதத்தில்",
          ago: "1 மாதம் முன்பு"
        },
        other: {
          default: "{{count}} மாதங்கள்",
          in: "{{count}} மாதங்களில்",
          ago: "{{count}} மாதங்களுக்கு முன்பு"
        }
      },
      aboutXYears: {
        one: {
          default: "சுமார் 1 வருடம்",
          in: "சுமார் 1 ஆண்டில்",
          ago: "சுமார் 1 வருடம் முன்பு"
        },
        other: {
          default: "சுமார் {{count}} ஆண்டுகள்",
          in: "சுமார் {{count}} ஆண்டுகளில்",
          ago: "சுமார் {{count}} ஆண்டுகளுக்கு முன்பு"
        }
      },
      xYears: {
        one: {
          default: "1 வருடம்",
          in: "1 ஆண்டில்",
          ago: "1 வருடம் முன்பு"
        },
        other: {
          default: "{{count}} ஆண்டுகள்",
          in: "{{count}} ஆண்டுகளில்",
          ago: "{{count}} ஆண்டுகளுக்கு முன்பு"
        }
      },
      overXYears: {
        one: {
          default: "1 வருடத்திற்கு மேல்",
          in: "1 வருடத்திற்கும் மேலாக",
          ago: "1 வருடம் முன்பு"
        },
        other: {
          default: "{{count}} ஆண்டுகளுக்கும் மேலாக",
          in: "{{count}} ஆண்டுகளில்",
          ago: "{{count}} ஆண்டுகளுக்கு முன்பு"
        }
      },
      almostXYears: {
        one: {
          default: "கிட்டத்தட்ட 1 வருடம்",
          in: "கிட்டத்தட்ட 1 ஆண்டில்",
          ago: "கிட்டத்தட்ட 1 வருடம் முன்பு"
        },
        other: {
          default: "கிட்டத்தட்ட {{count}} ஆண்டுகள்",
          in: "கிட்டத்தட்ட {{count}} ஆண்டுகளில்",
          ago: "கிட்டத்தட்ட {{count}} ஆண்டுகளுக்கு முன்பு"
        }
      }
    };
    var formatDistance = (token, count, options) => {
      const tense = (options == null ? void 0 : options.addSuffix) ? options.comparison && options.comparison > 0 ? "in" : "ago" : "default";
      const tokenValue = formatDistanceLocale[token];
      if (!isPluralType(tokenValue))
        return tokenValue[tense];
      if (count === 1) {
        return tokenValue.one[tense];
      } else {
        return tokenValue.other[tense].replace("{{count}}", String(count));
      }
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ta/_lib/formatLong.js
var require_formatLong82 = __commonJS({
  "node_modules/date-fns/locale/ta/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, d MMMM, y",
      long: "d MMMM, y",
      medium: "d MMM, y",
      short: "d/M/yy"
    };
    var timeFormats = {
      full: "a h:mm:ss zzzz",
      long: "a h:mm:ss z",
      medium: "a h:mm:ss",
      short: "a h:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ta/_lib/formatRelative.js
var require_formatRelative75 = __commonJS({
  "node_modules/date-fns/locale/ta/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'கடந்த' eeee p 'மணிக்கு'",
      yesterday: "'நேற்று ' p 'மணிக்கு'",
      today: "'இன்று ' p 'மணிக்கு'",
      tomorrow: "'நாளை ' p 'மணிக்கு'",
      nextWeek: "eeee p 'மணிக்கு'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ta/_lib/localize.js
var require_localize74 = __commonJS({
  "node_modules/date-fns/locale/ta/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["கி.மு.", "கி.பி."],
      abbreviated: ["கி.மு.", "கி.பி."],
      // CLDR #1624, #1626
      wide: ["கிறிஸ்துவுக்கு முன்", "அன்னோ டோமினி"]
      // CLDR #1620, #1622
    };
    var quarterValues = {
      // CLDR #1644 - #1647
      narrow: ["1", "2", "3", "4"],
      // CLDR #1636 - #1639
      abbreviated: ["காலா.1", "காலா.2", "காலா.3", "காலா.4"],
      // CLDR #1628 - #1631
      wide: [
        "ஒன்றாம் காலாண்டு",
        "இரண்டாம் காலாண்டு",
        "மூன்றாம் காலாண்டு",
        "நான்காம் காலாண்டு"
      ]
    };
    var monthValues = {
      // CLDR #700 - #711
      narrow: ["ஜ", "பி", "மா", "ஏ", "மே", "ஜூ", "ஜூ", "ஆ", "செ", "அ", "ந", "டி"],
      // CLDR #1676 - #1687
      abbreviated: [
        "ஜன.",
        "பிப்.",
        "மார்.",
        "ஏப்.",
        "மே",
        "ஜூன்",
        "ஜூலை",
        "ஆக.",
        "செப்.",
        "அக்.",
        "நவ.",
        "டிச."
      ],
      // CLDR #1652 - #1663
      wide: [
        "ஜனவரி",
        // January
        "பிப்ரவரி",
        // February
        "மார்ச்",
        // March
        "ஏப்ரல்",
        // April
        "மே",
        // May
        "ஜூன்",
        // June
        "ஜூலை",
        // July
        "ஆகஸ்ட்",
        // August
        "செப்டம்பர்",
        // September
        "அக்டோபர்",
        // October
        "நவம்பர்",
        // November
        "டிசம்பர்"
        // December
      ]
    };
    var dayValues = {
      // CLDR #1766 - #1772
      narrow: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"],
      // CLDR #1752 - #1758
      short: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"],
      // CLDR #1738 - #1744
      abbreviated: ["ஞாயி.", "திங்.", "செவ்.", "புத.", "வியா.", "வெள்.", "சனி"],
      // CLDR #1724 - #1730
      wide: [
        "ஞாயிறு",
        // Sunday
        "திங்கள்",
        // Monday
        "செவ்வாய்",
        // Tuesday
        "புதன்",
        // Wednesday
        "வியாழன்",
        // Thursday
        "வெள்ளி",
        // Friday
        "சனி"
        // Saturday
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "மு.ப",
        pm: "பி.ப",
        midnight: "நள்.",
        noon: "நண்.",
        morning: "கா.",
        afternoon: "மதி.",
        evening: "மா.",
        night: "இர."
      },
      abbreviated: {
        am: "முற்பகல்",
        pm: "பிற்பகல்",
        midnight: "நள்ளிரவு",
        noon: "நண்பகல்",
        morning: "காலை",
        afternoon: "மதியம்",
        evening: "மாலை",
        night: "இரவு"
      },
      wide: {
        am: "முற்பகல்",
        pm: "பிற்பகல்",
        midnight: "நள்ளிரவு",
        noon: "நண்பகல்",
        morning: "காலை",
        afternoon: "மதியம்",
        evening: "மாலை",
        night: "இரவு"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "மு.ப",
        pm: "பி.ப",
        midnight: "நள்.",
        noon: "நண்.",
        morning: "கா.",
        afternoon: "மதி.",
        evening: "மா.",
        night: "இர."
      },
      abbreviated: {
        am: "முற்பகல்",
        pm: "பிற்பகல்",
        midnight: "நள்ளிரவு",
        noon: "நண்பகல்",
        morning: "காலை",
        afternoon: "மதியம்",
        evening: "மாலை",
        night: "இரவு"
      },
      wide: {
        am: "முற்பகல்",
        pm: "பிற்பகல்",
        midnight: "நள்ளிரவு",
        noon: "நண்பகல்",
        morning: "காலை",
        afternoon: "மதியம்",
        evening: "மாலை",
        night: "இரவு"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ta/_lib/match.js
var require_match73 = __commonJS({
  "node_modules/date-fns/locale/ta/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(வது)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(கி.மு.|கி.பி.)/i,
      abbreviated: /^(கி\.?\s?மு\.?|கி\.?\s?பி\.?)/,
      wide: /^(கிறிஸ்துவுக்கு\sமுன்|அன்னோ\sடோமினி)/i
    };
    var parseEraPatterns = {
      any: [/கி\.?\s?மு\.?/, /கி\.?\s?பி\.?/]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^காலா.[1234]/i,
      wide: /^(ஒன்றாம்|இரண்டாம்|மூன்றாம்|நான்காம்) காலாண்டு/i
    };
    var parseQuarterPatterns = {
      narrow: [/1/i, /2/i, /3/i, /4/i],
      any: [
        /(1|காலா.1|ஒன்றாம்)/i,
        /(2|காலா.2|இரண்டாம்)/i,
        /(3|காலா.3|மூன்றாம்)/i,
        /(4|காலா.4|நான்காம்)/i
      ]
    };
    var matchMonthPatterns = {
      narrow: /^(ஜ|பி|மா|ஏ|மே|ஜூ|ஆ|செ|அ|ந|டி)$/i,
      abbreviated: /^(ஜன.|பிப்.|மார்.|ஏப்.|மே|ஜூன்|ஜூலை|ஆக.|செப்.|அக்.|நவ.|டிச.)/i,
      wide: /^(ஜனவரி|பிப்ரவரி|மார்ச்|ஏப்ரல்|மே|ஜூன்|ஜூலை|ஆகஸ்ட்|செப்டம்பர்|அக்டோபர்|நவம்பர்|டிசம்பர்)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ஜ$/i,
        /^பி/i,
        /^மா/i,
        /^ஏ/i,
        /^மே/i,
        /^ஜூ/i,
        /^ஜூ/i,
        /^ஆ/i,
        /^செ/i,
        /^அ/i,
        /^ந/i,
        /^டி/i
      ],
      any: [
        /^ஜன/i,
        /^பி/i,
        /^மா/i,
        /^ஏ/i,
        /^மே/i,
        /^ஜூன்/i,
        /^ஜூலை/i,
        /^ஆ/i,
        /^செ/i,
        /^அ/i,
        /^ந/i,
        /^டி/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
      short: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
      abbreviated: /^(ஞாயி.|திங்.|செவ்.|புத.|வியா.|வெள்.|சனி)/i,
      wide: /^(ஞாயிறு|திங்கள்|செவ்வாய்|புதன்|வியாழன்|வெள்ளி|சனி)/i
    };
    var parseDayPatterns = {
      narrow: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i],
      any: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(மு.ப|பி.ப|நள்|நண்|காலை|மதியம்|மாலை|இரவு)/i,
      any: /^(மு.ப|பி.ப|முற்பகல்|பிற்பகல்|நள்ளிரவு|நண்பகல்|காலை|மதியம்|மாலை|இரவு)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^மு/i,
        pm: /^பி/i,
        midnight: /^நள்/i,
        noon: /^நண்/i,
        morning: /காலை/i,
        afternoon: /மதியம்/i,
        evening: /மாலை/i,
        night: /இரவு/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ta.js
var require_ta = __commonJS({
  "node_modules/date-fns/locale/ta.js"(exports) {
    "use strict";
    exports.ta = void 0;
    var _index = require_formatDistance75();
    var _index2 = require_formatLong82();
    var _index3 = require_formatRelative75();
    var _index4 = require_localize74();
    var _index5 = require_match73();
    var ta = exports.ta = {
      code: "ta",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/te/_lib/formatDistance.js
var require_formatDistance76 = __commonJS({
  "node_modules/date-fns/locale/te/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        standalone: {
          one: "సెకను కన్నా తక్కువ",
          other: "{{count}} సెకన్ల కన్నా తక్కువ"
        },
        withPreposition: {
          one: "సెకను",
          other: "{{count}} సెకన్ల"
        }
      },
      xSeconds: {
        standalone: {
          one: "ఒక సెకను",
          // CLDR #1314
          other: "{{count}} సెకన్ల"
        },
        withPreposition: {
          one: "ఒక సెకను",
          other: "{{count}} సెకన్ల"
        }
      },
      halfAMinute: {
        standalone: "అర నిమిషం",
        withPreposition: "అర నిమిషం"
      },
      lessThanXMinutes: {
        standalone: {
          one: "ఒక నిమిషం కన్నా తక్కువ",
          other: "{{count}} నిమిషాల కన్నా తక్కువ"
        },
        withPreposition: {
          one: "ఒక నిమిషం",
          other: "{{count}} నిమిషాల"
        }
      },
      xMinutes: {
        standalone: {
          one: "ఒక నిమిషం",
          // CLDR #1311
          other: "{{count}} నిమిషాలు"
        },
        withPreposition: {
          one: "ఒక నిమిషం",
          // CLDR #1311
          other: "{{count}} నిమిషాల"
        }
      },
      aboutXHours: {
        standalone: {
          one: "సుమారు ఒక గంట",
          other: "సుమారు {{count}} గంటలు"
        },
        withPreposition: {
          one: "సుమారు ఒక గంట",
          other: "సుమారు {{count}} గంటల"
        }
      },
      xHours: {
        standalone: {
          one: "ఒక గంట",
          // CLDR #1308
          other: "{{count}} గంటలు"
        },
        withPreposition: {
          one: "ఒక గంట",
          other: "{{count}} గంటల"
        }
      },
      xDays: {
        standalone: {
          one: "ఒక రోజు",
          // CLDR #1292
          other: "{{count}} రోజులు"
        },
        withPreposition: {
          one: "ఒక రోజు",
          other: "{{count}} రోజుల"
        }
      },
      aboutXWeeks: {
        standalone: {
          one: "సుమారు ఒక వారం",
          other: "సుమారు {{count}} వారాలు"
        },
        withPreposition: {
          one: "సుమారు ఒక వారం",
          other: "సుమారు {{count}} వారాలల"
        }
      },
      xWeeks: {
        standalone: {
          one: "ఒక వారం",
          other: "{{count}} వారాలు"
        },
        withPreposition: {
          one: "ఒక వారం",
          other: "{{count}} వారాలల"
        }
      },
      aboutXMonths: {
        standalone: {
          one: "సుమారు ఒక నెల",
          other: "సుమారు {{count}} నెలలు"
        },
        withPreposition: {
          one: "సుమారు ఒక నెల",
          other: "సుమారు {{count}} నెలల"
        }
      },
      xMonths: {
        standalone: {
          one: "ఒక నెల",
          // CLDR #1281
          other: "{{count}} నెలలు"
        },
        withPreposition: {
          one: "ఒక నెల",
          other: "{{count}} నెలల"
        }
      },
      aboutXYears: {
        standalone: {
          one: "సుమారు ఒక సంవత్సరం",
          other: "సుమారు {{count}} సంవత్సరాలు"
        },
        withPreposition: {
          one: "సుమారు ఒక సంవత్సరం",
          other: "సుమారు {{count}} సంవత్సరాల"
        }
      },
      xYears: {
        standalone: {
          one: "ఒక సంవత్సరం",
          // CLDR #1275
          other: "{{count}} సంవత్సరాలు"
        },
        withPreposition: {
          one: "ఒక సంవత్సరం",
          other: "{{count}} సంవత్సరాల"
        }
      },
      overXYears: {
        standalone: {
          one: "ఒక సంవత్సరం పైగా",
          other: "{{count}} సంవత్సరాలకు పైగా"
        },
        withPreposition: {
          one: "ఒక సంవత్సరం",
          other: "{{count}} సంవత్సరాల"
        }
      },
      almostXYears: {
        standalone: {
          one: "దాదాపు ఒక సంవత్సరం",
          other: "దాదాపు {{count}} సంవత్సరాలు"
        },
        withPreposition: {
          one: "దాదాపు ఒక సంవత్సరం",
          other: "దాదాపు {{count}} సంవత్సరాల"
        }
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = (options == null ? void 0 : options.addSuffix) ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "లో";
        } else {
          return result + " క్రితం";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/te/_lib/formatLong.js
var require_formatLong83 = __commonJS({
  "node_modules/date-fns/locale/te/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "d, MMMM y, EEEE",
      long: "d MMMM, y",
      medium: "d MMM, y",
      short: "dd-MM-yy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}'కి'",
      long: "{{date}} {{time}}'కి'",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/te/_lib/formatRelative.js
var require_formatRelative76 = __commonJS({
  "node_modules/date-fns/locale/te/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'గత' eeee p",
      // CLDR #1384
      yesterday: "'నిన్న' p",
      // CLDR #1393
      today: "'ఈ రోజు' p",
      // CLDR #1394
      tomorrow: "'రేపు' p",
      // CLDR #1395
      nextWeek: "'తదుపరి' eeee p",
      // CLDR #1386
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/te/_lib/localize.js
var require_localize75 = __commonJS({
  "node_modules/date-fns/locale/te/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["క్రీ.పూ.", "క్రీ.శ."],
      abbreviated: ["క్రీ.పూ.", "క్రీ.శ."],
      wide: ["క్రీస్తు పూర్వం", "క్రీస్తుశకం"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["త్రై1", "త్రై2", "త్రై3", "త్రై4"],
      wide: ["1వ త్రైమాసికం", "2వ త్రైమాసికం", "3వ త్రైమాసికం", "4వ త్రైమాసికం"]
    };
    var monthValues = {
      narrow: ["జ", "ఫి", "మా", "ఏ", "మే", "జూ", "జు", "ఆ", "సె", "అ", "న", "డి"],
      abbreviated: [
        "జన",
        "ఫిబ్ర",
        "మార్చి",
        "ఏప్రి",
        "మే",
        "జూన్",
        "జులై",
        "ఆగ",
        "సెప్టెం",
        "అక్టో",
        "నవం",
        "డిసెం"
      ],
      wide: [
        "జనవరి",
        "ఫిబ్రవరి",
        "మార్చి",
        "ఏప్రిల్",
        "మే",
        "జూన్",
        "జులై",
        "ఆగస్టు",
        "సెప్టెంబర్",
        "అక్టోబర్",
        "నవంబర్",
        "డిసెంబర్"
      ]
    };
    var dayValues = {
      narrow: ["ఆ", "సో", "మ", "బు", "గు", "శు", "శ"],
      short: ["ఆది", "సోమ", "మంగళ", "బుధ", "గురు", "శుక్ర", "శని"],
      abbreviated: ["ఆది", "సోమ", "మంగళ", "బుధ", "గురు", "శుక్ర", "శని"],
      wide: [
        "ఆదివారం",
        "సోమవారం",
        "మంగళవారం",
        "బుధవారం",
        "గురువారం",
        "శుక్రవారం",
        "శనివారం"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "పూర్వాహ్నం",
        pm: "అపరాహ్నం",
        midnight: "అర్ధరాత్రి",
        noon: "మిట్టమధ్యాహ్నం",
        morning: "ఉదయం",
        afternoon: "మధ్యాహ్నం",
        evening: "సాయంత్రం",
        night: "రాత్రి"
      },
      abbreviated: {
        am: "పూర్వాహ్నం",
        pm: "అపరాహ్నం",
        midnight: "అర్ధరాత్రి",
        noon: "మిట్టమధ్యాహ్నం",
        morning: "ఉదయం",
        afternoon: "మధ్యాహ్నం",
        evening: "సాయంత్రం",
        night: "రాత్రి"
      },
      wide: {
        am: "పూర్వాహ్నం",
        pm: "అపరాహ్నం",
        midnight: "అర్ధరాత్రి",
        noon: "మిట్టమధ్యాహ్నం",
        morning: "ఉదయం",
        afternoon: "మధ్యాహ్నం",
        evening: "సాయంత్రం",
        night: "రాత్రి"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "పూర్వాహ్నం",
        pm: "అపరాహ్నం",
        midnight: "అర్ధరాత్రి",
        noon: "మిట్టమధ్యాహ్నం",
        morning: "ఉదయం",
        afternoon: "మధ్యాహ్నం",
        evening: "సాయంత్రం",
        night: "రాత్రి"
      },
      abbreviated: {
        am: "పూర్వాహ్నం",
        pm: "అపరాహ్నం",
        midnight: "అర్ధరాత్రి",
        noon: "మిట్టమధ్యాహ్నం",
        morning: "ఉదయం",
        afternoon: "మధ్యాహ్నం",
        evening: "సాయంత్రం",
        night: "రాత్రి"
      },
      wide: {
        am: "పూర్వాహ్నం",
        pm: "అపరాహ్నం",
        midnight: "అర్ధరాత్రి",
        noon: "మిట్టమధ్యాహ్నం",
        morning: "ఉదయం",
        afternoon: "మధ్యాహ్నం",
        evening: "సాయంత్రం",
        night: "రాత్రి"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + "వ";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/te/_lib/match.js
var require_match74 = __commonJS({
  "node_modules/date-fns/locale/te/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(వ)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(క్రీ\.పూ\.|క్రీ\.శ\.)/i,
      abbreviated: /^(క్రీ\.?\s?పూ\.?|ప్ర\.?\s?శ\.?\s?పూ\.?|క్రీ\.?\s?శ\.?|సా\.?\s?శ\.?)/i,
      wide: /^(క్రీస్తు పూర్వం|ప్రస్తుత శకానికి పూర్వం|క్రీస్తు శకం|ప్రస్తుత శకం)/i
    };
    var parseEraPatterns = {
      any: [/^(పూ|శ)/i, /^సా/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^త్రై[1234]/i,
      wide: /^[1234](వ)? త్రైమాసికం/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^(జూ|జు|జ|ఫి|మా|ఏ|మే|ఆ|సె|అ|న|డి)/i,
      abbreviated: /^(జన|ఫిబ్ర|మార్చి|ఏప్రి|మే|జూన్|జులై|ఆగ|సెప్|అక్టో|నవ|డిసె)/i,
      wide: /^(జనవరి|ఫిబ్రవరి|మార్చి|ఏప్రిల్|మే|జూన్|జులై|ఆగస్టు|సెప్టెంబర్|అక్టోబర్|నవంబర్|డిసెంబర్)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^జ/i,
        /^ఫి/i,
        /^మా/i,
        /^ఏ/i,
        /^మే/i,
        /^జూ/i,
        /^జు/i,
        /^ఆ/i,
        /^సె/i,
        /^అ/i,
        /^న/i,
        /^డి/i
      ],
      any: [
        /^జన/i,
        /^ఫి/i,
        /^మా/i,
        /^ఏ/i,
        /^మే/i,
        /^జూన్/i,
        /^జులై/i,
        /^ఆగ/i,
        /^సె/i,
        /^అ/i,
        /^న/i,
        /^డి/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(ఆ|సో|మ|బు|గు|శు|శ)/i,
      short: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
      abbreviated: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
      wide: /^(ఆదివారం|సోమవారం|మంగళవారం|బుధవారం|గురువారం|శుక్రవారం|శనివారం)/i
    };
    var parseDayPatterns = {
      narrow: [/^ఆ/i, /^సో/i, /^మ/i, /^బు/i, /^గు/i, /^శు/i, /^శ/i],
      any: [/^ఆది/i, /^సోమ/i, /^మం/i, /^బుధ/i, /^గురు/i, /^శుక్ర/i, /^శని/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i,
      any: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^పూర్వాహ్నం/i,
        pm: /^అపరాహ్నం/i,
        midnight: /^అర్ధ/i,
        noon: /^మిట్ట/i,
        morning: /ఉదయం/i,
        afternoon: /మధ్యాహ్నం/i,
        evening: /సాయంత్రం/i,
        night: /రాత్రి/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/te.js
var require_te = __commonJS({
  "node_modules/date-fns/locale/te.js"(exports) {
    "use strict";
    exports.te = void 0;
    var _index = require_formatDistance76();
    var _index2 = require_formatLong83();
    var _index3 = require_formatRelative76();
    var _index4 = require_localize75();
    var _index5 = require_match74();
    var te = exports.te = {
      code: "te",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/th/_lib/formatDistance.js
var require_formatDistance77 = __commonJS({
  "node_modules/date-fns/locale/th/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "น้อยกว่า 1 วินาที",
        other: "น้อยกว่า {{count}} วินาที"
      },
      xSeconds: {
        one: "1 วินาที",
        other: "{{count}} วินาที"
      },
      halfAMinute: "ครึ่งนาที",
      lessThanXMinutes: {
        one: "น้อยกว่า 1 นาที",
        other: "น้อยกว่า {{count}} นาที"
      },
      xMinutes: {
        one: "1 นาที",
        other: "{{count}} นาที"
      },
      aboutXHours: {
        one: "ประมาณ 1 ชั่วโมง",
        other: "ประมาณ {{count}} ชั่วโมง"
      },
      xHours: {
        one: "1 ชั่วโมง",
        other: "{{count}} ชั่วโมง"
      },
      xDays: {
        one: "1 วัน",
        other: "{{count}} วัน"
      },
      aboutXWeeks: {
        one: "ประมาณ 1 สัปดาห์",
        other: "ประมาณ {{count}} สัปดาห์"
      },
      xWeeks: {
        one: "1 สัปดาห์",
        other: "{{count}} สัปดาห์"
      },
      aboutXMonths: {
        one: "ประมาณ 1 เดือน",
        other: "ประมาณ {{count}} เดือน"
      },
      xMonths: {
        one: "1 เดือน",
        other: "{{count}} เดือน"
      },
      aboutXYears: {
        one: "ประมาณ 1 ปี",
        other: "ประมาณ {{count}} ปี"
      },
      xYears: {
        one: "1 ปี",
        other: "{{count}} ปี"
      },
      overXYears: {
        one: "มากกว่า 1 ปี",
        other: "มากกว่า {{count}} ปี"
      },
      almostXYears: {
        one: "เกือบ 1 ปี",
        other: "เกือบ {{count}} ปี"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          if (token === "halfAMinute") {
            return "ใน" + result;
          } else {
            return "ใน " + result;
          }
        } else {
          return result + "ที่ผ่านมา";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/th/_lib/formatLong.js
var require_formatLong84 = __commonJS({
  "node_modules/date-fns/locale/th/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "วันEEEEที่ do MMMM y",
      long: "do MMMM y",
      medium: "d MMM y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "H:mm:ss น. zzzz",
      long: "H:mm:ss น. z",
      medium: "H:mm:ss น.",
      short: "H:mm น."
    };
    var dateTimeFormats = {
      full: "{{date}} 'เวลา' {{time}}",
      long: "{{date}} 'เวลา' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "medium"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/th/_lib/formatRelative.js
var require_formatRelative77 = __commonJS({
  "node_modules/date-fns/locale/th/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee'ที่แล้วเวลา' p",
      yesterday: "'เมื่อวานนี้เวลา' p",
      today: "'วันนี้เวลา' p",
      tomorrow: "'พรุ่งนี้เวลา' p",
      nextWeek: "eeee 'เวลา' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/th/_lib/localize.js
var require_localize76 = __commonJS({
  "node_modules/date-fns/locale/th/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["B", "คศ"],
      abbreviated: ["BC", "ค.ศ."],
      wide: ["ปีก่อนคริสตกาล", "คริสต์ศักราช"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["ไตรมาสแรก", "ไตรมาสที่สอง", "ไตรมาสที่สาม", "ไตรมาสที่สี่"]
    };
    var dayValues = {
      narrow: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
      short: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
      abbreviated: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
      wide: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"]
    };
    var monthValues = {
      narrow: [
        "ม.ค.",
        "ก.พ.",
        "มี.ค.",
        "เม.ย.",
        "พ.ค.",
        "มิ.ย.",
        "ก.ค.",
        "ส.ค.",
        "ก.ย.",
        "ต.ค.",
        "พ.ย.",
        "ธ.ค."
      ],
      abbreviated: [
        "ม.ค.",
        "ก.พ.",
        "มี.ค.",
        "เม.ย.",
        "พ.ค.",
        "มิ.ย.",
        "ก.ค.",
        "ส.ค.",
        "ก.ย.",
        "ต.ค.",
        "พ.ย.",
        "ธ.ค."
      ],
      wide: [
        "มกราคม",
        "กุมภาพันธ์",
        "มีนาคม",
        "เมษายน",
        "พฤษภาคม",
        "มิถุนายน",
        "กรกฎาคม",
        "สิงหาคม",
        "กันยายน",
        "ตุลาคม",
        "พฤศจิกายน",
        "ธันวาคม"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ก่อนเที่ยง",
        pm: "หลังเที่ยง",
        midnight: "เที่ยงคืน",
        noon: "เที่ยง",
        morning: "เช้า",
        afternoon: "บ่าย",
        evening: "เย็น",
        night: "กลางคืน"
      },
      abbreviated: {
        am: "ก่อนเที่ยง",
        pm: "หลังเที่ยง",
        midnight: "เที่ยงคืน",
        noon: "เที่ยง",
        morning: "เช้า",
        afternoon: "บ่าย",
        evening: "เย็น",
        night: "กลางคืน"
      },
      wide: {
        am: "ก่อนเที่ยง",
        pm: "หลังเที่ยง",
        midnight: "เที่ยงคืน",
        noon: "เที่ยง",
        morning: "เช้า",
        afternoon: "บ่าย",
        evening: "เย็น",
        night: "กลางคืน"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ก่อนเที่ยง",
        pm: "หลังเที่ยง",
        midnight: "เที่ยงคืน",
        noon: "เที่ยง",
        morning: "ตอนเช้า",
        afternoon: "ตอนกลางวัน",
        evening: "ตอนเย็น",
        night: "ตอนกลางคืน"
      },
      abbreviated: {
        am: "ก่อนเที่ยง",
        pm: "หลังเที่ยง",
        midnight: "เที่ยงคืน",
        noon: "เที่ยง",
        morning: "ตอนเช้า",
        afternoon: "ตอนกลางวัน",
        evening: "ตอนเย็น",
        night: "ตอนกลางคืน"
      },
      wide: {
        am: "ก่อนเที่ยง",
        pm: "หลังเที่ยง",
        midnight: "เที่ยงคืน",
        noon: "เที่ยง",
        morning: "ตอนเช้า",
        afternoon: "ตอนกลางวัน",
        evening: "ตอนเย็น",
        night: "ตอนกลางคืน"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/th/_lib/match.js
var require_match75 = __commonJS({
  "node_modules/date-fns/locale/th/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^\d+/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^([bB]|[aA]|คศ)/i,
      abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|ค\.?ศ\.?)/i,
      wide: /^(ก่อนคริสตกาล|คริสต์ศักราช|คริสตกาล)/i
    };
    var parseEraPatterns = {
      any: [/^[bB]/i, /^(^[aA]|ค\.?ศ\.?|คริสตกาล|คริสต์ศักราช|)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^ไตรมาส(ที่)? ?[1234]/i
    };
    var parseQuarterPatterns = {
      any: [/(1|แรก|หนึ่ง)/i, /(2|สอง)/i, /(3|สาม)/i, /(4|สี่)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?)/i,
      abbreviated: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?')/i,
      wide: /^(มกราคม|กุมภาพันธ์|มีนาคม|เมษายน|พฤษภาคม|มิถุนายน|กรกฎาคม|สิงหาคม|กันยายน|ตุลาคม|พฤศจิกายน|ธันวาคม)/i
    };
    var parseMonthPatterns = {
      wide: [
        /^มก/i,
        /^กุม/i,
        /^มี/i,
        /^เม/i,
        /^พฤษ/i,
        /^มิ/i,
        /^กรก/i,
        /^ส/i,
        /^กัน/i,
        /^ต/i,
        /^พฤศ/i,
        /^ธ/i
      ],
      any: [
        /^ม\.?ค\.?/i,
        /^ก\.?พ\.?/i,
        /^มี\.?ค\.?/i,
        /^เม\.?ย\.?/i,
        /^พ\.?ค\.?/i,
        /^มิ\.?ย\.?/i,
        /^ก\.?ค\.?/i,
        /^ส\.?ค\.?/i,
        /^ก\.?ย\.?/i,
        /^ต\.?ค\.?/i,
        /^พ\.?ย\.?/i,
        /^ธ\.?ค\.?/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
      short: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
      abbreviated: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
      wide: /^(อาทิตย์|จันทร์|อังคาร|พุธ|พฤหัสบดี|ศุกร์|เสาร์)/i
    };
    var parseDayPatterns = {
      wide: [/^อา/i, /^จั/i, /^อั/i, /^พุธ/i, /^พฤ/i, /^ศ/i, /^เส/i],
      any: [/^อา/i, /^จ/i, /^อ/i, /^พ(?!ฤ)/i, /^พฤ/i, /^ศ/i, /^ส/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(ก่อนเที่ยง|หลังเที่ยง|เที่ยงคืน|เที่ยง|(ตอน.*?)?.*(เที่ยง|เช้า|บ่าย|เย็น|กลางคืน))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ก่อนเที่ยง/i,
        pm: /^หลังเที่ยง/i,
        midnight: /^เที่ยงคืน/i,
        noon: /^เที่ยง/i,
        morning: /เช้า/i,
        afternoon: /บ่าย/i,
        evening: /เย็น/i,
        night: /กลางคืน/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/th.js
var require_th = __commonJS({
  "node_modules/date-fns/locale/th.js"(exports) {
    "use strict";
    exports.th = void 0;
    var _index = require_formatDistance77();
    var _index2 = require_formatLong84();
    var _index3 = require_formatRelative77();
    var _index4 = require_localize76();
    var _index5 = require_match75();
    var th = exports.th = {
      code: "th",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/tr/_lib/formatDistance.js
var require_formatDistance78 = __commonJS({
  "node_modules/date-fns/locale/tr/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "bir saniyeden az",
        other: "{{count}} saniyeden az"
      },
      xSeconds: {
        one: "1 saniye",
        other: "{{count}} saniye"
      },
      halfAMinute: "yarım dakika",
      lessThanXMinutes: {
        one: "bir dakikadan az",
        other: "{{count}} dakikadan az"
      },
      xMinutes: {
        one: "1 dakika",
        other: "{{count}} dakika"
      },
      aboutXHours: {
        one: "yaklaşık 1 saat",
        other: "yaklaşık {{count}} saat"
      },
      xHours: {
        one: "1 saat",
        other: "{{count}} saat"
      },
      xDays: {
        one: "1 gün",
        other: "{{count}} gün"
      },
      aboutXWeeks: {
        one: "yaklaşık 1 hafta",
        other: "yaklaşık {{count}} hafta"
      },
      xWeeks: {
        one: "1 hafta",
        other: "{{count}} hafta"
      },
      aboutXMonths: {
        one: "yaklaşık 1 ay",
        other: "yaklaşık {{count}} ay"
      },
      xMonths: {
        one: "1 ay",
        other: "{{count}} ay"
      },
      aboutXYears: {
        one: "yaklaşık 1 yıl",
        other: "yaklaşık {{count}} yıl"
      },
      xYears: {
        one: "1 yıl",
        other: "{{count}} yıl"
      },
      overXYears: {
        one: "1 yıldan fazla",
        other: "{{count}} yıldan fazla"
      },
      almostXYears: {
        one: "neredeyse 1 yıl",
        other: "neredeyse {{count}} yıl"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", count.toString());
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " sonra";
        } else {
          return result + " önce";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/tr/_lib/formatLong.js
var require_formatLong85 = __commonJS({
  "node_modules/date-fns/locale/tr/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "d MMMM y EEEE",
      long: "d MMMM y",
      medium: "d MMM y",
      short: "dd.MM.yyyy"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'saat' {{time}}",
      long: "{{date}} 'saat' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/tr/_lib/formatRelative.js
var require_formatRelative78 = __commonJS({
  "node_modules/date-fns/locale/tr/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'geçen hafta' eeee 'saat' p",
      yesterday: "'dün saat' p",
      today: "'bugün saat' p",
      tomorrow: "'yarın saat' p",
      nextWeek: "eeee 'saat' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/tr/_lib/localize.js
var require_localize77 = __commonJS({
  "node_modules/date-fns/locale/tr/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["MÖ", "MS"],
      abbreviated: ["MÖ", "MS"],
      wide: ["Milattan Önce", "Milattan Sonra"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1Ç", "2Ç", "3Ç", "4Ç"],
      wide: ["İlk çeyrek", "İkinci Çeyrek", "Üçüncü çeyrek", "Son çeyrek"]
    };
    var monthValues = {
      narrow: ["O", "Ş", "M", "N", "M", "H", "T", "A", "E", "E", "K", "A"],
      abbreviated: [
        "Oca",
        "Şub",
        "Mar",
        "Nis",
        "May",
        "Haz",
        "Tem",
        "Ağu",
        "Eyl",
        "Eki",
        "Kas",
        "Ara"
      ],
      wide: [
        "Ocak",
        "Şubat",
        "Mart",
        "Nisan",
        "Mayıs",
        "Haziran",
        "Temmuz",
        "Ağustos",
        "Eylül",
        "Ekim",
        "Kasım",
        "Aralık"
      ]
    };
    var dayValues = {
      narrow: ["P", "P", "S", "Ç", "P", "C", "C"],
      short: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"],
      abbreviated: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cts"],
      wide: [
        "Pazar",
        "Pazartesi",
        "Salı",
        "Çarşamba",
        "Perşembe",
        "Cuma",
        "Cumartesi"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "öö",
        pm: "ös",
        midnight: "gy",
        noon: "ö",
        morning: "sa",
        afternoon: "ös",
        evening: "ak",
        night: "ge"
      },
      abbreviated: {
        am: "ÖÖ",
        pm: "ÖS",
        midnight: "gece yarısı",
        noon: "öğle",
        morning: "sabah",
        afternoon: "öğleden sonra",
        evening: "akşam",
        night: "gece"
      },
      wide: {
        am: "Ö.Ö.",
        pm: "Ö.S.",
        midnight: "gece yarısı",
        noon: "öğle",
        morning: "sabah",
        afternoon: "öğleden sonra",
        evening: "akşam",
        night: "gece"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "öö",
        pm: "ös",
        midnight: "gy",
        noon: "ö",
        morning: "sa",
        afternoon: "ös",
        evening: "ak",
        night: "ge"
      },
      abbreviated: {
        am: "ÖÖ",
        pm: "ÖS",
        midnight: "gece yarısı",
        noon: "öğlen",
        morning: "sabahleyin",
        afternoon: "öğleden sonra",
        evening: "akşamleyin",
        night: "geceleyin"
      },
      wide: {
        am: "ö.ö.",
        pm: "ö.s.",
        midnight: "gece yarısı",
        noon: "öğlen",
        morning: "sabahleyin",
        afternoon: "öğleden sonra",
        evening: "akşamleyin",
        night: "geceleyin"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      const number = Number(dirtyNumber);
      return number + ".";
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => Number(quarter) - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/tr/_lib/match.js
var require_match76 = __commonJS({
  "node_modules/date-fns/locale/tr/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(mö|ms)/i,
      abbreviated: /^(mö|ms)/i,
      wide: /^(milattan önce|milattan sonra)/i
    };
    var parseEraPatterns = {
      any: [/(^mö|^milattan önce)/i, /(^ms|^milattan sonra)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]ç/i,
      wide: /^((i|İ)lk|(i|İ)kinci|üçüncü|son) çeyrek/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i],
      abbreviated: [/1ç/i, /2ç/i, /3ç/i, /4ç/i],
      wide: [
        /^(i|İ)lk çeyrek/i,
        /(i|İ)kinci çeyrek/i,
        /üçüncü çeyrek/i,
        /son çeyrek/i
      ]
    };
    var matchMonthPatterns = {
      narrow: /^[oşmnhtaek]/i,
      abbreviated: /^(oca|şub|mar|nis|may|haz|tem|ağu|eyl|eki|kas|ara)/i,
      wide: /^(ocak|şubat|mart|nisan|mayıs|haziran|temmuz|ağustos|eylül|ekim|kasım|aralık)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^o/i,
        /^ş/i,
        /^m/i,
        /^n/i,
        /^m/i,
        /^h/i,
        /^t/i,
        /^a/i,
        /^e/i,
        /^e/i,
        /^k/i,
        /^a/i
      ],
      any: [
        /^o/i,
        /^ş/i,
        /^mar/i,
        /^n/i,
        /^may/i,
        /^h/i,
        /^t/i,
        /^ağ/i,
        /^ey/i,
        /^ek/i,
        /^k/i,
        /^ar/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[psçc]/i,
      short: /^(pz|pt|sa|ça|pe|cu|ct)/i,
      abbreviated: /^(paz|pzt|sal|çar|per|cum|cts)/i,
      wide: /^(pazar(?!tesi)|pazartesi|salı|çarşamba|perşembe|cuma(?!rtesi)|cumartesi)/i
    };
    var parseDayPatterns = {
      narrow: [/^p/i, /^p/i, /^s/i, /^ç/i, /^p/i, /^c/i, /^c/i],
      any: [/^pz/i, /^pt/i, /^sa/i, /^ça/i, /^pe/i, /^cu/i, /^ct/i],
      wide: [
        /^pazar(?!tesi)/i,
        /^pazartesi/i,
        /^salı/i,
        /^çarşamba/i,
        /^perşembe/i,
        /^cuma(?!rtesi)/i,
        /^cumartesi/i
      ]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(öö|ös|gy|ö|sa|ös|ak|ge)/i,
      any: /^(ö\.?\s?[ös]\.?|öğleden sonra|gece yarısı|öğle|(sabah|öğ|akşam|gece)(leyin))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ö\.?ö\.?/i,
        pm: /^ö\.?s\.?/i,
        midnight: /^(gy|gece yarısı)/i,
        noon: /^öğ/i,
        morning: /^sa/i,
        afternoon: /^öğleden sonra/i,
        evening: /^ak/i,
        night: /^ge/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
          return parseInt(value, 10);
        }
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/tr.js
var require_tr = __commonJS({
  "node_modules/date-fns/locale/tr.js"(exports) {
    "use strict";
    exports.tr = void 0;
    var _index = require_formatDistance78();
    var _index2 = require_formatLong85();
    var _index3 = require_formatRelative78();
    var _index4 = require_localize77();
    var _index5 = require_match76();
    var tr = exports.tr = {
      code: "tr",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/ug/_lib/formatDistance.js
var require_formatDistance79 = __commonJS({
  "node_modules/date-fns/locale/ug/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "بىر سىكۇنت ئىچىدە",
        other: "سىكۇنت ئىچىدە {{count}}"
      },
      xSeconds: {
        one: "بىر سىكۇنت",
        other: "سىكۇنت {{count}}"
      },
      halfAMinute: "يىرىم مىنۇت",
      lessThanXMinutes: {
        one: "بىر مىنۇت ئىچىدە",
        other: "مىنۇت ئىچىدە {{count}}"
      },
      xMinutes: {
        one: "بىر مىنۇت",
        other: "مىنۇت {{count}}"
      },
      aboutXHours: {
        one: "تەخمىنەن بىر سائەت",
        other: "سائەت {{count}} تەخمىنەن"
      },
      xHours: {
        one: "بىر سائەت",
        other: "سائەت {{count}}"
      },
      xDays: {
        one: "بىر كۈن",
        other: "كۈن {{count}}"
      },
      aboutXWeeks: {
        one: "تەخمىنەن بىرھەپتە",
        other: "ھەپتە {{count}} تەخمىنەن"
      },
      xWeeks: {
        one: "بىرھەپتە",
        other: "ھەپتە {{count}}"
      },
      aboutXMonths: {
        one: "تەخمىنەن بىر ئاي",
        other: "ئاي {{count}} تەخمىنەن"
      },
      xMonths: {
        one: "بىر ئاي",
        other: "ئاي {{count}}"
      },
      aboutXYears: {
        one: "تەخمىنەن بىر يىل",
        other: "يىل {{count}} تەخمىنەن"
      },
      xYears: {
        one: "بىر يىل",
        other: "يىل {{count}}"
      },
      overXYears: {
        one: "بىر يىلدىن ئارتۇق",
        other: "يىلدىن ئارتۇق {{count}}"
      },
      almostXYears: {
        one: "ئاساسەن بىر يىل",
        other: "يىل {{count}} ئاساسەن"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result;
        } else {
          return result + " بولدى";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/ug/_lib/formatLong.js
var require_formatLong86 = __commonJS({
  "node_modules/date-fns/locale/ug/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, MMMM do, y",
      long: "MMMM do, y",
      medium: "MMM d, y",
      short: "MM/dd/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss a zzzz",
      long: "h:mm:ss a z",
      medium: "h:mm:ss a",
      short: "h:mm a"
    };
    var dateTimeFormats = {
      full: "{{date}} 'دە' {{time}}",
      long: "{{date}} 'دە' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/ug/_lib/formatRelative.js
var require_formatRelative79 = __commonJS({
  "node_modules/date-fns/locale/ug/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'ئ‍ۆتكەن' eeee 'دە' p",
      yesterday: "'تۈنۈگۈن دە' p",
      today: "'بۈگۈن دە' p",
      tomorrow: "'ئەتە دە' p",
      nextWeek: "eeee 'دە' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/ug/_lib/localize.js
var require_localize78 = __commonJS({
  "node_modules/date-fns/locale/ug/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["ب", "ك"],
      abbreviated: ["ب", "ك"],
      wide: ["مىيلادىدىن بۇرۇن", "مىيلادىدىن كىيىن"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1", "2", "3", "4"],
      wide: ["بىرىنجى چارەك", "ئىككىنجى چارەك", "ئۈچىنجى چارەك", "تۆتىنجى چارەك"]
    };
    var monthValues = {
      narrow: ["ي", "ف", "م", "ا", "م", "ى", "ى", "ا", "س", "ۆ", "ن", "د"],
      abbreviated: [
        "يانۋار",
        "فېۋىرال",
        "مارت",
        "ئاپرىل",
        "ماي",
        "ئىيۇن",
        "ئىيول",
        "ئاۋغۇست",
        "سىنتەبىر",
        "ئۆكتەبىر",
        "نويابىر",
        "دىكابىر"
      ],
      wide: [
        "يانۋار",
        "فېۋىرال",
        "مارت",
        "ئاپرىل",
        "ماي",
        "ئىيۇن",
        "ئىيول",
        "ئاۋغۇست",
        "سىنتەبىر",
        "ئۆكتەبىر",
        "نويابىر",
        "دىكابىر"
      ]
    };
    var dayValues = {
      narrow: ["ي", "د", "س", "چ", "پ", "ج", "ش"],
      short: ["ي", "د", "س", "چ", "پ", "ج", "ش"],
      abbreviated: [
        "يەكشەنبە",
        "دۈشەنبە",
        "سەيشەنبە",
        "چارشەنبە",
        "پەيشەنبە",
        "جۈمە",
        "شەنبە"
      ],
      wide: [
        "يەكشەنبە",
        "دۈشەنبە",
        "سەيشەنبە",
        "چارشەنبە",
        "پەيشەنبە",
        "جۈمە",
        "شەنبە"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ئە",
        pm: "چ",
        midnight: "ك",
        noon: "چ",
        morning: "ئەتىگەن",
        afternoon: "چۈشتىن كىيىن",
        evening: "ئاخشىم",
        night: "كىچە"
      },
      abbreviated: {
        am: "ئە",
        pm: "چ",
        midnight: "ك",
        noon: "چ",
        morning: "ئەتىگەن",
        afternoon: "چۈشتىن كىيىن",
        evening: "ئاخشىم",
        night: "كىچە"
      },
      wide: {
        am: "ئە",
        pm: "چ",
        midnight: "ك",
        noon: "چ",
        morning: "ئەتىگەن",
        afternoon: "چۈشتىن كىيىن",
        evening: "ئاخشىم",
        night: "كىچە"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ئە",
        pm: "چ",
        midnight: "ك",
        noon: "چ",
        morning: "ئەتىگەندە",
        afternoon: "چۈشتىن كىيىن",
        evening: "ئاخشامدا",
        night: "كىچىدە"
      },
      abbreviated: {
        am: "ئە",
        pm: "چ",
        midnight: "ك",
        noon: "چ",
        morning: "ئەتىگەندە",
        afternoon: "چۈشتىن كىيىن",
        evening: "ئاخشامدا",
        night: "كىچىدە"
      },
      wide: {
        am: "ئە",
        pm: "چ",
        midnight: "ك",
        noon: "چ",
        morning: "ئەتىگەندە",
        afternoon: "چۈشتىن كىيىن",
        evening: "ئاخشامدا",
        night: "كىچىدە"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/ug/_lib/match.js
var require_match77 = __commonJS({
  "node_modules/date-fns/locale/ug/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(ب|ك)/i,
      wide: /^(مىيلادىدىن بۇرۇن|مىيلادىدىن كىيىن)/i
    };
    var parseEraPatterns = {
      any: [/^بۇرۇن/i, /^كىيىن/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^چ[1234]/i,
      wide: /^چارەك [1234]/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      // eslint-disable-next-line no-misleading-character-class
      narrow: /^[يفمئامئ‍ئاسۆند]/i,
      abbreviated: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i,
      wide: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^ا/i,
        /^م/i,
        /^ى‍/i,
        /^ى‍/i,
        /^ا‍/i,
        /^س/i,
        /^ۆ/i,
        /^ن/i,
        /^د/i
      ],
      any: [
        /^يان/i,
        /^فېۋ/i,
        /^مار/i,
        /^ئاپ/i,
        /^ماي/i,
        /^ئىيۇن/i,
        /^ئىيول/i,
        /^ئاۋ/i,
        /^سىن/i,
        /^ئۆك/i,
        /^نوي/i,
        /^دىك/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[دسچپجشي]/i,
      short: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
      abbreviated: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
      wide: /^(يەكشەنبە|دۈشەنبە|سەيشەنبە|چارشەنبە|پەيشەنبە|جۈمە|شەنبە)/i
    };
    var parseDayPatterns = {
      narrow: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
      any: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i,
      any: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^ئە/i,
        pm: /^چ/i,
        midnight: /^ك/i,
        noon: /^چ/i,
        morning: /ئەتىگەن/i,
        afternoon: /چۈشتىن كىيىن/i,
        evening: /ئاخشىم/i,
        night: /كىچە/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/ug.js
var require_ug = __commonJS({
  "node_modules/date-fns/locale/ug.js"(exports) {
    "use strict";
    exports.ug = void 0;
    var _index = require_formatDistance79();
    var _index2 = require_formatLong86();
    var _index3 = require_formatRelative79();
    var _index4 = require_localize78();
    var _index5 = require_match77();
    var ug = exports.ug = {
      code: "ug",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/uk/_lib/formatDistance.js
var require_formatDistance80 = __commonJS({
  "node_modules/date-fns/locale/uk/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    function declension(scheme, count) {
      if (scheme.one !== void 0 && count === 1) {
        return scheme.one;
      }
      const rem10 = count % 10;
      const rem100 = count % 100;
      if (rem10 === 1 && rem100 !== 11) {
        return scheme.singularNominative.replace("{{count}}", String(count));
      } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
        return scheme.singularGenitive.replace("{{count}}", String(count));
      } else {
        return scheme.pluralGenitive.replace("{{count}}", String(count));
      }
    }
    function buildLocalizeTokenFn(scheme) {
      return (count, options) => {
        if (options && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            if (scheme.future) {
              return declension(scheme.future, count);
            } else {
              return "за " + declension(scheme.regular, count);
            }
          } else {
            if (scheme.past) {
              return declension(scheme.past, count);
            } else {
              return declension(scheme.regular, count) + " тому";
            }
          }
        } else {
          return declension(scheme.regular, count);
        }
      };
    }
    var halfAtMinute = (_, options) => {
      if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return "за півхвилини";
        } else {
          return "півхвилини тому";
        }
      }
      return "півхвилини";
    };
    var formatDistanceLocale = {
      lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
          one: "менше секунди",
          singularNominative: "менше {{count}} секунди",
          singularGenitive: "менше {{count}} секунд",
          pluralGenitive: "менше {{count}} секунд"
        },
        future: {
          one: "менше, ніж за секунду",
          singularNominative: "менше, ніж за {{count}} секунду",
          singularGenitive: "менше, ніж за {{count}} секунди",
          pluralGenitive: "менше, ніж за {{count}} секунд"
        }
      }),
      xSeconds: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} секунда",
          singularGenitive: "{{count}} секунди",
          pluralGenitive: "{{count}} секунд"
        },
        past: {
          singularNominative: "{{count}} секунду тому",
          singularGenitive: "{{count}} секунди тому",
          pluralGenitive: "{{count}} секунд тому"
        },
        future: {
          singularNominative: "за {{count}} секунду",
          singularGenitive: "за {{count}} секунди",
          pluralGenitive: "за {{count}} секунд"
        }
      }),
      halfAMinute: halfAtMinute,
      lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
          one: "менше хвилини",
          singularNominative: "менше {{count}} хвилини",
          singularGenitive: "менше {{count}} хвилин",
          pluralGenitive: "менше {{count}} хвилин"
        },
        future: {
          one: "менше, ніж за хвилину",
          singularNominative: "менше, ніж за {{count}} хвилину",
          singularGenitive: "менше, ніж за {{count}} хвилини",
          pluralGenitive: "менше, ніж за {{count}} хвилин"
        }
      }),
      xMinutes: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} хвилина",
          singularGenitive: "{{count}} хвилини",
          pluralGenitive: "{{count}} хвилин"
        },
        past: {
          singularNominative: "{{count}} хвилину тому",
          singularGenitive: "{{count}} хвилини тому",
          pluralGenitive: "{{count}} хвилин тому"
        },
        future: {
          singularNominative: "за {{count}} хвилину",
          singularGenitive: "за {{count}} хвилини",
          pluralGenitive: "за {{count}} хвилин"
        }
      }),
      aboutXHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "близько {{count}} години",
          singularGenitive: "близько {{count}} годин",
          pluralGenitive: "близько {{count}} годин"
        },
        future: {
          singularNominative: "приблизно за {{count}} годину",
          singularGenitive: "приблизно за {{count}} години",
          pluralGenitive: "приблизно за {{count}} годин"
        }
      }),
      xHours: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} годину",
          singularGenitive: "{{count}} години",
          pluralGenitive: "{{count}} годин"
        }
      }),
      xDays: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} день",
          singularGenitive: "{{count}} днi",
          pluralGenitive: "{{count}} днів"
        }
      }),
      aboutXWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "близько {{count}} тижня",
          singularGenitive: "близько {{count}} тижнів",
          pluralGenitive: "близько {{count}} тижнів"
        },
        future: {
          singularNominative: "приблизно за {{count}} тиждень",
          singularGenitive: "приблизно за {{count}} тижні",
          pluralGenitive: "приблизно за {{count}} тижнів"
        }
      }),
      xWeeks: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} тиждень",
          singularGenitive: "{{count}} тижні",
          pluralGenitive: "{{count}} тижнів"
        }
      }),
      aboutXMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "близько {{count}} місяця",
          singularGenitive: "близько {{count}} місяців",
          pluralGenitive: "близько {{count}} місяців"
        },
        future: {
          singularNominative: "приблизно за {{count}} місяць",
          singularGenitive: "приблизно за {{count}} місяці",
          pluralGenitive: "приблизно за {{count}} місяців"
        }
      }),
      xMonths: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} місяць",
          singularGenitive: "{{count}} місяці",
          pluralGenitive: "{{count}} місяців"
        }
      }),
      aboutXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "близько {{count}} року",
          singularGenitive: "близько {{count}} років",
          pluralGenitive: "близько {{count}} років"
        },
        future: {
          singularNominative: "приблизно за {{count}} рік",
          singularGenitive: "приблизно за {{count}} роки",
          pluralGenitive: "приблизно за {{count}} років"
        }
      }),
      xYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "{{count}} рік",
          singularGenitive: "{{count}} роки",
          pluralGenitive: "{{count}} років"
        }
      }),
      overXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "більше {{count}} року",
          singularGenitive: "більше {{count}} років",
          pluralGenitive: "більше {{count}} років"
        },
        future: {
          singularNominative: "більше, ніж за {{count}} рік",
          singularGenitive: "більше, ніж за {{count}} роки",
          pluralGenitive: "більше, ніж за {{count}} років"
        }
      }),
      almostXYears: buildLocalizeTokenFn({
        regular: {
          singularNominative: "майже {{count}} рік",
          singularGenitive: "майже {{count}} роки",
          pluralGenitive: "майже {{count}} років"
        },
        future: {
          singularNominative: "майже за {{count}} рік",
          singularGenitive: "майже за {{count}} роки",
          pluralGenitive: "майже за {{count}} років"
        }
      })
    };
    var formatDistance = (token, count, options) => {
      options = options || {};
      return formatDistanceLocale[token](count, options);
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/uk/_lib/formatLong.js
var require_formatLong87 = __commonJS({
  "node_modules/date-fns/locale/uk/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM y 'р.'",
      long: "do MMMM y 'р.'",
      medium: "d MMM y 'р.'",
      short: "dd.MM.y"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} 'о' {{time}}",
      long: "{{date}} 'о' {{time}}",
      medium: "{{date}}, {{time}}",
      short: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/uk/_lib/formatRelative.js
var require_formatRelative80 = __commonJS({
  "node_modules/date-fns/locale/uk/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    var _index2 = require_toDate();
    var accusativeWeekdays = [
      "неділю",
      "понеділок",
      "вівторок",
      "середу",
      "четвер",
      "п’ятницю",
      "суботу"
    ];
    function lastWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у минулу " + weekday + " о' p";
        case 1:
        case 2:
        case 4:
          return "'у минулий " + weekday + " о' p";
      }
    }
    function thisWeek(day) {
      const weekday = accusativeWeekdays[day];
      return "'у " + weekday + " о' p";
    }
    function nextWeek(day) {
      const weekday = accusativeWeekdays[day];
      switch (day) {
        case 0:
        case 3:
        case 5:
        case 6:
          return "'у наступну " + weekday + " о' p";
        case 1:
        case 2:
        case 4:
          return "'у наступний " + weekday + " о' p";
      }
    }
    var lastWeekFormat = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return lastWeek(day);
      }
    };
    var nextWeekFormat = (dirtyDate, baseDate, options) => {
      const date = (0, _index2.toDate)(dirtyDate);
      const day = date.getDay();
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return thisWeek(day);
      } else {
        return nextWeek(day);
      }
    };
    var formatRelativeLocale = {
      lastWeek: lastWeekFormat,
      yesterday: "'вчора о' p",
      today: "'сьогодні о' p",
      tomorrow: "'завтра о' p",
      nextWeek: nextWeekFormat,
      other: "P"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/uk/_lib/localize.js
var require_localize79 = __commonJS({
  "node_modules/date-fns/locale/uk/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["до н.е.", "н.е."],
      abbreviated: ["до н. е.", "н. е."],
      wide: ["до нашої ери", "нашої ери"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-й кв.", "2-й кв.", "3-й кв.", "4-й кв."],
      wide: ["1-й квартал", "2-й квартал", "3-й квартал", "4-й квартал"]
    };
    var monthValues = {
      // ДСТУ 3582:2013
      narrow: ["С", "Л", "Б", "К", "Т", "Ч", "Л", "С", "В", "Ж", "Л", "Г"],
      abbreviated: [
        "січ.",
        "лют.",
        "берез.",
        "квіт.",
        "трав.",
        "черв.",
        "лип.",
        "серп.",
        "верес.",
        "жовт.",
        "листоп.",
        "груд."
      ],
      wide: [
        "січень",
        "лютий",
        "березень",
        "квітень",
        "травень",
        "червень",
        "липень",
        "серпень",
        "вересень",
        "жовтень",
        "листопад",
        "грудень"
      ]
    };
    var formattingMonthValues = {
      narrow: ["С", "Л", "Б", "К", "Т", "Ч", "Л", "С", "В", "Ж", "Л", "Г"],
      abbreviated: [
        "січ.",
        "лют.",
        "берез.",
        "квіт.",
        "трав.",
        "черв.",
        "лип.",
        "серп.",
        "верес.",
        "жовт.",
        "листоп.",
        "груд."
      ],
      wide: [
        "січня",
        "лютого",
        "березня",
        "квітня",
        "травня",
        "червня",
        "липня",
        "серпня",
        "вересня",
        "жовтня",
        "листопада",
        "грудня"
      ]
    };
    var dayValues = {
      narrow: ["Н", "П", "В", "С", "Ч", "П", "С"],
      short: ["нд", "пн", "вт", "ср", "чт", "пт", "сб"],
      abbreviated: ["нед", "пон", "вів", "сер", "чтв", "птн", "суб"],
      wide: [
        "неділя",
        "понеділок",
        "вівторок",
        "середа",
        "четвер",
        "п’ятниця",
        "субота"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "півн.",
        noon: "пол.",
        morning: "ранок",
        afternoon: "день",
        evening: "веч.",
        night: "ніч"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "півн.",
        noon: "пол.",
        morning: "ранок",
        afternoon: "день",
        evening: "веч.",
        night: "ніч"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "північ",
        noon: "полудень",
        morning: "ранок",
        afternoon: "день",
        evening: "вечір",
        night: "ніч"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "ДП",
        pm: "ПП",
        midnight: "півн.",
        noon: "пол.",
        morning: "ранку",
        afternoon: "дня",
        evening: "веч.",
        night: "ночі"
      },
      abbreviated: {
        am: "ДП",
        pm: "ПП",
        midnight: "півн.",
        noon: "пол.",
        morning: "ранку",
        afternoon: "дня",
        evening: "веч.",
        night: "ночі"
      },
      wide: {
        am: "ДП",
        pm: "ПП",
        midnight: "північ",
        noon: "полудень",
        morning: "ранку",
        afternoon: "дня",
        evening: "веч.",
        night: "ночі"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const unit = String(options == null ? void 0 : options.unit);
      const number = Number(dirtyNumber);
      let suffix;
      if (unit === "date") {
        if (number === 3 || number === 23) {
          suffix = "-є";
        } else {
          suffix = "-е";
        }
      } else if (unit === "minute" || unit === "second" || unit === "hour") {
        suffix = "-а";
      } else {
        suffix = "-й";
      }
      return number + suffix;
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/uk/_lib/match.js
var require_match78 = __commonJS({
  "node_modules/date-fns/locale/uk/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(-?(е|й|є|а|я))?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^((до )?н\.?\s?е\.?)/i,
      abbreviated: /^((до )?н\.?\s?е\.?)/i,
      wide: /^(до нашої ери|нашої ери|наша ера)/i
    };
    var parseEraPatterns = {
      any: [/^д/i, /^н/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234](-?[иі]?й?)? кв.?/i,
      wide: /^[1234](-?[иі]?й?)? квартал/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[слбктчвжг]/i,
      abbreviated: /^(січ|лют|бер(ез)?|квіт|трав|черв|лип|серп|вер(ес)?|жовт|лис(топ)?|груд)\.?/i,
      wide: /^(січень|січня|лютий|лютого|березень|березня|квітень|квітня|травень|травня|червня|червень|липень|липня|серпень|серпня|вересень|вересня|жовтень|жовтня|листопад[а]?|грудень|грудня)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^с/i,
        /^л/i,
        /^б/i,
        /^к/i,
        /^т/i,
        /^ч/i,
        /^л/i,
        /^с/i,
        /^в/i,
        /^ж/i,
        /^л/i,
        /^г/i
      ],
      any: [
        /^сі/i,
        /^лю/i,
        /^б/i,
        /^к/i,
        /^т/i,
        /^ч/i,
        /^лип/i,
        /^се/i,
        /^в/i,
        /^ж/i,
        /^лис/i,
        /^г/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[нпвсч]/i,
      short: /^(нд|пн|вт|ср|чт|пт|сб)\.?/i,
      abbreviated: /^(нед|пон|вів|сер|че?тв|птн?|суб)\.?/i,
      wide: /^(неділ[яі]|понеділ[ок][ка]|вівтор[ок][ка]|серед[аи]|четвер(га)?|п\W*?ятниц[яі]|субот[аи])/i
    };
    var parseDayPatterns = {
      narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
      any: [/^н/i, /^п[он]/i, /^в/i, /^с[ер]/i, /^ч/i, /^п\W*?[ят]/i, /^с[уб]/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
      abbreviated: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
      wide: /^([дп]п|північ|полудень|ранок|ранку|день|дня|вечір|вечора|ніч|ночі)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^півн/i,
        noon: /^пол/i,
        morning: /^р/i,
        afternoon: /^д[ен]/i,
        evening: /^в/i,
        night: /^н/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/uk.js
var require_uk = __commonJS({
  "node_modules/date-fns/locale/uk.js"(exports) {
    "use strict";
    exports.uk = void 0;
    var _index = require_formatDistance80();
    var _index2 = require_formatLong87();
    var _index3 = require_formatRelative80();
    var _index4 = require_localize79();
    var _index5 = require_match78();
    var uk = exports.uk = {
      code: "uk",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/uz/_lib/formatDistance.js
var require_formatDistance81 = __commonJS({
  "node_modules/date-fns/locale/uz/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "sekunddan kam",
        other: "{{count}} sekunddan kam"
      },
      xSeconds: {
        one: "1 sekund",
        other: "{{count}} sekund"
      },
      halfAMinute: "yarim minut",
      lessThanXMinutes: {
        one: "bir minutdan kam",
        other: "{{count}} minutdan kam"
      },
      xMinutes: {
        one: "1 minut",
        other: "{{count}} minut"
      },
      aboutXHours: {
        one: "tahminan 1 soat",
        other: "tahminan {{count}} soat"
      },
      xHours: {
        one: "1 soat",
        other: "{{count}} soat"
      },
      xDays: {
        one: "1 kun",
        other: "{{count}} kun"
      },
      aboutXWeeks: {
        one: "tahminan 1 hafta",
        other: "tahminan {{count}} hafta"
      },
      xWeeks: {
        one: "1 hafta",
        other: "{{count}} hafta"
      },
      aboutXMonths: {
        one: "tahminan 1 oy",
        other: "tahminan {{count}} oy"
      },
      xMonths: {
        one: "1 oy",
        other: "{{count}} oy"
      },
      aboutXYears: {
        one: "tahminan 1 yil",
        other: "tahminan {{count}} yil"
      },
      xYears: {
        one: "1 yil",
        other: "{{count}} yil"
      },
      overXYears: {
        one: "1 yildan ko'p",
        other: "{{count}} yildan ko'p"
      },
      almostXYears: {
        one: "deyarli 1 yil",
        other: "deyarli {{count}} yil"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " dan keyin";
        } else {
          return result + " oldin";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/uz/_lib/formatLong.js
var require_formatLong88 = __commonJS({
  "node_modules/date-fns/locale/uz/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM, y",
      long: "do MMMM, y",
      medium: "d MMM, y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "h:mm:ss zzzz",
      long: "h:mm:ss z",
      medium: "h:mm:ss",
      short: "h:mm"
    };
    var dateTimeFormats = {
      any: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/uz/_lib/formatRelative.js
var require_formatRelative81 = __commonJS({
  "node_modules/date-fns/locale/uz/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'oldingi' eeee p 'da'",
      yesterday: "'kecha' p 'da'",
      today: "'bugun' p 'da'",
      tomorrow: "'ertaga' p 'da'",
      nextWeek: "eeee p 'da'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/uz/_lib/localize.js
var require_localize80 = __commonJS({
  "node_modules/date-fns/locale/uz/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["M.A", "M."],
      abbreviated: ["M.A", "M."],
      wide: ["Miloddan Avvalgi", "Milodiy"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["CH.1", "CH.2", "CH.3", "CH.4"],
      wide: ["1-chi chorak", "2-chi chorak", "3-chi chorak", "4-chi chorak"]
    };
    var monthValues = {
      narrow: ["Y", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"],
      abbreviated: [
        "Yan",
        "Fev",
        "Mar",
        "Apr",
        "May",
        "Iyun",
        "Iyul",
        "Avg",
        "Sen",
        "Okt",
        "Noy",
        "Dek"
      ],
      wide: [
        "Yanvar",
        "Fevral",
        "Mart",
        "Aprel",
        "May",
        "Iyun",
        "Iyul",
        "Avgust",
        "Sentabr",
        "Oktabr",
        "Noyabr",
        "Dekabr"
      ]
    };
    var dayValues = {
      narrow: ["Y", "D", "S", "CH", "P", "J", "SH"],
      short: ["Ya", "Du", "Se", "Cho", "Pa", "Ju", "Sha"],
      abbreviated: ["Yak", "Dush", "Sesh", "Chor", "Pay", "Jum", "Shan"],
      wide: [
        "Yakshanba",
        "Dushanba",
        "Seshanba",
        "Chorshanba",
        "Payshanba",
        "Juma",
        "Shanba"
      ]
    };
    var dayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "y.t",
        noon: "p.",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "a",
        pm: "p",
        midnight: "y.t",
        noon: "p.",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
      },
      wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/uz/_lib/match.js
var require_match79 = __commonJS({
  "node_modules/date-fns/locale/uz/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(chi)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(m\.a|m\.)/i,
      abbreviated: /^(m\.a\.?\s?m\.?)/i,
      wide: /^(miloddan avval|miloddan keyin)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](chi)? chorak/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[yfmasond]/i,
      abbreviated: /^(yan|fev|mar|apr|may|iyun|iyul|avg|sen|okt|noy|dek)/i,
      wide: /^(yanvar|fevral|mart|aprel|may|iyun|iyul|avgust|sentabr|oktabr|noyabr|dekabr)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^y/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^i/i,
        /^i/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ],
      any: [
        /^ya/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^may/i,
        /^iyun/i,
        /^iyul/i,
        /^av/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[ydschj]/i,
      short: /^(ya|du|se|cho|pa|ju|sha)/i,
      abbreviated: /^(yak|dush|sesh|chor|pay|jum|shan)/i,
      wide: /^(yakshanba|dushanba|seshanba|chorshanba|payshanba|juma|shanba)/i
    };
    var parseDayPatterns = {
      narrow: [/^y/i, /^d/i, /^s/i, /^ch/i, /^p/i, /^j/i, /^sh/i],
      any: [/^ya/i, /^d/i, /^se/i, /^ch/i, /^p/i, /^j/i, /^sh/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|y\.t|p| (ertalab|tushdan keyin|kechqurun|tun))/i,
      any: /^([ap]\.?\s?m\.?|yarim tun|peshin| (ertalab|tushdan keyin|kechqurun|tun))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^y\.t/i,
        noon: /^pe/i,
        morning: /ertalab/i,
        afternoon: /tushdan keyin/i,
        evening: /kechqurun/i,
        night: /tun/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/uz.js
var require_uz = __commonJS({
  "node_modules/date-fns/locale/uz.js"(exports) {
    "use strict";
    exports.uz = void 0;
    var _index = require_formatDistance81();
    var _index2 = require_formatLong88();
    var _index3 = require_formatRelative81();
    var _index4 = require_localize80();
    var _index5 = require_match79();
    var uz = exports.uz = {
      code: "uz",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/uz-Cyrl/_lib/formatDistance.js
var require_formatDistance82 = __commonJS({
  "node_modules/date-fns/locale/uz-Cyrl/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "1 сониядан кам",
        other: "{{count}} сониядан кам"
      },
      xSeconds: {
        one: "1 сония",
        other: "{{count}} сония"
      },
      halfAMinute: "ярим дақиқа",
      lessThanXMinutes: {
        one: "1 дақиқадан кам",
        other: "{{count}} дақиқадан кам"
      },
      xMinutes: {
        one: "1 дақиқа",
        other: "{{count}} дақиқа"
      },
      aboutXHours: {
        one: "тахминан 1 соат",
        other: "тахминан {{count}} соат"
      },
      xHours: {
        one: "1 соат",
        other: "{{count}} соат"
      },
      xDays: {
        one: "1 кун",
        other: "{{count}} кун"
      },
      aboutXWeeks: {
        one: "тахминан 1 хафта",
        other: "тахминан {{count}} хафта"
      },
      xWeeks: {
        one: "1 хафта",
        other: "{{count}} хафта"
      },
      aboutXMonths: {
        one: "тахминан 1 ой",
        other: "тахминан {{count}} ой"
      },
      xMonths: {
        one: "1 ой",
        other: "{{count}} ой"
      },
      aboutXYears: {
        one: "тахминан 1 йил",
        other: "тахминан {{count}} йил"
      },
      xYears: {
        one: "1 йил",
        other: "{{count}} йил"
      },
      overXYears: {
        one: "1 йилдан кўп",
        other: "{{count}} йилдан кўп"
      },
      almostXYears: {
        one: "деярли 1 йил",
        other: "деярли {{count}} йил"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "дан кейин";
        } else {
          return result + " олдин";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/uz-Cyrl/_lib/formatLong.js
var require_formatLong89 = __commonJS({
  "node_modules/date-fns/locale/uz-Cyrl/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "EEEE, do MMMM, y",
      long: "do MMMM, y",
      medium: "d MMM, y",
      short: "dd/MM/yyyy"
    };
    var timeFormats = {
      full: "H:mm:ss zzzz",
      long: "H:mm:ss z",
      medium: "H:mm:ss",
      short: "H:mm"
    };
    var dateTimeFormats = {
      any: "{{date}}, {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/uz-Cyrl/_lib/formatRelative.js
var require_formatRelative82 = __commonJS({
  "node_modules/date-fns/locale/uz-Cyrl/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'ўтган' eeee p 'да'",
      yesterday: "'кеча' p 'да'",
      today: "'бугун' p 'да'",
      tomorrow: "'эртага' p 'да'",
      nextWeek: "eeee p 'да'",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/uz-Cyrl/_lib/localize.js
var require_localize81 = __commonJS({
  "node_modules/date-fns/locale/uz-Cyrl/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["М.А", "М"],
      abbreviated: ["М.А", "М"],
      wide: ["Милоддан Аввалги", "Милодий"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["1-чор.", "2-чор.", "3-чор.", "4-чор."],
      wide: ["1-чорак", "2-чорак", "3-чорак", "4-чорак"]
    };
    var monthValues = {
      narrow: ["Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д"],
      abbreviated: [
        "янв",
        "фев",
        "мар",
        "апр",
        "май",
        "июн",
        "июл",
        "авг",
        "сен",
        "окт",
        "ноя",
        "дек"
      ],
      wide: [
        "январ",
        "феврал",
        "март",
        "апрел",
        "май",
        "июн",
        "июл",
        "август",
        "сентабр",
        "октабр",
        "ноябр",
        "декабр"
      ]
    };
    var dayValues = {
      narrow: ["Я", "Д", "С", "Ч", "П", "Ж", "Ш"],
      short: ["як", "ду", "се", "чо", "па", "жу", "ша"],
      abbreviated: ["якш", "душ", "сеш", "чор", "пай", "жум", "шан"],
      wide: [
        "якшанба",
        "душанба",
        "сешанба",
        "чоршанба",
        "пайшанба",
        "жума",
        "шанба"
      ]
    };
    var dayPeriodValues = {
      any: {
        am: "П.О.",
        pm: "П.К.",
        midnight: "ярим тун",
        noon: "пешин",
        morning: "эрталаб",
        afternoon: "пешиндан кейин",
        evening: "кечаси",
        night: "тун"
      }
    };
    var formattingDayPeriodValues = {
      any: {
        am: "П.О.",
        pm: "П.К.",
        midnight: "ярим тун",
        noon: "пешин",
        morning: "эрталаб",
        afternoon: "пешиндан кейин",
        evening: "кечаси",
        night: "тун"
      }
    };
    var ordinalNumber = (dirtyNumber, _options) => {
      return String(dirtyNumber);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/uz-Cyrl/_lib/match.js
var require_match80 = __commonJS({
  "node_modules/date-fns/locale/uz-Cyrl/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)(чи)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(м\.а|м\.)/i,
      abbreviated: /^(м\.а|м\.)/i,
      wide: /^(милоддан аввал|милоддан кейин)/i
    };
    var parseEraPatterns = {
      any: [/^м/i, /^а/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^[1234]-чор./i,
      wide: /^[1234]-чорак/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[яфмамииасонд]/i,
      abbreviated: /^(янв|фев|мар|апр|май|июн|июл|авг|сен|окт|ноя|дек)/i,
      wide: /^(январ|феврал|март|апрел|май|июн|июл|август|сентабр|октабр|ноябр|декабр)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^я/i,
        /^ф/i,
        /^м/i,
        /^а/i,
        /^м/i,
        /^и/i,
        /^и/i,
        /^а/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
      ],
      any: [
        /^я/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^май/i,
        /^июн/i,
        /^июл/i,
        /^ав/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[ядсчпжш]/i,
      short: /^(як|ду|се|чо|па|жу|ша)/i,
      abbreviated: /^(якш|душ|сеш|чор|пай|жум|шан)/i,
      wide: /^(якшанба|душанба|сешанба|чоршанба|пайшанба|жума|шанба)/i
    };
    var parseDayPatterns = {
      narrow: [/^я/i, /^д/i, /^с/i, /^ч/i, /^п/i, /^ж/i, /^ш/i],
      any: [/^як/i, /^ду/i, /^се/i, /^чор/i, /^пай/i, /^жу/i, /^шан/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(п\.о\.|п\.к\.|ярим тун|пешиндан кейин|(эрталаб|пешиндан кейин|кечаси|тун))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^п\.о\./i,
        pm: /^п\.к\./i,
        midnight: /^ярим тун/i,
        noon: /^пешиндан кейин/i,
        morning: /эрталаб/i,
        afternoon: /пешиндан кейин/i,
        evening: /кечаси/i,
        night: /тун/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/uz-Cyrl.js
var require_uz_Cyrl = __commonJS({
  "node_modules/date-fns/locale/uz-Cyrl.js"(exports) {
    "use strict";
    exports.uzCyrl = void 0;
    var _index = require_formatDistance82();
    var _index2 = require_formatLong89();
    var _index3 = require_formatRelative82();
    var _index4 = require_localize81();
    var _index5 = require_match80();
    var uzCyrl = exports.uzCyrl = {
      code: "uz-Cyrl",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/vi/_lib/formatDistance.js
var require_formatDistance83 = __commonJS({
  "node_modules/date-fns/locale/vi/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "dưới 1 giây",
        other: "dưới {{count}} giây"
      },
      xSeconds: {
        one: "1 giây",
        other: "{{count}} giây"
      },
      halfAMinute: "nửa phút",
      lessThanXMinutes: {
        one: "dưới 1 phút",
        other: "dưới {{count}} phút"
      },
      xMinutes: {
        one: "1 phút",
        other: "{{count}} phút"
      },
      aboutXHours: {
        one: "khoảng 1 giờ",
        other: "khoảng {{count}} giờ"
      },
      xHours: {
        one: "1 giờ",
        other: "{{count}} giờ"
      },
      xDays: {
        one: "1 ngày",
        other: "{{count}} ngày"
      },
      aboutXWeeks: {
        one: "khoảng 1 tuần",
        other: "khoảng {{count}} tuần"
      },
      xWeeks: {
        one: "1 tuần",
        other: "{{count}} tuần"
      },
      aboutXMonths: {
        one: "khoảng 1 tháng",
        other: "khoảng {{count}} tháng"
      },
      xMonths: {
        one: "1 tháng",
        other: "{{count}} tháng"
      },
      aboutXYears: {
        one: "khoảng 1 năm",
        other: "khoảng {{count}} năm"
      },
      xYears: {
        one: "1 năm",
        other: "{{count}} năm"
      },
      overXYears: {
        one: "hơn 1 năm",
        other: "hơn {{count}} năm"
      },
      almostXYears: {
        one: "gần 1 năm",
        other: "gần {{count}} năm"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + " nữa";
        } else {
          return result + " trước";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/vi/_lib/formatLong.js
var require_formatLong90 = __commonJS({
  "node_modules/date-fns/locale/vi/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      // thứ Sáu, ngày 25 tháng 08 năm 2017
      full: "EEEE, 'ngày' d MMMM 'năm' y",
      // ngày 25 tháng 08 năm 2017
      long: "'ngày' d MMMM 'năm' y",
      // 25 thg 08 năm 2017
      medium: "d MMM 'năm' y",
      // 25/08/2017
      short: "dd/MM/y"
    };
    var timeFormats = {
      full: "HH:mm:ss zzzz",
      long: "HH:mm:ss z",
      medium: "HH:mm:ss",
      short: "HH:mm"
    };
    var dateTimeFormats = {
      // thứ Sáu, ngày 25 tháng 08 năm 2017 23:25:59
      full: "{{date}} {{time}}",
      // ngày 25 tháng 08 năm 2017 23:25
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/vi/_lib/formatRelative.js
var require_formatRelative83 = __commonJS({
  "node_modules/date-fns/locale/vi/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "eeee 'tuần trước vào lúc' p",
      yesterday: "'hôm qua vào lúc' p",
      today: "'hôm nay vào lúc' p",
      tomorrow: "'ngày mai vào lúc' p",
      nextWeek: "eeee 'tới vào lúc' p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/vi/_lib/localize.js
var require_localize82 = __commonJS({
  "node_modules/date-fns/locale/vi/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["TCN", "SCN"],
      abbreviated: ["trước CN", "sau CN"],
      wide: ["trước Công Nguyên", "sau Công Nguyên"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      wide: ["Quý 1", "Quý 2", "Quý 3", "Quý 4"]
    };
    var formattingQuarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["Q1", "Q2", "Q3", "Q4"],
      // I notice many news outlet use this "quý II/2018"
      wide: ["quý I", "quý II", "quý III", "quý IV"]
    };
    var monthValues = {
      narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
      abbreviated: [
        "Thg 1",
        "Thg 2",
        "Thg 3",
        "Thg 4",
        "Thg 5",
        "Thg 6",
        "Thg 7",
        "Thg 8",
        "Thg 9",
        "Thg 10",
        "Thg 11",
        "Thg 12"
      ],
      wide: [
        "Tháng Một",
        "Tháng Hai",
        "Tháng Ba",
        "Tháng Tư",
        "Tháng Năm",
        "Tháng Sáu",
        "Tháng Bảy",
        "Tháng Tám",
        "Tháng Chín",
        "Tháng Mười",
        "Tháng Mười Một",
        "Tháng Mười Hai"
      ]
    };
    var formattingMonthValues = {
      narrow: [
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "10",
        "11",
        "12"
      ],
      abbreviated: [
        "thg 1",
        "thg 2",
        "thg 3",
        "thg 4",
        "thg 5",
        "thg 6",
        "thg 7",
        "thg 8",
        "thg 9",
        "thg 10",
        "thg 11",
        "thg 12"
      ],
      wide: [
        "tháng 01",
        "tháng 02",
        "tháng 03",
        "tháng 04",
        "tháng 05",
        "tháng 06",
        "tháng 07",
        "tháng 08",
        "tháng 09",
        "tháng 10",
        "tháng 11",
        "tháng 12"
      ]
    };
    var dayValues = {
      narrow: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
      short: ["CN", "Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"],
      abbreviated: ["CN", "Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7"],
      wide: [
        "Chủ Nhật",
        "Thứ Hai",
        "Thứ Ba",
        "Thứ Tư",
        "Thứ Năm",
        "Thứ Sáu",
        "Thứ Bảy"
      ]
    };
    var dayPeriodValues = {
      // narrow date period is extremely rare in Vietnamese
      // I used abbreviated form for noon, morning and afternoon
      // which are regconizable by Vietnamese, others cannot be any shorter
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "nửa đêm",
        noon: "tr",
        morning: "sg",
        afternoon: "ch",
        evening: "tối",
        night: "đêm"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "nửa đêm",
        noon: "trưa",
        morning: "sáng",
        afternoon: "chiều",
        evening: "tối",
        night: "đêm"
      },
      wide: {
        am: "SA",
        pm: "CH",
        midnight: "nửa đêm",
        noon: "trưa",
        morning: "sáng",
        afternoon: "chiều",
        evening: "tối",
        night: "đêm"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "am",
        pm: "pm",
        midnight: "nửa đêm",
        noon: "tr",
        morning: "sg",
        afternoon: "ch",
        evening: "tối",
        night: "đêm"
      },
      abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "nửa đêm",
        noon: "trưa",
        morning: "sáng",
        afternoon: "chiều",
        evening: "tối",
        night: "đêm"
      },
      wide: {
        am: "SA",
        pm: "CH",
        midnight: "nửa đêm",
        noon: "giữa trưa",
        morning: "vào buổi sáng",
        afternoon: "vào buổi chiều",
        evening: "vào buổi tối",
        night: "vào ban đêm"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      const unit = options == null ? void 0 : options.unit;
      if (unit === "quarter") {
        switch (number) {
          case 1:
            return "I";
          case 2:
            return "II";
          case 3:
            return "III";
          case 4:
            return "IV";
        }
      } else if (unit === "day") {
        switch (number) {
          case 1:
            return "thứ 2";
          case 2:
            return "thứ 3";
          case 3:
            return "thứ 4";
          case 4:
            return "thứ 5";
          case 5:
            return "thứ 6";
          case 6:
            return "thứ 7";
          case 7:
            return "chủ nhật";
        }
      } else if (unit === "week") {
        if (number === 1) {
          return "thứ nhất";
        } else {
          return "thứ " + number;
        }
      } else if (unit === "dayOfYear") {
        if (number === 1) {
          return "đầu tiên";
        } else {
          return "thứ " + number;
        }
      }
      return String(number);
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/vi/_lib/match.js
var require_match81 = __commonJS({
  "node_modules/date-fns/locale/vi/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(\d+)/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(tcn|scn)/i,
      abbreviated: /^(trước CN|sau CN)/i,
      wide: /^(trước Công Nguyên|sau Công Nguyên)/i
    };
    var parseEraPatterns = {
      any: [/^t/i, /^s/i]
    };
    var matchQuarterPatterns = {
      narrow: /^([1234]|i{1,3}v?)/i,
      abbreviated: /^q([1234]|i{1,3}v?)/i,
      wide: /^quý ([1234]|i{1,3}v?)/i
    };
    var parseQuarterPatterns = {
      any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i]
    };
    var matchMonthPatterns = {
      // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
      // note the order of '1' since it is a sub-string of '10', so must be lower priority
      narrow: /^(0?[2-9]|10|11|12|0?1)/i,
      // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
      abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
      // note the order of 'Mười' since it is sub-string of Mười Một, so must be lower priority
      wide: /^tháng ?(Một|Hai|Ba|Tư|Năm|Sáu|Bảy|Tám|Chín|Mười|Mười ?Một|Mười ?Hai|0?[1-9](?!\d)|10|11|12)/i
    };
    var parseMonthPatterns = {
      narrow: [
        /0?1$/i,
        /0?2/i,
        /3/,
        /4/,
        /5/,
        /6/,
        /7/,
        /8/,
        /9/,
        /10/,
        /11/,
        /12/
      ],
      abbreviated: [
        /^thg[ _]?0?1(?!\d)/i,
        /^thg[ _]?0?2/i,
        /^thg[ _]?0?3/i,
        /^thg[ _]?0?4/i,
        /^thg[ _]?0?5/i,
        /^thg[ _]?0?6/i,
        /^thg[ _]?0?7/i,
        /^thg[ _]?0?8/i,
        /^thg[ _]?0?9/i,
        /^thg[ _]?10/i,
        /^thg[ _]?11/i,
        /^thg[ _]?12/i
      ],
      wide: [
        /^tháng ?(Một|0?1(?!\d))/i,
        /^tháng ?(Hai|0?2)/i,
        /^tháng ?(Ba|0?3)/i,
        /^tháng ?(Tư|0?4)/i,
        /^tháng ?(Năm|0?5)/i,
        /^tháng ?(Sáu|0?6)/i,
        /^tháng ?(Bảy|0?7)/i,
        /^tháng ?(Tám|0?8)/i,
        /^tháng ?(Chín|0?9)/i,
        /^tháng ?(Mười|10)/i,
        /^tháng ?(Mười ?Một|11)/i,
        /^tháng ?(Mười ?Hai|12)/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
      short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
      abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
      wide: /^(Chủ ?Nhật|Chúa ?Nhật|thứ ?Hai|thứ ?Ba|thứ ?Tư|thứ ?Năm|thứ ?Sáu|thứ ?Bảy)/i
    };
    var parseDayPatterns = {
      narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
      wide: [/(Chủ|Chúa) ?Nhật/i, /Hai/i, /Ba/i, /Tư/i, /Năm/i, /Sáu/i, /Bảy/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
      abbreviated: /^(am|pm|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
      wide: /^(ch[^i]*|sa|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^(a|sa)/i,
        pm: /^(p|ch[^i]*)/i,
        midnight: /nửa đêm/i,
        noon: /trưa/i,
        morning: /sáng/i,
        afternoon: /chiều/i,
        evening: /tối/i,
        night: /^đêm/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/vi.js
var require_vi = __commonJS({
  "node_modules/date-fns/locale/vi.js"(exports) {
    "use strict";
    exports.vi = void 0;
    var _index = require_formatDistance83();
    var _index2 = require_formatLong90();
    var _index3 = require_formatRelative83();
    var _index4 = require_localize82();
    var _index5 = require_match81();
    var vi = exports.vi = {
      code: "vi",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/zh-CN/_lib/formatDistance.js
var require_formatDistance84 = __commonJS({
  "node_modules/date-fns/locale/zh-CN/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "不到 1 秒",
        other: "不到 {{count}} 秒"
      },
      xSeconds: {
        one: "1 秒",
        other: "{{count}} 秒"
      },
      halfAMinute: "半分钟",
      lessThanXMinutes: {
        one: "不到 1 分钟",
        other: "不到 {{count}} 分钟"
      },
      xMinutes: {
        one: "1 分钟",
        other: "{{count}} 分钟"
      },
      xHours: {
        one: "1 小时",
        other: "{{count}} 小时"
      },
      aboutXHours: {
        one: "大约 1 小时",
        other: "大约 {{count}} 小时"
      },
      xDays: {
        one: "1 天",
        other: "{{count}} 天"
      },
      aboutXWeeks: {
        one: "大约 1 个星期",
        other: "大约 {{count}} 个星期"
      },
      xWeeks: {
        one: "1 个星期",
        other: "{{count}} 个星期"
      },
      aboutXMonths: {
        one: "大约 1 个月",
        other: "大约 {{count}} 个月"
      },
      xMonths: {
        one: "1 个月",
        other: "{{count}} 个月"
      },
      aboutXYears: {
        one: "大约 1 年",
        other: "大约 {{count}} 年"
      },
      xYears: {
        one: "1 年",
        other: "{{count}} 年"
      },
      overXYears: {
        one: "超过 1 年",
        other: "超过 {{count}} 年"
      },
      almostXYears: {
        one: "将近 1 年",
        other: "将近 {{count}} 年"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "内";
        } else {
          return result + "前";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/zh-CN/_lib/formatLong.js
var require_formatLong91 = __commonJS({
  "node_modules/date-fns/locale/zh-CN/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y'年'M'月'd'日' EEEE",
      long: "y'年'M'月'd'日'",
      medium: "yyyy-MM-dd",
      short: "yy-MM-dd"
    };
    var timeFormats = {
      full: "zzzz a h:mm:ss",
      long: "z a h:mm:ss",
      medium: "a h:mm:ss",
      short: "a h:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-CN/_lib/formatRelative.js
var require_formatRelative84 = __commonJS({
  "node_modules/date-fns/locale/zh-CN/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var _index = require_isSameWeek();
    function checkWeek(date, baseDate, options) {
      const baseFormat = "eeee p";
      if ((0, _index.isSameWeek)(date, baseDate, options)) {
        return baseFormat;
      } else if (date.getTime() > baseDate.getTime()) {
        return "'下个'" + baseFormat;
      }
      return "'上个'" + baseFormat;
    }
    var formatRelativeLocale = {
      lastWeek: checkWeek,
      // days before yesterday, maybe in this week or last week
      yesterday: "'昨天' p",
      today: "'今天' p",
      tomorrow: "'明天' p",
      nextWeek: checkWeek,
      // days after tomorrow, maybe in this week or next week
      other: "PP p"
    };
    var formatRelative = (token, date, baseDate, options) => {
      const format = formatRelativeLocale[token];
      if (typeof format === "function") {
        return format(date, baseDate, options);
      }
      return format;
    };
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/zh-CN/_lib/localize.js
var require_localize83 = __commonJS({
  "node_modules/date-fns/locale/zh-CN/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["前", "公元"],
      abbreviated: ["前", "公元"],
      wide: ["公元前", "公元"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["第一季", "第二季", "第三季", "第四季"],
      wide: ["第一季度", "第二季度", "第三季度", "第四季度"]
    };
    var monthValues = {
      narrow: [
        "一",
        "二",
        "三",
        "四",
        "五",
        "六",
        "七",
        "八",
        "九",
        "十",
        "十一",
        "十二"
      ],
      abbreviated: [
        "1月",
        "2月",
        "3月",
        "4月",
        "5月",
        "6月",
        "7月",
        "8月",
        "9月",
        "10月",
        "11月",
        "12月"
      ],
      wide: [
        "一月",
        "二月",
        "三月",
        "四月",
        "五月",
        "六月",
        "七月",
        "八月",
        "九月",
        "十月",
        "十一月",
        "十二月"
      ]
    };
    var dayValues = {
      narrow: ["日", "一", "二", "三", "四", "五", "六"],
      short: ["日", "一", "二", "三", "四", "五", "六"],
      abbreviated: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
      wide: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "上",
        pm: "下",
        midnight: "凌晨",
        noon: "午",
        morning: "早",
        afternoon: "下午",
        evening: "晚",
        night: "夜"
      },
      abbreviated: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜间"
      },
      wide: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜间"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "上",
        pm: "下",
        midnight: "凌晨",
        noon: "午",
        morning: "早",
        afternoon: "下午",
        evening: "晚",
        night: "夜"
      },
      abbreviated: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜间"
      },
      wide: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜间"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      switch (options == null ? void 0 : options.unit) {
        case "date":
          return number.toString() + "日";
        case "hour":
          return number.toString() + "时";
        case "minute":
          return number.toString() + "分";
        case "second":
          return number.toString() + "秒";
        default:
          return "第 " + number.toString();
      }
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-CN/_lib/match.js
var require_match82 = __commonJS({
  "node_modules/date-fns/locale/zh-CN/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(第\s*)?\d+(日|时|分|秒)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(前)/i,
      abbreviated: /^(前)/i,
      wide: /^(公元前|公元)/i
    };
    var parseEraPatterns = {
      any: [/^(前)/i, /^(公元)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^第[一二三四]刻/i,
      wide: /^第[一二三四]刻钟/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
      abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
      wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^一/i,
        /^二/i,
        /^三/i,
        /^四/i,
        /^五/i,
        /^六/i,
        /^七/i,
        /^八/i,
        /^九/i,
        /^十(?!(一|二))/i,
        /^十一/i,
        /^十二/i
      ],
      any: [
        /^一|1/i,
        /^二|2/i,
        /^三|3/i,
        /^四|4/i,
        /^五|5/i,
        /^六|6/i,
        /^七|7/i,
        /^八|8/i,
        /^九|9/i,
        /^十(?!(一|二))|10/i,
        /^十一|11/i,
        /^十二|12/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[一二三四五六日]/i,
      short: /^[一二三四五六日]/i,
      abbreviated: /^周[一二三四五六日]/i,
      wide: /^星期[一二三四五六日]/i
    };
    var parseDayPatterns = {
      any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-CN.js
var require_zh_CN = __commonJS({
  "node_modules/date-fns/locale/zh-CN.js"(exports) {
    "use strict";
    exports.zhCN = void 0;
    var _index = require_formatDistance84();
    var _index2 = require_formatLong91();
    var _index3 = require_formatRelative84();
    var _index4 = require_localize83();
    var _index5 = require_match82();
    var zhCN = exports.zhCN = {
      code: "zh-CN",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale/zh-HK/_lib/formatDistance.js
var require_formatDistance85 = __commonJS({
  "node_modules/date-fns/locale/zh-HK/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "少於 1 秒",
        other: "少於 {{count}} 秒"
      },
      xSeconds: {
        one: "1 秒",
        other: "{{count}} 秒"
      },
      halfAMinute: "半分鐘",
      lessThanXMinutes: {
        one: "少於 1 分鐘",
        other: "少於 {{count}} 分鐘"
      },
      xMinutes: {
        one: "1 分鐘",
        other: "{{count}} 分鐘"
      },
      xHours: {
        one: "1 小時",
        other: "{{count}} 小時"
      },
      aboutXHours: {
        one: "大約 1 小時",
        other: "大約 {{count}} 小時"
      },
      xDays: {
        one: "1 天",
        other: "{{count}} 天"
      },
      aboutXWeeks: {
        one: "大約 1 個星期",
        other: "大約 {{count}} 個星期"
      },
      xWeeks: {
        one: "1 個星期",
        other: "{{count}} 個星期"
      },
      aboutXMonths: {
        one: "大約 1 個月",
        other: "大約 {{count}} 個月"
      },
      xMonths: {
        one: "1 個月",
        other: "{{count}} 個月"
      },
      aboutXYears: {
        one: "大約 1 年",
        other: "大約 {{count}} 年"
      },
      xYears: {
        one: "1 年",
        other: "{{count}} 年"
      },
      overXYears: {
        one: "超過 1 年",
        other: "超過 {{count}} 年"
      },
      almostXYears: {
        one: "將近 1 年",
        other: "將近 {{count}} 年"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "內";
        } else {
          return result + "前";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/zh-HK/_lib/formatLong.js
var require_formatLong92 = __commonJS({
  "node_modules/date-fns/locale/zh-HK/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y'年'M'月'd'日' EEEE",
      long: "y'年'M'月'd'日'",
      medium: "yyyy-MM-dd",
      short: "yy-MM-dd"
    };
    var timeFormats = {
      full: "zzzz a h:mm:ss",
      long: "z a h:mm:ss",
      medium: "a h:mm:ss",
      short: "a h:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-HK/_lib/formatRelative.js
var require_formatRelative85 = __commonJS({
  "node_modules/date-fns/locale/zh-HK/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'上個'eeee p",
      yesterday: "'昨天' p",
      today: "'今天' p",
      tomorrow: "'明天' p",
      nextWeek: "'下個'eeee p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/zh-HK/_lib/localize.js
var require_localize84 = __commonJS({
  "node_modules/date-fns/locale/zh-HK/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["前", "公元"],
      abbreviated: ["前", "公元"],
      wide: ["公元前", "公元"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["第一季", "第二季", "第三季", "第四季"],
      wide: ["第一季度", "第二季度", "第三季度", "第四季度"]
    };
    var monthValues = {
      narrow: [
        "一",
        "二",
        "三",
        "四",
        "五",
        "六",
        "七",
        "八",
        "九",
        "十",
        "十一",
        "十二"
      ],
      abbreviated: [
        "1月",
        "2月",
        "3月",
        "4月",
        "5月",
        "6月",
        "7月",
        "8月",
        "9月",
        "10月",
        "11月",
        "12月"
      ],
      wide: [
        "一月",
        "二月",
        "三月",
        "四月",
        "五月",
        "六月",
        "七月",
        "八月",
        "九月",
        "十月",
        "十一月",
        "十二月"
      ]
    };
    var dayValues = {
      narrow: ["日", "一", "二", "三", "四", "五", "六"],
      short: ["日", "一", "二", "三", "四", "五", "六"],
      abbreviated: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
      wide: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "上",
        pm: "下",
        midnight: "午夜",
        noon: "晌",
        morning: "早",
        afternoon: "午",
        evening: "晚",
        night: "夜"
      },
      abbreviated: {
        am: "上午",
        pm: "下午",
        midnight: "午夜",
        noon: "中午",
        morning: "上午",
        afternoon: "下午",
        evening: "晚上",
        night: "夜晚"
      },
      wide: {
        am: "上午",
        pm: "下午",
        midnight: "午夜",
        noon: "中午",
        morning: "上午",
        afternoon: "下午",
        evening: "晚上",
        night: "夜晚"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "上",
        pm: "下",
        midnight: "午夜",
        noon: "晌",
        morning: "早",
        afternoon: "午",
        evening: "晚",
        night: "夜"
      },
      abbreviated: {
        am: "上午",
        pm: "下午",
        midnight: "午夜",
        noon: "中午",
        morning: "上午",
        afternoon: "下午",
        evening: "晚上",
        night: "夜晚"
      },
      wide: {
        am: "上午",
        pm: "下午",
        midnight: "午夜",
        noon: "中午",
        morning: "上午",
        afternoon: "下午",
        evening: "晚上",
        night: "夜晚"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      switch (options == null ? void 0 : options.unit) {
        case "date":
          return number + "日";
        case "hour":
          return number + "時";
        case "minute":
          return number + "分";
        case "second":
          return number + "秒";
        default:
          return "第 " + number;
      }
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-HK/_lib/match.js
var require_match83 = __commonJS({
  "node_modules/date-fns/locale/zh-HK/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(前)/i,
      abbreviated: /^(前)/i,
      wide: /^(公元前|公元)/i
    };
    var parseEraPatterns = {
      any: [/^(前)/i, /^(公元)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^第[一二三四]季/i,
      wide: /^第[一二三四]季度/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
      abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
      wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^一/i,
        /^二/i,
        /^三/i,
        /^四/i,
        /^五/i,
        /^六/i,
        /^七/i,
        /^八/i,
        /^九/i,
        /^十(?!(一|二))/i,
        /^十一/i,
        /^十二/i
      ],
      any: [
        /^一|1/i,
        /^二|2/i,
        /^三|3/i,
        /^四|4/i,
        /^五|5/i,
        /^六|6/i,
        /^七|7/i,
        /^八|8/i,
        /^九|9/i,
        /^十(?!(一|二))|10/i,
        /^十一|11/i,
        /^十二|12/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[一二三四五六日]/i,
      short: /^[一二三四五六日]/i,
      abbreviated: /^週[一二三四五六日]/i,
      wide: /^星期[一二三四五六日]/i
    };
    var parseDayPatterns = {
      any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-HK.js
var require_zh_HK = __commonJS({
  "node_modules/date-fns/locale/zh-HK.js"(exports) {
    "use strict";
    exports.zhHK = void 0;
    var _index = require_formatDistance85();
    var _index2 = require_formatLong92();
    var _index3 = require_formatRelative85();
    var _index4 = require_localize84();
    var _index5 = require_match83();
    var zhHK = exports.zhHK = {
      code: "zh-HK",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
      }
    };
  }
});

// node_modules/date-fns/locale/zh-TW/_lib/formatDistance.js
var require_formatDistance86 = __commonJS({
  "node_modules/date-fns/locale/zh-TW/_lib/formatDistance.js"(exports) {
    "use strict";
    exports.formatDistance = void 0;
    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: "少於 1 秒",
        other: "少於 {{count}} 秒"
      },
      xSeconds: {
        one: "1 秒",
        other: "{{count}} 秒"
      },
      halfAMinute: "半分鐘",
      lessThanXMinutes: {
        one: "少於 1 分鐘",
        other: "少於 {{count}} 分鐘"
      },
      xMinutes: {
        one: "1 分鐘",
        other: "{{count}} 分鐘"
      },
      xHours: {
        one: "1 小時",
        other: "{{count}} 小時"
      },
      aboutXHours: {
        one: "大約 1 小時",
        other: "大約 {{count}} 小時"
      },
      xDays: {
        one: "1 天",
        other: "{{count}} 天"
      },
      aboutXWeeks: {
        one: "大約 1 個星期",
        other: "大約 {{count}} 個星期"
      },
      xWeeks: {
        one: "1 個星期",
        other: "{{count}} 個星期"
      },
      aboutXMonths: {
        one: "大約 1 個月",
        other: "大約 {{count}} 個月"
      },
      xMonths: {
        one: "1 個月",
        other: "{{count}} 個月"
      },
      aboutXYears: {
        one: "大約 1 年",
        other: "大約 {{count}} 年"
      },
      xYears: {
        one: "1 年",
        other: "{{count}} 年"
      },
      overXYears: {
        one: "超過 1 年",
        other: "超過 {{count}} 年"
      },
      almostXYears: {
        one: "將近 1 年",
        other: "將近 {{count}} 年"
      }
    };
    var formatDistance = (token, count, options) => {
      let result;
      const tokenValue = formatDistanceLocale[token];
      if (typeof tokenValue === "string") {
        result = tokenValue;
      } else if (count === 1) {
        result = tokenValue.one;
      } else {
        result = tokenValue.other.replace("{{count}}", String(count));
      }
      if (options == null ? void 0 : options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
          return result + "內";
        } else {
          return result + "前";
        }
      }
      return result;
    };
    exports.formatDistance = formatDistance;
  }
});

// node_modules/date-fns/locale/zh-TW/_lib/formatLong.js
var require_formatLong93 = __commonJS({
  "node_modules/date-fns/locale/zh-TW/_lib/formatLong.js"(exports) {
    "use strict";
    exports.formatLong = void 0;
    var _index = require_buildFormatLongFn();
    var dateFormats = {
      full: "y'年'M'月'd'日' EEEE",
      long: "y'年'M'月'd'日'",
      medium: "yyyy-MM-dd",
      short: "yy-MM-dd"
    };
    var timeFormats = {
      full: "zzzz a h:mm:ss",
      long: "z a h:mm:ss",
      medium: "a h:mm:ss",
      short: "a h:mm"
    };
    var dateTimeFormats = {
      full: "{{date}} {{time}}",
      long: "{{date}} {{time}}",
      medium: "{{date}} {{time}}",
      short: "{{date}} {{time}}"
    };
    var formatLong = exports.formatLong = {
      date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
      }),
      time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
      }),
      dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-TW/_lib/formatRelative.js
var require_formatRelative86 = __commonJS({
  "node_modules/date-fns/locale/zh-TW/_lib/formatRelative.js"(exports) {
    "use strict";
    exports.formatRelative = void 0;
    var formatRelativeLocale = {
      lastWeek: "'上個'eeee p",
      yesterday: "'昨天' p",
      today: "'今天' p",
      tomorrow: "'明天' p",
      nextWeek: "'下個'eeee p",
      other: "P"
    };
    var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];
    exports.formatRelative = formatRelative;
  }
});

// node_modules/date-fns/locale/zh-TW/_lib/localize.js
var require_localize85 = __commonJS({
  "node_modules/date-fns/locale/zh-TW/_lib/localize.js"(exports) {
    "use strict";
    exports.localize = void 0;
    var _index = require_buildLocalizeFn();
    var eraValues = {
      narrow: ["前", "公元"],
      abbreviated: ["前", "公元"],
      wide: ["公元前", "公元"]
    };
    var quarterValues = {
      narrow: ["1", "2", "3", "4"],
      abbreviated: ["第一刻", "第二刻", "第三刻", "第四刻"],
      wide: ["第一刻鐘", "第二刻鐘", "第三刻鐘", "第四刻鐘"]
    };
    var monthValues = {
      narrow: [
        "一",
        "二",
        "三",
        "四",
        "五",
        "六",
        "七",
        "八",
        "九",
        "十",
        "十一",
        "十二"
      ],
      abbreviated: [
        "1月",
        "2月",
        "3月",
        "4月",
        "5月",
        "6月",
        "7月",
        "8月",
        "9月",
        "10月",
        "11月",
        "12月"
      ],
      wide: [
        "一月",
        "二月",
        "三月",
        "四月",
        "五月",
        "六月",
        "七月",
        "八月",
        "九月",
        "十月",
        "十一月",
        "十二月"
      ]
    };
    var dayValues = {
      narrow: ["日", "一", "二", "三", "四", "五", "六"],
      short: ["日", "一", "二", "三", "四", "五", "六"],
      abbreviated: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
      wide: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
    };
    var dayPeriodValues = {
      narrow: {
        am: "上",
        pm: "下",
        midnight: "凌晨",
        noon: "午",
        morning: "早",
        afternoon: "下午",
        evening: "晚",
        night: "夜"
      },
      abbreviated: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜間"
      },
      wide: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜間"
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: "上",
        pm: "下",
        midnight: "凌晨",
        noon: "午",
        morning: "早",
        afternoon: "下午",
        evening: "晚",
        night: "夜"
      },
      abbreviated: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜間"
      },
      wide: {
        am: "上午",
        pm: "下午",
        midnight: "凌晨",
        noon: "中午",
        morning: "早晨",
        afternoon: "中午",
        evening: "晚上",
        night: "夜間"
      }
    };
    var ordinalNumber = (dirtyNumber, options) => {
      const number = Number(dirtyNumber);
      switch (options == null ? void 0 : options.unit) {
        case "date":
          return number + "日";
        case "hour":
          return number + "時";
        case "minute":
          return number + "分";
        case "second":
          return number + "秒";
        default:
          return "第 " + number;
      }
    };
    var localize = exports.localize = {
      ordinalNumber,
      era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
      }),
      quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter) => quarter - 1
      }),
      month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
      }),
      day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
      }),
      dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-TW/_lib/match.js
var require_match84 = __commonJS({
  "node_modules/date-fns/locale/zh-TW/_lib/match.js"(exports) {
    "use strict";
    exports.match = void 0;
    var _index = require_buildMatchFn();
    var _index2 = require_buildMatchPatternFn();
    var matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(前)/i,
      abbreviated: /^(前)/i,
      wide: /^(公元前|公元)/i
    };
    var parseEraPatterns = {
      any: [/^(前)/i, /^(公元)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^第[一二三四]刻/i,
      wide: /^第[一二三四]刻鐘/i
    };
    var parseQuarterPatterns = {
      any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
    };
    var matchMonthPatterns = {
      narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
      abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
      wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
    };
    var parseMonthPatterns = {
      narrow: [
        /^一/i,
        /^二/i,
        /^三/i,
        /^四/i,
        /^五/i,
        /^六/i,
        /^七/i,
        /^八/i,
        /^九/i,
        /^十(?!(一|二))/i,
        /^十一/i,
        /^十二/i
      ],
      any: [
        /^一|1/i,
        /^二|2/i,
        /^三|3/i,
        /^四|4/i,
        /^五|5/i,
        /^六|6/i,
        /^七|7/i,
        /^八|8/i,
        /^九|9/i,
        /^十(?!(一|二))|10/i,
        /^十一|11/i,
        /^十二|12/i
      ]
    };
    var matchDayPatterns = {
      narrow: /^[一二三四五六日]/i,
      short: /^[一二三四五六日]/i,
      abbreviated: /^週[一二三四五六日]/i,
      wide: /^星期[一二三四五六日]/i
    };
    var parseDayPatterns = {
      any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
    };
    var matchDayPeriodPatterns = {
      any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
      }
    };
    var match = exports.match = {
      ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value) => parseInt(value, 10)
      }),
      era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
      }),
      quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index) => index + 1
      }),
      month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
      }),
      day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
      }),
      dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
      })
    };
  }
});

// node_modules/date-fns/locale/zh-TW.js
var require_zh_TW = __commonJS({
  "node_modules/date-fns/locale/zh-TW.js"(exports) {
    "use strict";
    exports.zhTW = void 0;
    var _index = require_formatDistance86();
    var _index2 = require_formatLong93();
    var _index3 = require_formatRelative86();
    var _index4 = require_localize85();
    var _index5 = require_match84();
    var zhTW = exports.zhTW = {
      code: "zh-TW",
      formatDistance: _index.formatDistance,
      formatLong: _index2.formatLong,
      formatRelative: _index3.formatRelative,
      localize: _index4.localize,
      match: _index5.match,
      options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
      }
    };
  }
});

// node_modules/date-fns/locale.js
var require_locale = __commonJS({
  "node_modules/date-fns/locale.js"(exports) {
    "use strict";
    var _index = require_af();
    Object.keys(_index).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index[key];
        }
      });
    });
    var _index2 = require_ar();
    Object.keys(_index2).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index2[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index2[key];
        }
      });
    });
    var _index3 = require_ar_DZ();
    Object.keys(_index3).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index3[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index3[key];
        }
      });
    });
    var _index4 = require_ar_EG();
    Object.keys(_index4).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index4[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index4[key];
        }
      });
    });
    var _index5 = require_ar_MA();
    Object.keys(_index5).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index5[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index5[key];
        }
      });
    });
    var _index6 = require_ar_SA();
    Object.keys(_index6).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index6[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index6[key];
        }
      });
    });
    var _index7 = require_ar_TN();
    Object.keys(_index7).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index7[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index7[key];
        }
      });
    });
    var _index8 = require_az();
    Object.keys(_index8).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index8[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index8[key];
        }
      });
    });
    var _index9 = require_be();
    Object.keys(_index9).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index9[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index9[key];
        }
      });
    });
    var _index10 = require_be_tarask();
    Object.keys(_index10).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index10[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index10[key];
        }
      });
    });
    var _index11 = require_bg();
    Object.keys(_index11).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index11[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index11[key];
        }
      });
    });
    var _index12 = require_bn();
    Object.keys(_index12).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index12[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index12[key];
        }
      });
    });
    var _index13 = require_bs();
    Object.keys(_index13).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index13[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index13[key];
        }
      });
    });
    var _index14 = require_ca();
    Object.keys(_index14).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index14[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index14[key];
        }
      });
    });
    var _index15 = require_ckb();
    Object.keys(_index15).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index15[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index15[key];
        }
      });
    });
    var _index16 = require_cs();
    Object.keys(_index16).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index16[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index16[key];
        }
      });
    });
    var _index17 = require_cy();
    Object.keys(_index17).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index17[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index17[key];
        }
      });
    });
    var _index18 = require_da();
    Object.keys(_index18).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index18[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index18[key];
        }
      });
    });
    var _index19 = require_de();
    Object.keys(_index19).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index19[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index19[key];
        }
      });
    });
    var _index20 = require_de_AT();
    Object.keys(_index20).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index20[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index20[key];
        }
      });
    });
    var _index21 = require_el();
    Object.keys(_index21).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index21[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index21[key];
        }
      });
    });
    var _index22 = require_en_AU();
    Object.keys(_index22).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index22[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index22[key];
        }
      });
    });
    var _index23 = require_en_CA();
    Object.keys(_index23).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index23[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index23[key];
        }
      });
    });
    var _index24 = require_en_GB();
    Object.keys(_index24).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index24[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index24[key];
        }
      });
    });
    var _index25 = require_en_IE();
    Object.keys(_index25).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index25[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index25[key];
        }
      });
    });
    var _index26 = require_en_IN();
    Object.keys(_index26).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index26[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index26[key];
        }
      });
    });
    var _index27 = require_en_NZ();
    Object.keys(_index27).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index27[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index27[key];
        }
      });
    });
    var _index28 = require_en_US();
    Object.keys(_index28).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index28[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index28[key];
        }
      });
    });
    var _index29 = require_en_ZA();
    Object.keys(_index29).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index29[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index29[key];
        }
      });
    });
    var _index30 = require_eo();
    Object.keys(_index30).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index30[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index30[key];
        }
      });
    });
    var _index31 = require_es();
    Object.keys(_index31).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index31[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index31[key];
        }
      });
    });
    var _index32 = require_et();
    Object.keys(_index32).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index32[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index32[key];
        }
      });
    });
    var _index33 = require_eu();
    Object.keys(_index33).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index33[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index33[key];
        }
      });
    });
    var _index34 = require_fa_IR();
    Object.keys(_index34).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index34[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index34[key];
        }
      });
    });
    var _index35 = require_fi();
    Object.keys(_index35).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index35[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index35[key];
        }
      });
    });
    var _index36 = require_fr();
    Object.keys(_index36).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index36[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index36[key];
        }
      });
    });
    var _index37 = require_fr_CA();
    Object.keys(_index37).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index37[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index37[key];
        }
      });
    });
    var _index38 = require_fr_CH();
    Object.keys(_index38).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index38[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index38[key];
        }
      });
    });
    var _index39 = require_fy();
    Object.keys(_index39).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index39[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index39[key];
        }
      });
    });
    var _index40 = require_gd();
    Object.keys(_index40).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index40[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index40[key];
        }
      });
    });
    var _index41 = require_gl();
    Object.keys(_index41).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index41[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index41[key];
        }
      });
    });
    var _index42 = require_gu();
    Object.keys(_index42).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index42[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index42[key];
        }
      });
    });
    var _index43 = require_he();
    Object.keys(_index43).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index43[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index43[key];
        }
      });
    });
    var _index44 = require_hi();
    Object.keys(_index44).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index44[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index44[key];
        }
      });
    });
    var _index45 = require_hr();
    Object.keys(_index45).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index45[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index45[key];
        }
      });
    });
    var _index46 = require_ht();
    Object.keys(_index46).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index46[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index46[key];
        }
      });
    });
    var _index47 = require_hu();
    Object.keys(_index47).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index47[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index47[key];
        }
      });
    });
    var _index48 = require_hy();
    Object.keys(_index48).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index48[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index48[key];
        }
      });
    });
    var _index49 = require_id();
    Object.keys(_index49).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index49[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index49[key];
        }
      });
    });
    var _index50 = require_is();
    Object.keys(_index50).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index50[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index50[key];
        }
      });
    });
    var _index51 = require_it();
    Object.keys(_index51).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index51[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index51[key];
        }
      });
    });
    var _index52 = require_it_CH();
    Object.keys(_index52).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index52[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index52[key];
        }
      });
    });
    var _index53 = require_ja();
    Object.keys(_index53).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index53[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index53[key];
        }
      });
    });
    var _index54 = require_ja_Hira();
    Object.keys(_index54).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index54[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index54[key];
        }
      });
    });
    var _index55 = require_ka();
    Object.keys(_index55).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index55[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index55[key];
        }
      });
    });
    var _index56 = require_kk();
    Object.keys(_index56).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index56[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index56[key];
        }
      });
    });
    var _index57 = require_km();
    Object.keys(_index57).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index57[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index57[key];
        }
      });
    });
    var _index58 = require_kn();
    Object.keys(_index58).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index58[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index58[key];
        }
      });
    });
    var _index59 = require_ko();
    Object.keys(_index59).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index59[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index59[key];
        }
      });
    });
    var _index60 = require_lb();
    Object.keys(_index60).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index60[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index60[key];
        }
      });
    });
    var _index61 = require_lt();
    Object.keys(_index61).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index61[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index61[key];
        }
      });
    });
    var _index62 = require_lv();
    Object.keys(_index62).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index62[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index62[key];
        }
      });
    });
    var _index63 = require_mk();
    Object.keys(_index63).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index63[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index63[key];
        }
      });
    });
    var _index64 = require_mn();
    Object.keys(_index64).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index64[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index64[key];
        }
      });
    });
    var _index65 = require_ms();
    Object.keys(_index65).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index65[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index65[key];
        }
      });
    });
    var _index66 = require_mt();
    Object.keys(_index66).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index66[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index66[key];
        }
      });
    });
    var _index67 = require_nb();
    Object.keys(_index67).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index67[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index67[key];
        }
      });
    });
    var _index68 = require_nl();
    Object.keys(_index68).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index68[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index68[key];
        }
      });
    });
    var _index69 = require_nl_BE();
    Object.keys(_index69).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index69[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index69[key];
        }
      });
    });
    var _index70 = require_nn();
    Object.keys(_index70).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index70[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index70[key];
        }
      });
    });
    var _index71 = require_oc();
    Object.keys(_index71).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index71[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index71[key];
        }
      });
    });
    var _index72 = require_pl();
    Object.keys(_index72).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index72[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index72[key];
        }
      });
    });
    var _index73 = require_pt();
    Object.keys(_index73).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index73[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index73[key];
        }
      });
    });
    var _index74 = require_pt_BR();
    Object.keys(_index74).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index74[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index74[key];
        }
      });
    });
    var _index75 = require_ro();
    Object.keys(_index75).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index75[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index75[key];
        }
      });
    });
    var _index76 = require_ru();
    Object.keys(_index76).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index76[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index76[key];
        }
      });
    });
    var _index77 = require_se();
    Object.keys(_index77).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index77[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index77[key];
        }
      });
    });
    var _index78 = require_sk();
    Object.keys(_index78).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index78[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index78[key];
        }
      });
    });
    var _index79 = require_sl();
    Object.keys(_index79).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index79[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index79[key];
        }
      });
    });
    var _index80 = require_sq();
    Object.keys(_index80).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index80[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index80[key];
        }
      });
    });
    var _index81 = require_sr();
    Object.keys(_index81).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index81[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index81[key];
        }
      });
    });
    var _index82 = require_sr_Latn();
    Object.keys(_index82).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index82[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index82[key];
        }
      });
    });
    var _index83 = require_sv();
    Object.keys(_index83).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index83[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index83[key];
        }
      });
    });
    var _index84 = require_ta();
    Object.keys(_index84).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index84[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index84[key];
        }
      });
    });
    var _index85 = require_te();
    Object.keys(_index85).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index85[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index85[key];
        }
      });
    });
    var _index86 = require_th();
    Object.keys(_index86).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index86[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index86[key];
        }
      });
    });
    var _index87 = require_tr();
    Object.keys(_index87).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index87[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index87[key];
        }
      });
    });
    var _index88 = require_ug();
    Object.keys(_index88).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index88[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index88[key];
        }
      });
    });
    var _index89 = require_uk();
    Object.keys(_index89).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index89[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index89[key];
        }
      });
    });
    var _index90 = require_uz();
    Object.keys(_index90).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index90[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index90[key];
        }
      });
    });
    var _index91 = require_uz_Cyrl();
    Object.keys(_index91).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index91[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index91[key];
        }
      });
    });
    var _index92 = require_vi();
    Object.keys(_index92).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index92[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index92[key];
        }
      });
    });
    var _index93 = require_zh_CN();
    Object.keys(_index93).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index93[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index93[key];
        }
      });
    });
    var _index94 = require_zh_HK();
    Object.keys(_index94).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index94[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index94[key];
        }
      });
    });
    var _index95 = require_zh_TW();
    Object.keys(_index95).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (key in exports && exports[key] === _index95[key])
        return;
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _index95[key];
        }
      });
    });
  }
});

// node_modules/rc-picker/lib/generate/dateFns.js
var require_dateFns = __commonJS({
  "node_modules/rc-picker/lib/generate/dateFns.js"(exports) {
    var _typeof = require_typeof();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _dateFns = require_date_fns();
    var locales = _interopRequireWildcard(require_locale());
    function _getRequireWildcardCache(e) {
      if ("function" != typeof WeakMap)
        return null;
      var r = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(e2) {
        return e2 ? t : r;
      })(e);
    }
    function _interopRequireWildcard(e, r) {
      if (!r && e && e.__esModule)
        return e;
      if (null === e || "object" != _typeof(e) && "function" != typeof e)
        return { default: e };
      var t = _getRequireWildcardCache(r);
      if (t && t.has(e))
        return t.get(e);
      var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var u in e)
        if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
      return n.default = e, t && t.set(e, n), n;
    }
    var getLocale = function getLocale2(locale) {
      return locales[locale] || locales[locale.replace(/_/g, "")] || locales[locale.replace(/_.*$/g, "")];
    };
    var localeParse = function localeParse2(format) {
      return format.replace(/Y/g, "y").replace(/D/g, "d").replace(/gggg/, "yyyy").replace(/g/g, "G").replace(/([Ww])o/g, "wo");
    };
    var generateConfig = {
      // get
      getNow: function getNow() {
        return /* @__PURE__ */ new Date();
      },
      getFixedDate: function getFixedDate(string) {
        return new Date(string);
      },
      getEndDate: function getEndDate(date) {
        return (0, _dateFns.endOfMonth)(date);
      },
      getWeekDay: function getWeekDay(date) {
        return (0, _dateFns.getDay)(date);
      },
      getYear: function getYear(date) {
        return (0, _dateFns.getYear)(date);
      },
      getMonth: function getMonth(date) {
        return (0, _dateFns.getMonth)(date);
      },
      getDate: function getDate(date) {
        return (0, _dateFns.getDate)(date);
      },
      getHour: function getHour(date) {
        return (0, _dateFns.getHours)(date);
      },
      getMinute: function getMinute(date) {
        return (0, _dateFns.getMinutes)(date);
      },
      getSecond: function getSecond(date) {
        return (0, _dateFns.getSeconds)(date);
      },
      getMillisecond: function getMillisecond(date) {
        return date.getMilliseconds();
      },
      // set
      addYear: function addYear(date, diff) {
        return (0, _dateFns.addYears)(date, diff);
      },
      addMonth: function addMonth(date, diff) {
        return (0, _dateFns.addMonths)(date, diff);
      },
      addDate: function addDate(date, diff) {
        return (0, _dateFns.addDays)(date, diff);
      },
      setYear: function setYear(date, year) {
        return (0, _dateFns.setYear)(date, year);
      },
      setMonth: function setMonth(date, month) {
        return (0, _dateFns.setMonth)(date, month);
      },
      setDate: function setDate(date, num) {
        return (0, _dateFns.setDate)(date, num);
      },
      setHour: function setHour(date, hour) {
        return (0, _dateFns.setHours)(date, hour);
      },
      setMinute: function setMinute(date, minute) {
        return (0, _dateFns.setMinutes)(date, minute);
      },
      setSecond: function setSecond(date, second) {
        return (0, _dateFns.setSeconds)(date, second);
      },
      setMillisecond: function setMillisecond(date, millisecond) {
        return (0, _dateFns.setMilliseconds)(date, millisecond);
      },
      // Compare
      isAfter: function isAfter(date1, date2) {
        return (0, _dateFns.isAfter)(date1, date2);
      },
      isValidate: function isValidate(date) {
        return (0, _dateFns.isValid)(date);
      },
      locale: {
        getWeekFirstDay: function getWeekFirstDay(locale) {
          var clone = getLocale(locale);
          return clone.options.weekStartsOn;
        },
        getWeekFirstDate: function getWeekFirstDate(locale, date) {
          return (0, _dateFns.startOfWeek)(date, {
            locale: getLocale(locale)
          });
        },
        getWeek: function getWeek(locale, date) {
          return (0, _dateFns.getWeek)(date, {
            locale: getLocale(locale)
          });
        },
        getShortWeekDays: function getShortWeekDays(locale) {
          var clone = getLocale(locale);
          return Array.from({
            length: 7
          }).map(function(_, i) {
            return clone.localize.day(i, {
              width: "short"
            });
          });
        },
        getShortMonths: function getShortMonths(locale) {
          var clone = getLocale(locale);
          return Array.from({
            length: 12
          }).map(function(_, i) {
            return clone.localize.month(i, {
              width: "abbreviated"
            });
          });
        },
        format: function format(locale, date, _format) {
          if (!(0, _dateFns.isValid)(date)) {
            return null;
          }
          return (0, _dateFns.format)(date, localeParse(_format), {
            locale: getLocale(locale)
          });
        },
        parse: function parse(locale, text, formats) {
          for (var i = 0; i < formats.length; i += 1) {
            var format = localeParse(formats[i]);
            var formatText = text;
            var date = (0, _dateFns.parse)(formatText, format, /* @__PURE__ */ new Date(), {
              locale: getLocale(locale)
            });
            if ((0, _dateFns.isValid)(date)) {
              return date;
            }
          }
          return null;
        }
      }
    };
    var _default = exports.default = generateConfig;
  }
});
export default require_dateFns();
//# sourceMappingURL=rc-picker_lib_generate_dateFns.js.map
